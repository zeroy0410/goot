[github.com/cokeBeer/goot/cmd/taintanalysis/case]
[]
6712
recordUnlock
Index
addCountsAndClearFlags
runtime_setProfLabel
UnreadByte
IsExported
FullRune
close_trampoline
gcBgMarkPrepare
fnv
ArrayType
Read
Err
Atan
Error
objIndex
symMerge_func
panicdottypeE
panicNotMap
write
stripMono
NewReader
setMemoryLimit
MkdirTemp
Done
readFrom
mustBeExported
init
IsLetter
indexRune
fmtUnicode
freeUserArenaChunk
exited
releaseLockRank
median
ParseUnixRights
startLine
SetDeadline
Value
casfrom_Gscanstatus
entersyscallblock$1
writeTo
Minute
heapBitsSlice
libc_getgid_trampoline
makeStringFinder
GcSlice
entersyscall_gcwait
initMetrics$8
SetWriteDeadline
takeFromFront
splitPath
Read
readCloseError
runtime_Semacquire
MarshalJSON
allocRange
_VDSO
New
buildTypeAssertCache$1
expiredWriteDeadline
levelIndexToOffAddr
increment
pages64
heapBitsSmallForAddr
srcFunc
SimpleFold
ReverseBytes16
init
os_sigpipe
recordForPanic
parseFloatPrefix
AppendQuoteToASCII
walkDir
runExitHooks
String
Write
printbool
rotateOrdered
syscall
To
Is
readmemstats_m
libc_getcwd_trampoline
Next
Nanoseconds
uncommon
ignoringEINTR
typeOff
libc_utimes_trampoline
notSpace
cgoCheckUnknownPointer
MapRange
Size
stringtoslicerune
Round
put
startTheWorld
In
Value
Appendln
newobject
wake
setMarked
ChanDir
reflect_memclrNoHeapPointers
newm1
syscall6X
CloseOnExec
scanInt
Erfcinv
GCActive
racefini
UserTime
notesleep
r16
libc_rmdir_trampoline
get
TryRecv
mput
toType
hexString
RecvmsgInet4
panicSlice3Alen
string
matchChunk
syscallPtr
SwapInt64
contains
IsExported
Unwrap
reentersyscall$2
sizeclass
netpollAdjustWaiters
init
Float32bits
call262144
Replace
racereleaseacquireg
Tick
libcCall
memhash_varlen
SetBool
Store
convT32
Timeout
readByte
traceReaderAvailable
cas
finishGCTransition
Error
gcMarkRootPrepare
Fscanln
ReflexiveKey
setDeadline
ReadBytes
Load
runtime_expandFinalInlineFrame
printCgoTraceback$1
ReadDir
WriteTo
Complex
init
ensure
r12
fmtNSAsMS
bool2int
archTan
sysAlloc
libc_fpathconf_trampoline
Background
r15
isInGraphicList
regAssign
ReadMemStats$1
lock
Load[runtime._defer]
tryCompareAndSwap
asyncPreempt
archRemainder
cvtComplex
sysUsage
Uncommon
pthread_attr_init
cansemacquire
interfaceEqual$1
Grow
Store
traceThreadDestroy$1
arrayAt
flush
sigNotOnStack
IsDirectIface
_LostExternalCode
nextMarkBitArenaEpoch
init
FormatComplex
MapType
WriteString
globrunqget
Mod
Field
GcSlice
publicationBarrier
Wait4
fnvUint32
stkobjinit
libc_freeaddrinfo_trampoline
Close
setGCPhase
direntNamlen
reflect_mapiternext
Milliseconds
globrunqput
mspinning
walkSymlinks
fgt32
scavengeAll
nsToSec
trace_userTaskEnd
read
add
park
libc_open_trampoline
exit
panicnildottype
runtime_pprof_runtime_cyclesPerSecond
free
doaddtimer
EqualFold
SetsockoptIPMreq
SetsockoptInt
write
writeString
Write
sysctlbynameInt32
unlockWithRank
cvtIntFloat
Xchgint32
syscallX
Len
Error
mapKeyError
next
Unix
ExportedMethods
Write
Len
Fields
swapRangeCmpFunc
MapIndex
fmt0x64
isInf
syscall_runtimeUnsetenv
typedarrayclear
SetBytes
raceReadObjectPC
Less
libc_lstat_trampoline
parseLinkLayerAddr
prepGoExitFrame
Type
indexFunc
sync_runtime_procPin
newPinnerBits
pthread_mutex_unlock
peek
trySwap
lfstackPack
SetFloat
stopTheWorldWithSema
Read
WriteString
hasCgoOnStack
sync_runtime_doSpin
Kind
Readdir
init
fmtE
EncodeRune
HasName
netpollGenericInit
subtractb
LoadUint32
ParseFloat
initialized
libc_kqueue_trampoline
unminit
CompareAndSwapUint32
FieldAlign
reentersyscall$1
FuncOf$1
Print
fdiv32
Add
propagateCancel
makeLimiterEventStamp
newIncNonDefault
Len
syscall_runtime_AfterExec
FieldAlign
Kind
Stack
Unwrap
Round
stepsForValue
float64sImpl
panicdottypeI
layout
scavenge$1
argBytes
stackfree
trigger
write_trampoline
haveIdenticalType
Fprint
fmax
partitionEqualOrdered
setWriteDeadline
isEmpty
IndexString
Swapper$5
pinnerGetPtr
Getpagesize
shorten
mProf_Free
StoreNoWB
r2
goready$1
isOddInt
goPanicSliceB
childStderr
Size
funcLayout$1
entersyscall
HasName
gfget$2
sys
uvarint
rest
cgoContextPCs
debug_modinfo
WriteString
beforeIdle
appendQuotedWith
initMetrics$43
Read
init
setSpans
load
deductAssistCredit
gcinit
coroswitch
Read
libc_getegid_trampoline
Chown
StorepNoWB
common
printCgoTraceback
gcdata
Store[syscall.Rlimit]
WriteString
stackAssign
sockaddr
traceAdvance$1$1
Fstatat
futimes
SetWriteDeadline
bucket
IsAbs
Len
badmorestackgsignal
call
Int
setEmpty
Out
IsExported
bitSizeError
selectnbsend
legacy_fastrand
ReadAt
read
usleep
doubleCheckTypePointersOfType
traceProcFree
fcntl
libc_revoke_trampoline
write
decPinCounter
writeByte
setPinned
throw$1
Reseed
SetsockoptByte
cgoCheckTypedBlock
tryGetFast
libc_getuid_trampoline
GcSlice
setUserArenaChunkToFault
balance
ToLowerSpecial
fatalpanic$1
GoroutineProfile
Len
Timeout
gcMarkTermination$5
archModf
readTrace0$1
WithoutCancel
String
SetReadDeadline
choosePivot_func
stealID
run
Align
gcMarkTermination$4
Copy
concatstring3
trace_userLog
childStdin
string
IsNotExist
skip
Uncommon
SystemTime
Open
SetsockoptICMPv6Filter
GetsockoptByte
fmtFloat
fadd32
Write
mProf_Malloc
IndexFunc
ensure
Swap
inHeapOrStack
tryRecordGoroutineProfileWB
pinSlow
Exchangedata
Fprintf
RuntimeError
acquireStatus
Contains
chanlen
token
sysctl
IsExist
incref
Kevent
StopTrace
WithCancel
Add
varint
Out
reset
subtract
stoplockedm
gcParkAssist
Reverse
IsBlank
asanWrite
isPinned
LeadingZeros64
Rem64
IfaceIndir
medianOrdered
Error
Convert
prefixIsLessThan
ReadMsg
NewAt
setPinnerBits
semacquire
Div32
Getuid
Store[runtime._defer]
Unwrap
IsExported
Itoa
stringsImpl
WithCancel$1
ReadFrom
Search
NumField
WriteAt
Ceil
CPUProfile
RuneCountInString
fmtBx
FromSlash
SetsockoptInet4Addr
ToValidUTF8
rawruneslice
getempty$1
sync_atomic_SwapUintptr
fastForward
osSetupTLS
Signal
floatCompare
reflect_resolveTextOff
setNonEmpty
Unlock
Sscan
r8
findSmallN
Done
recvfromInet6
selectsetpc
exitThread
NumIn
archErf
Dup2
LeadingZeros
findMappedAddr
Munlockall
shade
Erf
Len8
AfterFunc$1$1
runtime_procPin
printint
call16777216
Index
dumpobjs
sigNoteSetup
mayMoreStackMove
internal_syscall_gostring
Reset
IsDirectIface
rlock$1
J1
write
cgoCheckPointer
IsControl
checkempty
stringNonString
mapclear
SetBpfInterface
StringSlicePtr
sync_atomic_runtime_procPin
memmove
ReadTrace$1
erf
ParseComplex
debugCallPanicked
libc_setegid_trampoline
newcoro$1
sys
divideByElemSize
gcDrainN
grow
Environ
osyield_no_g
String
trim
bswapIfBigEndian
CompareAndSwap
init#4
libc_fstatfs_trampoline
Getpid
ArrayType
captureStack
GaiStrerror
printDebugLog
funcInfo
close
Swap[any]
fstatat
moveTimers
libc_getgrgid_r_trampoline
Getpwuid
truncate
merge
values
setNsec
runtime_randn
libc_pwrite_trampoline
compute
pkgPath
poll_runtime_pollServerInit
Name
sockaddr
lessThanHalf
fintto64
syscall_cgocaller
nilinterequal
libc_recvfrom_trampoline
ToTitle$bound
typePointersOfUnchecked
mapiterkey
findRunnableGCWorker
empty
RecordSyscallExitedTime
ReadMemStats
Done
String
mustBeAssignableSlow
String
usesLibcall
objBase
handoffp
UncommonSize
breakPatterns
recvmsgRaw
init
newoverflow
resetLive
cleanGlobPath
isLocal
setitimer
atoi32
Deadline
Sort
sigInitIgnored
stackpoolalloc
SetBpfHeadercmpl
GetsockoptIPv6MTUInfo
call16
Xadduintptr
traceBufFlush
iterate_itabs
Len
partialInsertionSort_func
close$thunk
mustBeAssignable
get2
hasMeta
Or
shrinkstack
Bswap32
Len32
divlu
putfull
IsAbs
drop
libresolv_res_9_nsearch_trampoline
Fchmod
Truncate
fuint64to64
Or64
BpfHeadercmpl
init
panicIndexU
Concat
SetBlocking
UnixMilli
pthread_cond_init
schedinit
Close
captureStack$1
RotateLeft16
emit
setNonblock
resetspinning
makeFloat32
mapdelete_faststr
RawSyscall
String
unexpungeLocked
Unlock
setGCPercent
ArrayType
Kind
RoundedInteger
convTslice
sysHugePageCollapse
SetReadDeadline
IsNil
write
initMetrics$33
newProcess
asinh
mustBe
empty
anyToSockaddr
statNolog$1
Sort[[]string string]
scanNumber
closeWrite$1
Error
sysFreeOS
initMetrics$49
MapType
choosePivot
copyKeys
sysGrow$2
dispose
init
Frexp
floatToken
pwrite
setUserArenaChunkToFault
Compare
Error
ptr
popHead
EvalSymlinks
InUseBytes
initMetrics$30
ReadFrom
CompareAndSwap
rightShift
mapassign0
makeStatDepSet
libc_listen_trampoline
loadTzinfoFromDirOrZip
Compare
decref
slicerunetostring
ChanDir
r1
blockevent
extendSlice
Stat
Stat
runqempty
Swapper$9
getnum
preprintpanics$1
Set
Name
Seek
forEachG
setEventErr
DecodeLastRune
StoreReluintptr
StartTrace
assignTo
Lookup
ExportedMethods
noscan
qone
libc_seteuid_trampoline
Title$1
reflect_makemap
ReadFile
Kind
pthread_create
parkunlock_c
subMono
dumptype
Type
pageTraceAlloc
grow
genericWriteTo
Len
Swap
int32Hash
Errorf
ReadAt
tail
Sort
sigInstallGoHandler
mutexevent
fixCount
NumCPU
genericReadFrom
SlicePtrFromStrings
IndexRabinKarp
resetForSleep
reflectlite_ifaceE2I
NumIn
CompareAndSwapNoWB[runtime._defer]
SysUsage
IsExported
Elem
exited
readgstatus
findExecutable
Close
notetsleep
QuoteRuneToASCII
libc_getpwuid_r_trampoline
contextName
stkbucket
Since
sigfwdgo
string
badsystemstack
hasOverflow
flush
heapObjectsCanMove
Stop
memequal_varlen
fileLine
IsZero
Add64
startTheWorldGC
libresolv_res_9_nclose_trampoline
Load
Common
goyield_m
FcntlFlock
write
rt0_go
IsSymbol
userTime
sigdelset
racectxend
open
netpollReadDeadline
ReadTrace
Recv
kind
scanChunk
Name
String
setReadDeadline
Equal
UnreadByte
Nano
FuncType
free1
utimensat
absDate
Write
set
IndexByteString
limiting
Mkfifo
Truncate$1
releasep
addScannableStack
b32
debugCallWrap1$1
eventErr
Error
AssignableTo
Size
exit
WalkDir
FieldAlign
IsNil
gcAssistAlloc1
Fchmod
closechan
Sysconf
Open
findLargeN
exitsyscall0
publishInfo
propagateCancel
dequeue
shouldScavenge
FromFS
IfaceIndir
add
tryGrowByReslice
IsZero
cos
CutSuffix
writeRune
isDirectIface
noescape
libc_utimensat_trampoline
Count
SyscallConn
signalDuringFork
gcWriteBarrier4
InterfaceType
Err
Kind
Type
LastIndexByte
gcTestPointerClass
cancel$1
Assign
funpack64
cancel
syscall6
freeSomeWbufs
ro
MapRange
IsSorted
SetComplex
UTC
badmorestackg0$1
Prefetch
ignoringEINTRIO
SetKevent
initMetrics$46
Unlinkat
setThreadCPUProfilerHz
Link
fmtC
getPinnerBits
CanUint
chanrecv
mustBeAssignable
isUnusedUserArenaChunk
findRunnable
init
satan
sysUsed
gcDrain
libc_chmod_trampoline
runtime_AfterFork
Getgrouplist
Common
nobarrierWakeTime
libc_recvmsg_trampoline
alginit
panicSliceBU
makemap_small
Common
setRange
init
isLetter
libc_mprotect_trampoline
parseTimeZone
alloc
archCbrt
notewakeup
cgoSigtramp
removefinalizer
mustBeAssignable
insert
archMin
intFromReg
fmtQc
signal_enable
setProcessCPUProfilerTimer
available
panicdivide
reset
ArrayOf
pipe
scanBool
Done
loadTzinfo
Initialize
Write
munmap
wakeupExtra
fnv1
StdinPipe
Wait
exit_trampoline
string
init#2
refillAllocCache
lock
Stop
removeGreaterEqual
Uncommon
inVDSOPage
adjustpanics
TrimSpace
pdqsort_func
MapKeys
libc_munmap_trampoline
Size
setup
StartProcess
SetInt
Store
String
RuntimeError
dumpgstatus
queue
Type
initMetrics$26
readdir
Interface
sigaddset
getStackMap
gcMarkRootPrepare$1
qr
watchCtx
nextSeq
ifaceIndir
getField
emit$1
fmul32
DataChecked
ProcStart
closeDescriptors
NsecToTimeval
typePointersOf
In
Unwrap
isZero
typePointersOfUnchecked
set
String
init
IsGraphic
netpollgoready
read
legacy_fastrand64
Error
InterfaceType
runtime_pollReset
evacuate_faststr
SetLen
GcSlice
load
siftupTimer
Listen
pluginftabverify
Kind
sockaddr
canWriteRecord
breakPatterns_func
markrootFreeGStacks
memequal16
archExpm1
libc_select_trampoline
Chdir
adjustSignalStack
WriteString
And
stringData
oldbucketmask
traceAdvance
appendIntStr
Runes
Delete
readUint16LEAt
mapiternext
init
Loadint64
RotateLeft
fmtPointer
fint32to32
incref
Store
Uncommon
SetFinalizer
scavenge
gosched_m
itabAdd
haveIdenticalUnderlyingType
signalWaitUntilIdle
Pointers
gostringnocopy
getMIDR
nanotime
Next
Data
slice
assertRankHeld
syscall_runtimeSetenv
Atanh
hypot
Getsid
popTail
OnesCount16
chanrecv2
WriteMsg
Syscall
environ
panicunsafeslicelen1
Pid
schedule
Join
Mlockall
String
nilCompare
GetsockoptInt
setReadDeadline
ExportedMethods
Less
Field
newUnixDirent
Min
tzsetOffset
FieldAlign
chansend
Chdir
gcWriteBarrier3
badDefer
memhash64Fallback
openFdAt
close
libc_getrlimit_trampoline
runExitHooks$1
doinit
Close
fpTracebackPCs
log10
archTrunc
Mlock
ifaceHash
cgoCheckArg
Readdirnames
HasName
atomicwb
procUnpin
chmod$1
Lock
Len
Close
Setuid
syscall_syscall6
syscall_runtime_envs
Bytes
validSIGPROF
IndexByte
setStatusTraced
systemstack_switch
bitp
Load[runtime.g]
gcBgMarkWorker$2
NumOut
Before
initSecureMode
Align
CommandContext
readdir_r
cvtFloatInt
explode
close
Revoke
exitsyscallfast_reacquired$1
typedslicecopy
minit
r24
inRange
InterfaceType
textOff
init
init$1
libc_setlogin_trampoline
Key
Name
quotedString
heapSortOrdered
StoreUint64
AfterFunc$1
Load[func(string, string)]
Seek
assignTo
Control
printFuncName
append
RouteRIB
cstring
Writev
cacheSpan
unixSec
Goexit
ReadRune
injectglist$1
Setrlimit
ParseRoutingMessage
nilfunc
deepValueEqual
RawWrite
Clearenv
LookupEnv
chanclose
Len16
saveblockevent
contains
bootstrapRand
usleep_trampoline
Title$1
StructType
UnlockOSThread
ptr
BpfJump
lstatNolog$1
FMA
Addr
Pointers
String
checkmcount
dumpms
totalMutexWaitTimeNanos
Insert
traceAdvance$3
debugCallCheck
SetFinalizer$2
Tag
tanh
notifyListNotifyOne
IsDirectIface
bulkBarrierBitmap
deferrangefunc
sweepone
Reverse16
Join
printScavTrace
racefingo
Perm
ryuFtoaFixed32
libc_geteuid_trampoline
syscall6X
Error
archMod
baseError
mapaccess1
gcount
writeCloseError
readyNextGen
Set
closefd
flush
syscall_syscall6X
chmod
HasName
String
init
mallocgc
call67108864
Fd
LastIndexRabinKarp[[]byte]
fint64to64
syscall_Getpagesize
Microseconds
Dump
isShrinkStackSafe
PkgPath
Deadline
pcdatavalue2
stdFracSecond
main$2
Pointers
Sub
typeOff
chansend
pushBack
runtime_pollClose
BpfStats
Clone
nilinterhash
unsafestring
Common
isMarked
fillstack
initMetrics
removeLast
IsDirectIface
DeepEqual
LoadAcquintptr
GcSlice
RUnlock
RotateLeft64
MultiWriter
canpanic
init
Syscall9
setPinned
Reverse
mustBeAssignableSlow
reset
mustBeExported
assignTo
readUnaligned64
findObject
fatal$1
Embedded
resolveReflectText
update
big8
maxSearchAddr
isInlined
minitSignalStack
Replace
Value
fatalthrow$1
Storeint64
pushCall
Add
Callers
makeheapobjbv
StoreRelease
compute
bytep
J0
printanycustomtype
switchToCrashStack0
Uncommon
CoreDump
appendStrictRFC3339
crash
Eaccess
cvtBytesString
oneNewExtraM
setsigsegv
initMetrics$5
checknonempty
Elem
FieldAlign
is
Size
throw
syscall9
casgcopystack
prepare
allocMSpanLocked
Split
sync_runtime_registerPoolCleanup
reflectcallmove
os_beforeExit
propagateCancel$1
forEachP$1
call1048576
UTC
Align
notetsleep_internal
panicmakeslicelen
SetIterValue
init#1
debugCallWrap2$1
runtime_procUnpin
isNaN
CanInterface
sigignore
Contains
ContainsFunc
Type
Load8
freeSpecial
SysctlUint32
countAlloc
mcall
runtimer
zero
ToTitleSpecial
Search
stackcacherefill
isDigit[string]
pthread_cond_init_trampoline
PointerTo
initHeapBits
cgoCheckPtrWrite
empty
dumpmemrange
wrapSyscallError
InterfaceType
CanComplex
decPinCounter
heapBitsInSpan
runtime_SemacquireRWMutexR
ldexp
VisibleFields
libc_socketpair_trampoline
libc_sync_trampoline
HasSuffix
Len64
spanOfHeap
nonzero
moveMakeFuncArgPtrs
Setsid
badmcall
sigpipe
WriteString
ForkExec
Stat
getPinnerBits
printfloat
getEsc
free
IntRegArgAddr
SetBpfBuflen
Append
Environ
ISOWeek
newTraceMapNode
clearpools
Asinh
cgocallbackg
newPinnerBits
Error
close
Float
entry
findRunnableGCWorker$1
ToUpper
Getwd
printiface
nameOff
size
ofObject
freedeferfn
panicSlice3Acap
finishInternal
fcntl
cvtRunesString
kevent
badmcall2
Read
SetMapIndex
pread
Expm1
IncNonDefault$bound
mapassign
Setgroups
timeHistogramMetricsBuckets
CompareAndSwap[func()]
minitSignals
exportedMethods
Signaled
SplitAfter
Clone
advance
CanInterface
wbBufFlush
Yn
Swapper$7
kill
removeAllFrom$2
IfaceIndir
allocBitsForIndex
sysReserveAligned
TrailingZeros16
initMetrics$45
IsDir
NumField
bind
writeLock
Name
pack
initMetrics$51
goPanicSlice3Alen
unsetenv_c
alloc
runtime_procPin
debugCallWrap
Fsync
GoCreate
ReadFrom
gcBgMarkWorker
Strings
reflect_typedarrayclear
FuncType
nsec
Stat
typedmemmove
convertErr
debugCallWrap1
computeRZlog
Inf
Chown
IsDirectIface
Ext
libc_mlockall_trampoline
UnixRights
goexit
Seconds
pointer
trimLeftByte
HasName
checkptrArithmetic
fatalpanic$2
Location
copystack
atan2
mapassign
switchToCrashStack
proc_regionfilename
reflect_makechan
wait
StopSignal
ptrTo
ParseSocketControlMessage
panicwrap
getcallerpc
ValidString
ParseDirent
CommonSize
fmax64
newRawConn
libc_rename_trampoline
net_newUnixFile
send
Pin$1
checkdead$1
sigsend
CallersFrames
NewBuffer
funpack32
nextDefer
Log1p
pack
Readdir
init$2
Load[func()]
setBlock64
randn
IsDir
appendGCProg
StoreUnmark
dumpmemprof_callback
readGOGC
traceback
pthread_attr_setdetachstate_trampoline
runqputbatch$1
nextFast
ToLower
okVerb
libc_getpwnam_r_trampoline
Itoa
Valid
typeBitsBulkBarrier
popHead
Readdirnames
mapaccess2_fast64
procPin
gcWriteBarrier1
syscall_runtime_AfterForkInChild
String
TrailingZeros64
reflectlite_maplen
ro
ReadAt
pcdatavalue
QuotedPrefix
Fchdir
reflect_mapclear
takeAll
SearchStrings
ContainsFunc
Stack
start
find
msanmalloc
dumpparams
stringtoslicebyte
buildOnce
SetLen
SystemTime
InterfaceType
CutPrefix
String
LoadAcq
lz
Unmarshal
Seek
setMarked
absWeekday
Truncate
IndexByte
SetWriteDeadline
contains
SwapPointer
Replace
valueInterface
goargs
Err
Store8
allocmcache
Stat
growWork
CanSet
grow
qzero
call134217728
modTimer
expiredWriteDeadline
mapdelete_fast64
StdoutPipe
WriteTo
Load
r10
processOptions
poll_runtime_pollOpen
ChanDir
allocRange
munmap
fillFileStatFromSys
newarray
addChecked
fcntlPtr
Swap
GcSlice
stable_func
empty
Statfs
overLoadFactor
Less
spanHasSpecials
CompareAndSwap[internal/godebug.value]
addObject
Create
next
Bswap64
Year
archFloat32FromReg
runtime_LoadAcquintptr
FormatDirEntry
stringDataOnStack
pad
inUserArenaChunk
heapBitsSetType
String
init$1
allocUserArenaChunk
blockUntilEmptyFinalizerQueue
Second
CallSlice
divRoundUp
gcPaceScavenger
gcAssistAlloc
timeSleep
tryAllocMSpan
gcResetMarkState$1
Pointers
Sub
TrimLeft
mapaccess1_fast64
ExitStatus
Err
systemstack
less
IsRegular
float64HistOrInit
varintAt
exitsyscall$2
numMethod
appendFormatRFC3339
alloc
getPtr
Exp2
appendInt
Done
Readdirnames
panicfloat
libc_mmap_trampoline
Compare
memhash16
goroutineProfileWithLabelsSync$4$1
Mkdir$1
FuncType
pop
pipe_trampoline
reset
isPowerOfTwo
Signal
ResNsearch
Nanoseconds
UnixMicro
cas
New
abs
argv_index
MemProfile
reflect_gcbits
Deadline
newPinnerBits
tag
libc_setsockopt_trampoline
HasPrefix
Start$2
scavengeOne
adjustsudogs
FullRuneInString
OverflowUint
libc_readdir_r_trampoline
nextFast
Close
heapBitsSmallForAddr
UserTime
ShouldEnable
StructOf$1
Storeint32
Sub
freeAll
Read
acquirem
Loaduint
parsegodebug
initMetrics$27
gcWriteBarrier8
Swap
sendfile
heapSetType$1
MulUintptr
kind
Log
Load
tracebackPCs
tracefree$1
Trunc
Setlogin
Breakpoint
Size
inPersistentAlloc
tagCount
Name
nameOff
isNegInt
TrySend
MapType
sysUsage
Err
typePointersOfUnchecked
libc_fsync_trampoline
strequal
decoderune
doRecordGoroutineProfile$1
slicebytetostringtmp
recv
IsSorted[[]float64 float64]
notifyListNotifyAll
badreflectcall
medianCmpFunc
Rename
runlock
intToReg
corostart
printstring
newFile
roundupsize
UnsafeAddr
r9
printsp
convT
sortkey
WriteString
_GC
Align
Chmod
findSucc
entersyscallblock
prepareWrite
Getenv
CompareAndSwapNoWB
callReflect
Date
os_runtime_args
initMetrics$55
GoString
SetComplex
IncNonDefault
netpollopen
Executable
Search
WriteTo
allocmcache$1
errnoErr
mapassign_faststr
unpin
CompareAndSwap
isLeap
traceFrequency$1
ReadRune
Name
panicmem
fint32to64
reflectlite_chanlen
gcWriteBarrier6
heapBitsSmallForAddr
markBitsForBase
read
Read
Write
ifaceE2I
Setenv
Sscanln
String
isSecureMode
shouldPushSigpanic
Fstatfs
Read
Align
init
mono
pinnerBitSize
casGToWaiting
statNolog
typedmemmove
deltimer
fint64to32
fmax[float32]
GoSysCall
sysGrow$3
ValidRune
commonPrefixLenIgnoreCase
tzset
fatal
SearchStrings$1
new
MethodByName
Slice
scanUint
ContainsFunc
panicunsafeslicenilptr1
userArenaChunkReserveBytes
UnsafeAddr
traceReadCPU
Add
dieFromSignal
keys
MarshalText
Stat
HasSuffix
ReadAt
traceReader
fdiv64
Sort
runtime_notifyListNotifyAll
setDone
acos
appendQuotedRuneWith
WriteTo
putBatch
consume
Sqrt
racegoend
absClock
compute$1
Swap
Getwd
Rem
deferprocStack
Truncate
StructType
Len
NaN
Name
trace_userRegion
executable
RuntimeError
mod
exportedMethods
ReadDir$1
IfaceIndir
osRelax
Store
memequal
syscall_syscallPtr
wirep$1
gcPaceSweeper
Seek
init
Getuid
netpollinited
newproc$1
newProfBuf
ArrayType
noEscapePtr
Grow
Kind
errnoErr
CombinedOutput
sockaddr
dodeltimer0
init
lockInit
storeRcvr
Unmount
SetBpfTimeout
notEOF
libc_getaddrinfo_trampoline
ReadDir
runtimeStructField
ensureSwept
schedtrace
preemptM
putPtr
trimLeftUnicode
Scanln
osinit_hack
duffcopy
testSPWrite
getisar0
uncommon
IsNil
runtime_notifyListNotifyOne
compute$bound
setWriteDeadline
Width
Sort
Lchown
CompareAndSwap
cvtDirect
Swap[sync.readOnly]
raceproccreate
packEface
fixLongPath
main
bulkBarrierPreWrite
GCDone
gcStart$3
fmtBytes
mallocinit
heapRetained
Error
Value
uncacheSpan
gfpurge
runtime_registerPoolCleanup
gcenable
pdqsortCmpFunc
ResNinit
Settimeofday
Uncommon
cmsgAlignOf
libc_readlink_trampoline
Less
LoadAndDelete
ptr
writev
locabs
Info
Less
TrapCause
Sort
ToSlash
runtime_goroutineProfileWithLabels
mcommoninit
checkASM
sysctlEnabled
Timeout
kqueue
testAtomic64
trimRightUnicode
SetBytes
stopm
add$bound
CompareAndSwap
lessEqual
newosproc$1
entersyscallblock_handoff
newEntry
IfaceIndir
registerLoadFromEmbeddedTZData
ExitStatus
userArenaNextFree
dumpTypePointers
Parse
dumpmemprof
sysHugePageCollapseOS
traceAdvance$4
parentCancelCtx
UnreadRune
GoUnpark
NopCloser
Less
Cosh
Getgroups
as
Log10
fcmp64
reparsedebugvars
Base
clobberfree
sysAlloc
setPinnerBits
Mul64
GobDecode
reentersyscall
intsAreSortedImpl
Error
lenNonSlice
typeOff
Fchown
delete
readFrom
GobEncode
toRType
ChanOf
runtime_SemacquireRWMutex
argv
Microseconds
GoSched
Fscanf
goroutineReady
Pid
TrailingZeros64
isEmpty
r13
readlink
CanConvert
recv
Mul
sysReserve
runqsteal
siglr
FieldsFunc
WriteString
SysUsage
locabs
WriteTo
resetCapacity
setsigstack
pinnerGetPinCounter
UnixNano
ToUpper$bound
_cgo_panic_internal
getcallersp
goPanicIndex
findSmallN
ptrbit
SwapUint32
Pointers
Ftruncate
Zone
Cutover
IsVariadic
ToTitleSpecial
extractBits
parseSignedOffset
readGOMEMLIMIT
Max
fatal
implements
freeSomeWbufs$1
mstart0
mstart1
preemptall
Sort
Pointers
bytesSlow
NewTimer
write
doPrint
Store
setGNoWB
init
init$2
libc_unmount_trampoline
goPanicSlice3C
partitionEqualCmpFunc
asin
acquireForkLock
bytes
pdqsortOrdered
Method
TryLock
mapaccess1_faststr
FindProcess
AfterFunc
f64toint64
Load
getsig
alloc
wait
errNoDeadline
allgadd
printhex
valid
TrimRightFunc
isMarked
closeRead
writeCloseError
tryRecordGoroutineProfile
medianAdjacent_func
SetsockoptInt
Sys
when
pthread_setspecific_trampoline
Equal
trygetfull
rangeError
initMetrics$50
Stat
fault
fatalpanic
IsOneOf
specialFindSplicePoint
printFileLine
pack
init#5
Mkdir
Swap
write
r3
adjustframe
gcMarkTermination
unsafestring64
gcMarkTermination$2
init
stable
memhash128
MapType
call256
close
MethodByName
newInlineUnwinder
storePointer
ZoneBounds
Umask
getBase
sigprofNonGo
gcMarkTermination$1
restoreGsignalStack
StructType
unpackEface
addTypeBits
intsImpl
RecvfromInet6
UnmarshalText
Stat
dumpgoroutine
order2CmpFunc
removeAllFrom$1
pack
Len
growWork_fast32
Deadline
isAsyncSafePoint
UnixMicro
itoaDiv
byte
trimLeftASCII
unlock
schedEnableUser
asanRead
Second
Loadint32
arenaIndex
set_r28
Float64frombits
Undelete
sigaction
LoadInt32
GCStart
specialChannelAssignability
TrimLeftFunc
newParseError
LeadingZeros32
AppendBool
TrimPrefix
Load
unpack
funcLayout
utimes
pcdatastart
Swapper$8
TrimSuffix
eofError
ByteSliceFromString
Getpagesize
bytesHash
Less
libc_dup2_trampoline
Swap
Map
sync_atomic_runtime_procUnpin
gcSlice
FieldAlign
frexp
mustBeExportedSlow
checkptrBase
gcSweep
registerMetric
NewName
Float64sAreSorted
writeSync
NumMethod
ifaceE2I
BpfTimeout
TrimRight
initPageTrace
globrunqputhead
save_g
runtime_doSpin
initMetrics$32
printeface
mustBeAssignable
setWriteDeadline
funcdata
sendto
rawSyscall6
Div64
typ
trimRightByte
Get
stringNonString
String
IsDir
expmulti
writeUserArenaHeapBits
SwapUint64
Errors
ReadAll
valid
malg
forEachPInternal
peek
g0_pthread_setspecific
signal_disable
IsTitle
ReadFile
exitsyscall
buildIndex
Kind
reset
ensure
In
add
printArgs$1
register$bound
Int
swapRangeOrdered
GoSysExit
strhash
initAt
alignUp
libc_access_trampoline
IsRegular
SetWriteDeadline
poolCleanup
CompareAndSwap[sync.readOnly]
writeTo
Nextafter
libc_getsockopt_trampoline
GoEnd
tryExpungeLocked
hexDigit
selectgo$3
haveIdenticalUnderlyingType
callMethod
syscall_rawSyscall
WriteTo
Bytes
Swap
Replace
ReadAt
objBase
OutSlice
Glob
Mul64
preparePanic
unsafe_NewArray
PrintMarker
getSlow
NeedKeyUpdate
reflect_unsafe_NewArray
Read
OnceFunc
Store[runtime.profBuf]
countrunes
archAcosh
nameFor
reverseRange
appendNano
Sleep
dumpgs$1
NewSyscallError
Nanosecond
Name
Tanh
Ext
GCMarkAssistStart
Align
NumMethod
morestackc
NumCgoCall
WriteFile
destroy$1
BytePtrFromString
write
reflect_rselect
String
sockaddr
getgroups
refill
varint
blocksampled
argMapInternal
enableChunkHugePages
RuneStart
libc_fchmod_trampoline
mdump
initMetrics$56
WriteAt
FuncType
base
pollWork
Getpgid
Fields
FieldByIndex
pushHead
ptr
materializeGCProg
tryGet
mapiterinit
growslice
ReadFrom
Uint
Swapper$3
abigen_runtime_cmpstring
dwrite
timediv
next
addIdleMarkWorker
Chmod
begin
pthread_attr_setdetachstate
addSec
takeFromBack
Cap
String
StoreNoWB
goschedIfBusy
goPanicSlice3Acap
Seconds
SplitN
freezetheworld
align
typeptrdata
dwritebyte
StructType
mPark
nameOffFor
setsockopt
Getpeername
trimLeftUnicode
Swap
verifyNotInHeapPtr
readyWithTime
libc_close_trampoline
isPowerOfTwo
readRandom
fsub64
QuoteRune
Weekday
setNonEmpty
adjustpointer
libc_link_trampoline
call536870912
panicrangeexit
semasleep
Hour
mustBe
SplitN
goroutineProfileWithLabelsSync$4
Lookup
unpin
StoreNoWB[runtime._defer]
step
r21
mapKeyError2
enableWER
contains
syscall_syscall6
InterfaceType
Reset
isExportedRuntime
stacklog2
kill
Len
mustBeExported
makeFloat
Success
init#7
libc_fcntl_trampoline
typePointersOfType
initMetrics$9
funcline1
findAddrGreaterEqual
dedupEnvCase
fneg64
String
seek
startTheWorld$1
call2048
InterfaceType
libc_unlinkat_trampoline
genSplit
Fd
compare
r19
syscall_x509
Err
start
Location
CompareAndSwap
_System
pow
mlock
resolveNameOff
MakeNoZero
errDeadlineExceeded
ReverseBytes32
getPageSize
SetMutexProfileFraction
badsignal
Read
exportedMethods
usleep_no_g
Stack
sigprofNonGoPC
Value
Read
init
increfAndClose
syscall_hasWaitingReaders
sub
printOneCgoTraceback
underlyingErrorIs
IsSorted[[]int int]
libc_chroot_trampoline
mustBeExportedSlow
init
Append
copyValues
ReadFromInet4
clear
CompareFunc
badPointer
partialUnswept
Unix
IndexByte
Anduintptr
Key
entersyscall_sysmon
adjustFileLimit
FuncType
Write
Kind
Load
canPreemptM
initMetrics$35
f32toint32
Reset
archLdexp
SetLen
GOROOT
Chown
ticksPerSecond
getCachedDlogger
MaxFunc
popTail
String
ContainsAny
convertString
addNonGo
g0_pthread_key_create
Uncommon
casgstatus$1
writeErrStr
STWDone
mapclone2
Is
IsDir
Join
Adjtime
flush
writeVarint
parseNanoseconds
call512
Run
gcd
runtime_procUnpin
mapaccess2_fast32
Readdirnames
lastIndexFunc
fmtFloat
TrimRight
interrupt
Getdirentries
LastIndexAny
setMemoryLimit
diff
chanrecv$1
rotateLeft
HasName
CompareAndSwap
sizeclass
Store
signalM
cleanGlobPath
errorString
initMetrics$39
wbZero
Sync
l2
gcMarkTermination$4$1
Sync
TrimFunc
IndirectKey
StructType
preemptone
Load
readFloat
typesByString
syscall_syscallPtr
Grantpt
runtime_AfterForkInChild
traceAdvance$2
partialInsertionSortCmpFunc
Split
itoa
split
init
Store[internal/godebug.value]
Kill
mapassign_faststr
grow
setDeadline
Exited
Unwrap
racewriterangepc
goroutineProfileWithLabelsConcurrent$2
CompareAndSwapInt32
Sub64
Swapper$6
allocNeedsZero
goroutineProfileWithLabels
Add
Swapper$5
divideByElemSize
LeadingZeros64
lower
CanBackquote
Recvfrom
nextFrame
Elem
runtime_FrameStartLine
AddUint32
ModTime
FieldByNameFunc
typ
sendtoInet4
Chown
add
r25
modulesinit
has
ExportedMethods
WriteToInet6
Error
CompareAndSwap
alloc
Y1
init
unpin
MapType
Fcntl
reflect_resolveTypeOff
setPinned$1
NewSectionReader
isDone
indexBytePortable
Error
semacreate
traceCPUSample
racereadpc
Clean
sockaddr
objIndex
initMetrics$14
Month
isFree
Cbrt
initMetrics$40
noescape
Default
convT64
call268435456
fge32
metricsUnlock
sync_runtime_canSpin
format
String
freeManual
getpeername
call32768
wbMove
rlock
runqput
init
Kind
Set
gcWriteBarrier2
subtract1
handleMethods
DeleteFunc
init#3
IncNonDefault
atof64
Swapper$1
readGCStats
byte
reflect_mapdelete_faststr
SetsockoptInet4Addr
init
libc_getdtablesize_trampoline
Printf
runtime_debug_WriteHeapDump$1
casGToPreemptScan
GetsockoptICMPv6Filter
ToTitle
QuoteToASCII
send
siftDown_func
RotateLeft32
scanComplex
initMetrics$7
Swap
NumOut
In
Read
Stack$1
systemTime
MarshalBinary
NumMethod
libc_bind_trampoline
OpenFile
getsysctlbyname
gcTestIsReachable
gogo
archCeil
StructType
FuncType
traceThreadDestroy
Xchg64
libc_fdopendir_trampoline
expiredReadDeadline
Align
WriteMsgInet6
withCancel
pcvalueCacheKey
casGFromPreempted
tracealloc$1
parseNetworkLayerAddr
walkDir
BinarySearchFunc
partialInsertionSortOrdered
Error
Flock
reflect_typehash
l1
startCycle
GCSweepDone
Abs
dumpbv
ExportedMethods
cgocall
Search
endCycle
MakeFunc
fandbits
Copy
FileLine
dump
ArrayType
funcMaxSPDelta
nametomib
libc_fork_trampoline
writev
initOpenCodedDefers
unlockSlow
isFinite
rand32
GcSlice
funcName
update
partitionCmpFunc
libresolv_res_9_ninit_trampoline
Chdir
doPrintln
notifyListAdd
write
Weekday
empty
stk
Load[sync.readOnly]
Name
Freeaddrinfo
HasName
Common
pthread_cond_timedwait_relative_np_trampoline
_LostSIGPROFDuringAtomic64
done
Fstat$1
UnixNano
startm
Load[func(string) func()]
AddInt64
allocm$1
nextFree
NumOut
pone
copyVal
printuintptr
mullu
MultiReader
nextFreeIndex
reflect_mapaccess_faststr
medianAdjacentCmpFunc
insertionSortCmpFunc
isUnusedUserArenaChunk
Equal
ToUpper
stop
IsValid
Cas
set
freeSpan$1
Casp1
fnvString
AppendMarker
moduledataverify
lockSlow
GOMAXPROCS
Done
printcreatedby1
concatstrings
Ftruncate$1
Comparable
Pointers
panicSliceB
Store
osinit
getclosureptr
CompareAndSwap
deferprocat
Read
stackmapdata
Load[syscall.Rlimit]
allocSpan$1
gcControllerCommit
eiselLemire32
AppendQuote
resolveTypeOff
Exp
libc_setprivexec_trampoline
GetsockoptIPv6Mreq
WriteString
malg$1
is32
libc_setregid_trampoline
recordspan
typelinksinit
printArgs
insertionSort_func
lookupFirstZone
call33554432
IsSortedFunc
BinarySearch
objIndex
clearDeletedTimers
String
Setprivexec
initMetrics$12
WithTimeout
HeapAlloc
siftdownTimer
typePointersOf
Done
countAlloc
Implements
Dim
reflectlite_unsafe_New
Milliseconds
empty
readCloseError
Cap
stackalloc
pkgPath
TFlagOff
Name
Align
gcFlushBgCredit
netpollAnyWaiters
cvtT2I
getRune
init
Done
ProcStop
WriteString
WriteString
Gosched
makeInt
LoadLocation$1
incidlelocked
r0
raceacquireg
floatBits
ToTitle
cutspace
panicmakeslicecap
tracebackHexdump$1
Indirect
erfc
FormatInt
Size
chmod
Common
gfput
Is
Len
printAncestorTraceback
mpreinit
ReadAtLeast
IfaceIndir
isPinned
Lookup
archCos
runtime_Semacquire
Store[string]
IsNumber
sys
consume
copyenv
libc_getsockname_trampoline
end
LookPath
unixIsLocal
Write
munmap_trampoline
SetsockoptString
parsenum
racereleasemergeg
create
dequeue
semacquire1
newWakeableSleep
Temporary
Len
SplitAfterN
doScan
newName
parseRFC3339[string]
fmtSx
mapaccess1_fast32
SetBlockProfileRate
Align
saveg
newm
Unwrap
String
indexLocal
Reverse64
addGlobals
Clearenv
interfaceEqual
median_func
HashStrRev[string]
reflect_mapiterkey
AddInt32
ChanDir
Loadp
findScavengeCandidate
retryOnEAGAIN
Modf
getsockopt
fmtSbx
panicSlice3AcapU
Get
ReadFile
ro
Slice
IsDir
Type
libc_mknod_trampoline
wbBufFlush$1
gfget
Mkdir
varintReserve
Wait
OverflowUint
Error
round2
Deadline
resolveReflectType
MapIndex
ToTitle
noldbuckets
writeHeapBitsForAddr
userTime
Len
newSpecialsIter
AppendFormat
secureEnv
WriteString
ReadByte
Logger
sigdisable
slicebytetostring
SetsockoptLinger
read
quoteRuneWith
String
initMetrics$38
typeSlow
refill$1
r18
CompareAndSwapUint64
checkValid
packEface
ReverseBytes64
WithDeadlineCause$2
pthread_cond_wait_trampoline
cvtUint
Field
Reverse
IfaceIndir
IndexFunc
IsUpper
Value
accumulate
typedmemclrpartial
BlockProfile
_ExternalCode
Index
goPanicSliceAlenU
MapType
chunkIndex
update
ContainsRune
Glob
gopreempt_m
Gomaxprocs
syscallMode
Dup
appendStrictRFC3339$1
Replace
setAll
unknownType
IsMark
Hours
success
Bytes
lookupName
readvarintUnsafe
sigenable
StorePointer
newScanState
GobEncode
unpackScavChunkData
special
setTraceback
dodeltimer
AppendInt
Getpgrp
goexit0
IsPermission
Exited
rawSyscall
scanBasePrefix
varint
HasName
releaseForkLock
Success
findsghi
getEsc
unsafe_New
Format
push
Load
goPanicSlice3AcapU
IsGraphic
libc_fchflags_trampoline
getStringWriter
wrapErr
Done
fullName
Or8
Enable
initMetrics$28
markBitsForIndex
Swap[internal/godebug.value]
SystemTime
Sync
fatalthrow
alignDown
countSub
unsafe_New
Hostname
layout
Casuintptr
init
gcAssistAlloc$1
cvtInt
openat
Comparable
add
errorHandler
RecvfromInet4
startPCForTrace
WithTimeoutCause
readdir
end
Count
SetBpfImmediate
libc_setpriority_trampoline
addr
IsNaN
String
Max
Swapper$7
Do
Getsockname
Sendto
panicSliceAlen
ExportedMethods
madvise_trampoline
Sin
f32toint64
Value
stopTheWorld
init#1
preprintpanics
Getgrnam
Copysign
set
Marshal
runtime_notifyListAdd
TrailingZeros8
call16384
makeComplex
ToUpper
add
empty
Glob
Chmod
fnvUint64
WithDeadlineCause
chmod
racereleaseacquire
Utimes
Unsetenv
YearDay
pages64
storePoolChainElt
SearchFloat64s
fmax32
poll_runtime_pollSetDeadline
Timeout
order2
lock$1
NumMethod
FuncType
runes
mustBeExported
normalize
Name
Kind
load
addfinalizer
ValueOf
convertOp
awaitGoroutines$1
setReadDeadline
writer
find$1
isSweepDone
panicUnaligned
keys
UserCacheDir
scanConservative$1
maplen
ReplaceAll
IsBlank
init$4
memclrNoHeapPointersChunked
makeArg
nextSeq
typesMustMatch
tzsetNum
unsafeslice64
spanOf
CommandContext$1
missingArg
incPinCounter
overlaps
init#6
Add64
stringFor
SplitAfter
noSignalStack
Sprintln
cgoUse
loadLocation
typ
CloseWithError
SetsockoptIPv6Mreq
WriteTo
Store
asyncPreempt2
ExportedMethods
lfnodeValidate
libc_msync_trampoline
In
CanComplex
mcount
pointer
setDeadline
init
growWork_faststr
buildOnce$bound
readSlice
DecodeLastRuneInString
ReverseBytes
RemoveAll
specialFindSplicePoint
raceacquire
canWriteTwoRecords
index
parse
resolveNameOff
IsSpace
NewBufferString
gostartcall
libc_getfsstat_trampoline
Sub
fcntl_trampoline
libc_umask_trampoline
concatstring2
mapclear$1
addmoduledata
remainder
gostring
Value
gcResetMarkState
CompareAndSwap
duration
index
Replace
TryRLock
wirep$2
Connect
FuncType
FieldAlign
Store
makemap
gcStart
libc_mkdir_trampoline
mapdelete
Close
statusWasTraced
seek
append
stack
osStackFree
Swapper$9
NewTicker
dumpotherroot
gcMarkDone$3
Xchguintptr
init
efaceHash
seek
writeUserArenaHeapBits
allocSpan
fpack32
Unwrap
RoundToEven
gcWaitOnMark
sync_atomic_SwapPointer
numMethod
pointer
Symlink
racereleasemerge
Cap
to
goroutineProfileWithLabelsSync$3
WithDeadlineCause$3
LoadPointer
printAncestorTracebackFuncInfo
appendEscapedRune
makeASCIISet
join
Trim
memequal64
accept
walk
c128hash
setcpuprofilerate
lookup
arena_newArena
IsNonblock
Acos
Load
cbrt
netpoll
init
libc_openat_trampoline
assertE2I
WaitWrite
SetUint
call4194304
Pointers
empty
push
Getfsstat
compute0
refillAllocCache
mutexContended
Implements
Uint
isSystemGoroutine
buildTypeAssertCache
checkValid
OnceFunc$1
sysctl
Read
gcBgMarkStartWorkers
pop
msanmove
removeChild
semrelease1
Chroot
UnreadRune
position
Sort[[]int int]
parseStrictRFC3339$1
badArgNum
record
Uncommon
Ftruncate
free
Hours
Round
load
needm
pkgpath
CanFloat
pthread_kill
wantAsyncPreempt
startGCTransition
ArrayOf$1
Load
sp
wrapErr
initMetrics$53
cvtStringBytes
tzsetRule
Fchdir
close
Load
Sinh
Method
Reset
unlock2
lessThan
memequal128
discard
atofHex
NewReplacer
copyBuffer
log
atof32
sweep
Getgid
date
pthread_attr_init_trampoline
init
Now
dumpint
Clip
Open
set
Close
call
libc_kevent_trampoline
newIovecWithBase
getMCache
Swapper
mmap_trampoline
convErr
String
runtime_notifyListCheck
Index
setMarkedNonAtomic
read
Hash
reflect_mapdelete
MapType
sigprocmask
makeBytes
pointer
libc_writev_trampoline
cloneString
Fd
l1
assertWorldStoppedOrLockHeld
Reset
Write
Available
ReadDir
raise_trampoline
markWorkerStop
mult128bitPow10
TimevalToNsec
modtimer
setMultiPinned
SetReadDeadline
racenotify
Release
Write
reflect_addReflectOff
end
runtime_pollServerInit
ExportedMethods
StructType
signal_ignored
Until
SendFile
Range
CmsgSpace
makeTraceFrame
IfaceIndir
WriteByte
profilealloc
String
String
chanlen
Openat
funcspdelta
setprofilebucket
endsWithDot
Or
OnesCount
childStdout
setFlushed
Swapper$4
float64Inf
prepareRead
readyNextGen
startpanic_m
dumpfinalizer
proc_regionfilename_trampoline
Error
IsZero
dupCloseOnExecOld
Rmdir
init$1
FormatFileInfo
reportZombies
sysMapOS
spanOfUnchecked
WithDeadline
Read
AddUintptr
Delete
nanotime_trampoline
summarize
String
atomicAllG
MakeChan
lookup
resolveNameOff
awaitGoroutines
next
divideByElemSize
cputicks
find
acquire
OnesCount32
tooManyOverflowBuckets
GC
pad
Expand
TODO
execute
procresize
FileInfoToDirEntry
removeAllFrom
FieldByIndex
gcDumpObject
insertionSort
initMetrics$18
MapType
osPreemptExtEnter
chanparkcommit
recvfromInet4
ToValidUTF8
raw
HasNonblockFlag
FixedZone$1
bucketMask
raceinit
WriteByte
SetBpf
mapaccessK
alloc
record
initMetrics$47
pread
Readdir
ParseBool
setitimer_trampoline
Align
mustBeAssignable
closeWrite
inList
Store
Swap
init
chmod
free
set_usec
Socketpair
fpunwindExpand$1
sysReserveOS
Float64s
trimRightASCII
reflect_chansend
IfaceIndir
Size
mapaccess2_faststr
ReadFrom
Seek
ChanDir
init
wakep
coroexit
ReadDir
mReserveID
loadTzinfoFromZip
sync_fatal
randinit
runtime_BeforeExec
syscall_syscall
alloc
evict
elem
HashStr
putExtraM
Readdir
DecodeRuneInString
String
setrlimit
formatDecimal
OneNewExtraM
abs
FormatString
intstring
Compare
lenNonSlice
dopanic_m
Map
sellock
traceClockNow
chanbuf
toRType
push
freemcache
Value
resolveTextOff
callbackUpdateSystemStack
pthread_cond_timedwait_relative_np
heapBitsForAddr
runtime_getProfLabel
Store[sync.readOnly]
pthread_mutex_init_trampoline
libc_undelete_trampoline
schedEnabled
clearSignalHandlers
Write
reflect_chanclose
LastIndex
asmcgocall
mp
putempty
SetPanicOnExit0
Match
allocLarge
ValueOf
init
dumpPtrBitMap
Access
sendmsg
addCovMeta
lfstackUnpack
gcMarkRootCheck$1
WithValue
set
RoundUp
Div
popHead
FuncType
assertLockHeld
unixTime
PrefetchStreamed
iterate_finq
initMetrics$6
Put
debugCallV2
Error
Uncommon
sigpanic
partition
Comparable
UnmarshalJSON
NumField
injectglist
wake
CopyN
unlockSlow
startTimer
Storeuintptr
updateTimerModifiedEarliest
MethodByName
join
atan
TimespecToNsec
scanPercent
panicSlice3B
String
Getrusage
SetPointer
GcSlice
unlockextra
interequal
Signal
HasName
arena_arena_New
readTrace0
userArenaHeapBitsSetSliceType
bytes
debugCallWrap$1
LoadAcquire
Fstat
Acosh
ryuFtoaShortest
ChanDir
memclrNoHeapPointers
Futimes
createOverflow
f64equal
dumpslice
f64to32
init
traceback2$1
Split
coroswitch_m
moduledataverify1
newUserArenaChunk$1
runtime_pollOpen
setenv_c
putCachedDlogger
Less
accumulate
scanobject
Chdir
selectnbrecv
WriteTo
memhashFallback
poll_runtime_isPollServerDescriptor
Align
readvarint
tryChunkOf
signame
Load[runtime.profBuf]
mapinitnoop
netpollblock
Wait
closeWrite
heapGoalInternal
setStickyBit
growslice
blockUntilWaitable
forEachGRace
isExcludingLatin
runtime_debug_freeOSMemory
getcwd
complex128div
mustBeAssignableSlow
Truncate
setMNoWB
mach_vm_region_trampoline
set
kind
writeErr
panicSliceAlenU
racewritepc
FieldByName
pad
Release
statusWasTraced
next
wakeNetPoller
setNewIncNonDefault
init
gcStart$1
Stat
equal
stopTheWorldGC
start
setMaxIdleMarkWorkers
init
Getdtablesize
nextFast
goPanicSliceBU
pwrite
pthread_self_trampoline
ReadMsgInet4
gcMarkDone
errClosing
xatan
Err
Load
ptr
noescape
Getrlimit
unreachableMethod
errPermission
heapSort_func
Clock
Search
Sort
partition_func
countGenericString
max
cgocallbackg1
goroutineheader
panicSliceConvert
retake
decPinCounter
netpollBreak
nextPowerOfTwo
TypeOf
ReadTrace$2
libc_unlockpt_trampoline
Shutdown
computeBounds
Write
pzero
makeGenericReplacer
Abs
typedmemclr
finq_callback
Signal
sysHugePage
sync_nanotime
choosePivotCmpFunc
isInlined
ioctlPtr
read
init
libc_fstat_trampoline
Sysctl
rotate_func
convTstring
Size
LimitReader
writeHeapBitsSmall
sync_atomic_StoreUintptr
readGCStats$1
ChanDir
chmod
Cos
rotate
indexFunc
panicCheck1
setMemoryLimit$1
TempDir
free1
cheaprand64
traceExitingSyscall
trunc
lePutUint64
netpollDeadline
MapType
gcMarkDone$1
Store[func(string) func()]
IfaceIndir
Pointers
NumMethod
newMarkBits
call1024
removeGreaterEqual
GcSlice
freeSpanLocked
libc_accept_trampoline
TypeFor
Len
Convert
ExportedMethods
rootFor
typeOffFor
readLock
inList
mapaccess_faststr
SetsockoptTimeval
Continued
goroutineProfileWithLabelsSync$2
IfaceIndir
libc_shutdown_trampoline
rawstring
formatBits
Match
IfaceIndir
MarshalJSON
netpollWriteDeadline
FuncType
needUpdate
Symlink$1
Len
update$1
difference
GetEntropy
Uncommon
split
modTimer
atomic_casPointer
methodName
BpfBuflen
Lchown$1
Addr
methodValueCallCodePtr
globWithLimit
indexByte
rwunlock
destroy
panicNotMap
sin
sinh
sigtrampgo
fmin
ReadDir
makeslice64
put$1
mProf_Malloc$1
seek
isAbortPC
hashMightPanic
Bits
convertFloat
setDeadline
sqrt
newUserArena
ChanDir
trace_userTaskCreate
advanceEvacuationMark
badunlockosthread
inf2one
skip
archExp2
traceRegisterLabelsAndReasons
call1073741824
queuefinalizer
Floor
recvmsgInet6
free
setMaxStack
Uncommon
closing
showframe
Unsetenv
sync_runtime_SemacquireMutex
ptr
kind
add
isSpace
Lock
Add
writeGoStatus
libc_setuid_trampoline
runtime_AfterExec
Method
sigpipe
selunlock
IsLower
Align
As
stopTimer
arena_arena_Free
setWriteDeadline
isNaN
asanread
decref
typeOff
AppendQuoteRuneToGraphic
gcstopm
symMergeCmpFunc
Clear
call128
writeToWithBuffer
funcline
Casint32
reset
mapassign_fast32
Close
isMutexWait
IsPathSeparator
funcName
noteclear
castogscanstatus
mustBeExported
Seteuid
badcgocallback
f32equal
printcomplex
pkgPath
godebug_registerMetric
markBitsForBase
ready
mmap
closeonexec
Load[any]
reflectlite_typedmemmove
args
Deadline
r20
markroot
ReadFromInet6
park_m
runtime_FrameSymbolName
register
readVarint
toRType
PkgPath
SendmsgN
OnceFunc$2
dumpobj
wrapErr
breakPatternsCmpFunc
archAtan
stopTimer
Signal
pthread_cond_wait
doSlow
freemcache$1
goyield
archAsin
growSlice$1
sigFromUser
Truncate
atof32exact
Link$1
LastIndex
SyscallConn
markBitsForBase
GoPark
sendtoInet6
fmtInteger
traceAdvance$1
deferconvert
dirtyLocked
InterfaceData
ChanDir
libc_chown_trampoline
argNumber
stableCmpFunc
Size
Error
partitionEqual
free
appendRuneNonASCII
ChanDir
dump
newdefer
LoadAcquire
close
FuncPCABIInternal
strmin
poll_runtime_pollWaitCanceled
RuntimeError
init
enqueue
archFloor
lowerASCII
call131072
Read
gcWakeAllAssists
name
And32
minitSignalMask
getncpu
valid
sigNoteWakeup
rUnlockSlow
godebugNotify
Type
Open
Or
memhash64
goroutineProfileWithLabelsConcurrent
Elem
l1
ptrdata
syscall6
IndexRabinKarp[string]
Hypot
panicNotBool
libc_settimeofday_trampoline
FieldAlign
volumeNameLen
typedmemclr
ThreadCreateProfile
Out
archSin
issetugid
syscall_syscall9
ifaceeq
textOff
getempty
freeStackSpans
setg
fstatat
libc_getpgid_trampoline
Len
initMetrics$29
Unquote
cvtIntString
panicshift
HashMightPanic
initMetrics$3
After
Precision
libc_setreuid_trampoline
Error
errInvalid
makeString
ContainsAny
markBitsForIndex
taggedPointerPack
runtime_Semrelease
libc_ptsname_r_trampoline
spanHasNoSpecials
initMetrics$42
netpollinit
libc_mkfifo_trampoline
setoverflow
Read
writeUserArenaHeapBits
unimplemented
Pointer
After
badVerb
goroutineProfileWithLabelsConcurrent$1
Read
Load
Round
archAtan2
CompareAndSwap
doScanf
bgscavenge
RecvmsgInet6
Setenv
msync
grow
mult64bitPow10
AppendQuoteToGraphic
partitionOrdered
recvDirect
Split
Common
concatstring4
Unlockpt
Day
printArgs$2
allocToCache
Dir
Timeout
NumMethod
errNotExist
Zone
readFrom
SyscallConn
writeProcStatus
Common
globrunqputbatch
libc_wait4_trampoline
ContainsRune
ToUpperSpecial
Accept
Kind
netpollblockcommit
Fsync$1
Swap
updateTimerPMask
is16
refreshPinnerBits
Value
MapKeys
modf
syscall_Exit
sync_runtime_procUnpin
typePointersOf
sweepers
casPointer
init
pinnerBitSize
pointer
ExportedMethods
setReadDeadline
freeSpan
pollable
libc_sendto_trampoline
sendmsgNInet4
globWithLimit
fillAligned$1
stringStructOf
signal
ReadMsgInet6
doubleCheckHeapPointers
QuoteRuneToGraphic
cvtUintString
PkgPath
r5
Accept
RoundDown
typeSlow
IndexAny
panicSliceAcap
Deadline
binarySearchTree
newWakeableSleep$1
pread
inheap
lessEqual
genSplit
Swapper$2
Chown$1
return0
init
makeFuncStub
Mul32
scanOne
fmtInteger
overflow
DecodeRune
IsValid
IsDir
shouldScavenge
typeAssert
ToTitle
hasMeta
fillAligned
sigprof
readUnlock
Cas64
init
Bool
LastIndexByte
freedefer
String
startTheWorldWithSema
init
Fscan
SortStableFunc
libc_getgrouplist_trampoline
GetsockoptIPMreq
GetsockoptInet4Addr
runtime_pollWaitCanceled
compute
readdir
max
Ldexp
fdopendir
gcWriteBarrier5
growing
init$2
Write
checkRunqsNoP
missLocked
Or
FieldAlign
Store
send
WriteString
nextPowerOfTwo
Deadline
GCMarkAssistDone
Name
methodValueCall
libc_futimes_trampoline
Flag
test
SetPointer
Read
init
Quote
read
nextFreeIndex
typelinks
initFuncTypes
breakpoint
sysctlbyname_trampoline
Getpwnam
waitCanceled
Format
Slice3
Align
notetsleepg
Swapper$3
selparkcommit
done
mapiterelem
isShellSpecialVar
ZoneBounds
Seek
Implements
ReadRune
incPinCounter
get2
Getaddrinfo
contains
Getgroups
reflect_typedslicecopy
eventErr
ptr
SetInt
traceStartReadCPU$1
isInlined
libc_stat_trampoline
parseStrictRFC3339
CasRel
StoreUintptr
isNaN
ReadDir
syntaxError
Count
goPanicSlice3AlenU
mapclear
SetFloat
SetIterValue
Unlock
runqdrain
sameWord
atoi
sysmon
CanSet
uncommon
overflowFloat32
goexit1
strhashFallback
goPanicSliceAlen
Setpriority
min
unixAbs
internal_cpu_getsysctlbyname
r29
pwrite
dematerializeGCProg
bucketEvacuated
newUserArena$1
runtime_pprof_readProfile
setDeadline
FieldAlign
FuncType
madvise
traceClockUnitsPerSecond
libc_grantpt_trampoline
signalstack
checkfds
init
unquote
BpfInterface
setGsignalStack
GoCreateSyscall
block
Kqueue
Munmap
SplitAfterN
reflect_resolveNameOff
Remove$2
printArgs$3
syscall_runtime_BeforeExec
mayMoreStackPreempt
libpreinit
data
setPanicOnFault
GcSlice
runSafePointFn
r14
doSigPreempt
racerelease
Round
Key
Store
basename
tzsetName
lockOSThread
userTime
dtToType
NumMethod
put
archPow
systemTime
Len
pthread_mutex_lock
tracefpunwindoff
gcStart$2
unpack
Issetugid
fmtBs
SendtoInet6
HasName
init
asmcgocall_no_g
memoryLimitHeapGoal
assertWorldStopped
epipecheck
abigen_runtime_memequal_varlen
consume
Perm
raceprocdestroy
Repeat
catchPanic
sysGrow
pidlegetSpinning
Base
Local
SetCap
init#2
Unlock
Len64
reflectlite_resolveTypeOff
runtime_coverage_getCovCounterList
NewOffsetWriter
escapes
panicunsafeslicenilptr
log2
genericFtoa
Oruintptr
doInit
handoff
Value
sendDirect
runtime_Semrelease
direntIno
evalSymlinks
SetBool
ArrayType
l2
reset
msigrestore
mapassign_fast32ptr
duffzero
WriteOnce
wbBufFlush1
Command
IsSorted[[]string string]
ReadDirent
heapGoal
init
printVal
Size
showfuncinfo
readMetricsLocked
allocm
unpackEface
libc_getgrnam_r_trampoline
findObject
Key
libc_gettimeofday_trampoline
String
traceLockInit
UserTime
morestack
Width
sub
SetDeadline
NumGoroutine
rename$1
Lock
rand
index
mexit
ReadRune
feq64
Close
gwrite
SplitList
Start$1
Pointer
activeModules
shl
Getgid
stealWork
blockableSig
Getppid
initHeapBits
runtime_BeforeFork
Done
CanAddr
checkTimers
Before
libc_symlink_trampoline
swapLocked
markroot$1
formatDigits
buildInterfaceSwitchCache
Temporary
noscan
fatalsignal
forcegchelper
scanRune
findmoduledatap
exitsyscallfast_reacquired
mapdelete
Munlock
ChanDir
startTemplateThread
mapdelete_faststr
summarize
tracegc
addArg
SortFunc
lockRankMayTraceFlush
parseGMT
init
syscall
ParseInLocation
typedslicecopy
Timeout
sysUsedOS
Casint64
memhash32Fallback
Clear
Log2
Seek
dounlockOSThread
gcTestMoveStackOnNextCall
contentEscapes
checkTimeouts
lr
libc_exit_trampoline
BpfStmt
Len8
closeRead
newArenaMayUnlock
raise
Swapper$6
removeIdleMarkWorker
flushmcache
makeHeadTailIndex
CoreDump
memmove
mustBeExported
sigprocmask_trampoline
hashGrow
GoString
Error
findBitRange64
makeMethodValue
libc_statfs_trampoline
initMetrics$20
ParseDuration
arenaBase
Error
Unpin
SetString
chanrecv1
Seek
SetReadDeadline
MapType
r6
libc_ptrace_trampoline
commit
Len
stack
Init64
SetLogger
Getppid
f64toint
sync_atomic_CompareAndSwapPointer
OnceValue
bytealg_MakeNoZero
UnreadRune
unhex
SliceOf
Rem32
Fsync
Complex
FieldByIndexErr
Error
libc_setsid_trampoline
evacuate
sigblock
mach_vm_region
Fd
SetZero
libc_dup_trampoline
rtypeOff
Reverse8
call8192
libc_munlockall_trampoline
asanregisterglobals
addIdleTime
sigpc
readFile
dumpGCProg
efaceOf
appendFileLine
getitab
asminit
block
openat
checkValid
WriteAt
Remainder
hexByte
itab_callback
itabHashFunc
New
iterate_memprof
rtypeOf
Contains
reflect_memmove
ptr
makeAddrRange
mProf_PostSweep
libc_setgid_trampoline
TrimSuffix
ReadAt
compute
panicunsafeslicelen
startProcess
FormatUint
unpack
scanConservative
HasTag
makemap
popTail
fpunwindExpand
init
ExpandEnv
allocBitsForIndex
mustBeExported
stackpoolfree
Refill
FuncOf
msanfree
accept
syscallX
FuncType
setPinnerBits
splitList
destroy
big4
main$1
StopSignal
netpollunblock
startlockedm
Key
isSeparator
leadingInt
reflect_chanlen
plugin_lastmoduleinit
NumMethod
pthread_mutex_init
lookup
direntReclen
Add32
complexTokens
siftDownOrdered
SetReadDeadline
String
InterfaceType
save
chunkOf
AppendFloat
init
StructType
libc_lseek_trampoline
notifyListCheck
WriteTo
archCosh
KeepAlive
r7
libc_ftruncate_trampoline
readlen
pidleput
nameOff
libc_getpgrp_trampoline
endCheckmarks
sync_runtime_Semrelease
unlock
LoadUint64
newcoro
exitsyscall$1
gcMarkRootCheck
secure
initMetrics$16
pcdatavalue1
now
Getenv
chanrecv
Load
cheaprandn
lstatNolog
Stopped
callers$1
funcInfo
FormatBool
unsafestringcheckptr
Pointers
errExist
statusWasTraced
Init
netpollarm
Less
printuint
commaOrPeriod
rename
isGC
Write
allocAll
isSeparator
String
Minute
appendFormatRFC3339
MutexProfile
fmtComplex
atoi64
moveToBmap
chansend1
ExportedMethods
revise
libc_getpid_trampoline
RuntimeError
GCSweepStart
beUint64
IsTimeout
ReadFile
refreshPinnerBits
sysFault
lookup
Erfc
SyscallConn
hexdumpWords
mapaccess2_fat
EqualFold
templateThread
pageTraceScav
mustBeAssignable
getm
Common
name
loadPoolChainElt
NewCond
nextRandom
find1
Err
Year
raiseproc_trampoline
poll_runtime_pollClose
nextFreeFast
ryuFtoaFixed64
LastIndexFunc
OverflowComplex
init
persistentalloc$1
cgoIsGoPointer
LoadAcquire
fmtQ
initMetrics$52
recovery
gobytes
Value
regs
RuneLen
ReadRange
Is
wait4
gorootZoneSource
writeheapdump_m
StoreInt64
init
Error
Done
New
sysFaultOS
releasepNoTrace
SetBpfPromisc
SetIterKey
Sys
allocManual
archLog2
YearDay
libc_pread_trampoline
Trim
WithDeadlineCause$1
write1
IsValid
date
ReadDir$1
Fprintln
printnl
nameOff
sigNoteSleep
initMetrics$31
FlushBpf
unspillArgs
panicSliceAcapU
tophash
feq32
matchChunk
Get
cvtSliceArray
libc_pipe_trampoline
put
Value$1
archAsinh
progToPointerMask
Error
Broadcast
load_g
Send
next
ryuDigits32
Getpriority
Add
adjusttimers
floor
Shift
recvmsgInet4
Geteuid
reflect_typedmemclrpartial
Error
resumeG
deepValueEqual$1
pushHead
lockedOSThread
kind
addAdjustedTimers
init#1
Replace
containsDotDot
ConvertibleTo
Timeout
DirFS
popcntRange
Wait
Loaduintptr
main
IsDirectIface
runtime_pollWait
order2_func
unsafeRead
NumIn
msanread
Exit
ToUpper
setTimeval
fadd64
convTnoptr
f64toint32
atime
FieldByIndex
cpuinit
goPanicSlice3CU
deepValueEqual$2
Release$thunk
UnquoteChar
readDirNames
panicSlice3BU
Common
Close
gcDrainMarkWorkerIdle
shouldRoundUp
write
addCriticalEnv
panicNotBool
mergeSummaries
runtime_envs
TrimPrefix
traceStopReadCPU
raisebadsignal
libc_posix_openpt_trampoline
eventWriter
runtimeUnsetenv
racefree
printDebugLogPC
reclaim
bigFtoa
SetLen
WriteRune
wirep
Dir
Store
Pathconf
controllerFailed
init
StoreNoWB[runtime.spanSetBlock]
stackcache_clear
DupCloseOnExec
matchResult
Println
sameSizeGrow
fuint64to32
Clone
Send
unlinkAndNext
syncadjustsudogs
reflect_unsafe_New
fullSwept
set_lr
sync_atomic_StorePointer
isAlphaNum
Pread
CompareAndSwapInt64
Minutes
fullUnswept
commit
StringBytePtr
uvarint
cgoCheckResult
abigen_runtime_memequal
mstart
pushAll
Pointers
addReflectOff
readGCStats_m
tlsinit
seenLossy
sigaltstack
WriteString
sysUsage
StringByteSlice
setGCPercent
SetZero
ReadByte
pageIndexOf
acosh
msanWrite
init
panicSlice3CU
addExitHook
printslice
sigpanic0
Signaled
leadingInt[string]
dropm
efaceeq
Deadline
Fd
acquirep
Kind
FileLine
IsDirectIface
Stack
hasX
addExtraM
bgsweep
removeAllFrom$3
ReadFrom
clearMarked
pthread_key_create_trampoline
debugCallWrap$2
morestack_noctxt
Deadline
wakefing
popList
NsecToTimespec
initMetrics$37
UnmarshalBinary
OnesCount8
fge64
Value
SendtoInet4
Munmap
readTimeRandom
writeProcStatusForP
init
call4096
FieldByNameFunc
archHypot
Unlock
next
Pread
goPanicSliceAcapU
writeTo
HasPrefix
trimLeftASCII
countGeneric
format
bp
Rel
userArenaNextFree
Key
ReadByte
init#1
runtime_canSpin
Disable
containsRune
nextSampleNoFP
max
ryuDigits
objBase
ArrayType
Key
persistentalloc1
bePutUint64
setProcessCPUProfiler
badmorestackg0
findLargeN
Swap
event
writePadding
Align
tzruleTime
fmtS
ExitCode
emitGCMask
runtime_coverage_getCovMetaList
Chtimes
setEmpty
eqslice
syscall_syscall6X
Lock
Swapper$8
sigaltstack_trampoline
runtime_rand
memhash
cas
destroy
libc_chdir_trampoline
traceInitReadCPU
call524288
setThreadCPUProfiler
runqget
nameOff
int64Hash
Swapper
SetDeadline
name
add
Local
Load[runtime.spanSetBlock]
split
TrailingZeros
MakeSlice
Abs
reflect_mapassign
unpack
freeMSpanLocked
mlock_trampoline
nextStdChunk
unlinkat
kind
Stopped
Key
Err
incTail
unsafeTraceWriter
scanChunk
fmin[float64]
Chmod
ArrayType
compute
removespecial
sigcode
mapaccess2
digitZero
rotateCmpFunc
pthread_cond_signal_trampoline
exp
l2
TrailingZeros32
find
Atan2
textOff
pdqsort
readIntBE
Sprint
poll_runtime_Semacquire
mustBeExportedSlow
Nano
f64touint64
refill
archExp
Search
Sendmsg
String
IsDirectIface
nanotime1
mdestroy
traceStartReadCPU
Type
Method
ParseRoutingSockaddr
LoadLocationFromTZData
Deadline
racegostart
seek
StoreNoWB
TypeOf
libc_pathconf_trampoline
ToLower
MethodByName
Sincos
divmod1e9
goPanicSliceConvert
WriteTo
AvailableBuffer
Seek
mapaccess1_fat
setRecord
extendSlice
Appendf
tracebackHexdump
fileLine
fmtInt
choosePivotOrdered
Sys
recvfrom
dlog
makechan64
dropg
addspecial
makeTraceFrames
Err
readyNextGen
set_sp
Getenv
PtrTo
read
FormatFloat
IsExported
init
Len
pushBackAll
initMetrics$21
Token$1
gogetenv
c64equal
racereadrangepc
Call
Add
refillAllocCache
Sync
userArenaNextFree
abort
isNaN
setPinned$2
Remove$1
recordLock
SetDeadline
tooLarge
funcInfo
IsDirectIface
init
runtimeSetenv
setGCPercent$1
doInit1
hasPrefix
readFrom
typePointersOfType
call32
Key
GoString
traceAcquire
dumpstr
blockAlignSummaryRange
runPerThreadSyscall
startsWithLowerCase
markBitsForAddr
spillArgs
CanInt
gostringn
init$3
reflect_ifaceE2I
breakPatternsOrdered
WriteToInet4
get
libc_adjtime_trampoline
small
mstartm0
gopanic
addb
isNaN
store
markBitsForIndex
symPC
libc_truncate_trampoline
StructFieldSize
makemap64
Environ
OverflowComplex
semawakeup
partialSwept
Xchgint64
Chflags
r8
startCheckmarks
ParseInt
uncommon
lastIndexFunc
mrandinit
specialFindSplicePoint
goroutineProfileWithLabelsSync
typedmemmove
AppendUint
r26
evacuate_fast32
arena_heapify
Compare
funcpkgpath
reflect_typelinks
IsPunct
traceNextGen
sinPi
Gettimeofday
CreateTemp
cvtUintFloat
libc_exchangedata_trampoline
NewReader
FieldAlign
WriteString
Len
readUintptr
LeadingZeros8
SysUsage
push
ToLowerSpecial
Search
ReadRune
read
RuntimeError
mulByLog10Log2
panicCheck2
LastIndexByteString
Set
libc_write_trampoline
closeRead$1
setDeadlineImpl
cgounimpl
Deadline
free
prepareFreeWorkbufs
ReadDir
FuncPCABI0
cleanGlobPathWindows
Chdir
contains
ExportedMethods
typ
badTimer
byteString
LastIndexRabinKarp
Read
Sync
SetWriteDeadline
asanunpoison
Close
nextSample
String
In
IsZero
put
Syscall6
LastIndexAny
truncateString
setWriteDeadline
methodReceiver
StringsAreSorted
Out
Len
trimLeftByte
unsafeslicecheckptr
initMetrics$11
Deadline
Select
appendInt$1
checkptrAlignment
Read
Unwrap
addAssistTime
sysNoHugePage
IndexAny
reflectlite_resolveNameOff
cgocallbackg1$1
sync_runtime_SemacquireRWMutex
Size
ReadFull
WriteAt
Lock
SetWriteDeadline
emptyfunc
Len
find
Fchflags
LoadLocation
Readdir
Error
runtime_SemacquireMutex
poolRaceAddr
size
prepareForSweep
sweepone$1
trigReduce
resettimer
Exited
tryLock
uniqueString
WriteString
Nextafter32
Stat
Date
GcSlice
Xaddint64
writeUnlock
Setregid
fmtString
goenvs_unix
Sys
osPreemptExtExit
takeOverflow
copysign
FieldByName
SetUint
acquireStatus
finalizercommit
IsPrint
Find
releaseAll
Reset
setUserArenaChunkToFault$1
write
Load64
tryAcquire
fintto32
IndexFunc
stringify
osyield
RLock
RuntimeError
rselect
open
reflect_typedmemmove
SetDeadline
ro
tracebackothers
And8
Swap
copyCheck
traceRelease
load
ReplaceAll
dumpbool
Month
dumpitabs
Err
allocPages64
_LostContendedRuntimeLock
reset
TrimRightFunc
entry
ShouldPrint
Add
Chown
evacuated
symMergeOrdered
Key
ArrayType
Sub
Stable
traceFrequency
NumMethod
exitsyscallfast_pidle
ToLower
assignIntN
block_generic
CutPrefix
FixedZone
setMono
goroutineProfileWithLabelsSync$1
selectgo$1
Write
envKeyEqual
initMetrics$48
RawRead
kind
traceback2
funcStr
startPC
MapType
clearBlock64
Store
build
IsEmbedded
Error
Add
adjustdefers
arena_arena_Slice
WithCancelCause
IsDirectIface
_Func
leftShift
fmul64
sweep$2
GoPreempt
ReadVarint
kevent
IsLocal
OnesCount64
checkptrStraddles
getGodebugEarly
Clean
Token
sysUnused
dumpregs
allGsSnapshot
join
check
inList
Sprintf
success
sockaddr
Comparable
Size
Name
tracebacktrap
r11
tryLoadOrStore
SearchInts$1
encoderune
SetCPUProfileRate
ReadString
pc
memequal0
c128equal
mapassign_fast64ptr
acquireLockRank
errClosed
readIntLE
Pipe
UtimesNano
mix
strmax
deductSweepCredit
mustBeExportedSlow
setMarkedNonAtomic
fmtX
closefd
isEmpty
GoDestroySyscall
hostname
Deadline
ReadVarint
String
allocBitsForIndex
goschedImpl
Load
printunlock
StructType
pkgPathFor
nextslicecap
mapassign_fast64
releasem
pop
STWStart
NewFile
pread
RuntimeError
start
forkExec
FieldByIndex
reverseRange_func
TrimLeft
SetsockoptIPMreq
printcreatedby
openFileNolog
accept
printValue
countAlloc
Swapper$2
AfterFunc
boring_runtime_arg0
PanicOnExit0
heapSetType
Mmap
Xadd64
embeddedIfaceMethStub
main_main
ExportedMethods
parseNanoseconds[string]
free
kqueue_trampoline
netpollready
SearchFloat64s$1
runtime_coverage_getCovPkgMap
CopyBuffer
expiredReadDeadline
ok
libc_getentropy_trampoline
next
header
RotateLeft8
Err
After
Tan
add1
CompareAndSwap
Zero
Next
deferreturn
flush
nextSpanForSweep
Scan
walltime_trampoline
AddDate
OnesCount64
r22
ready
Compare
fixsigcode
NumField
r27
heapBits
Kind
Methods
ReadDirent
Addr
Size
init$1
store
typ
fgt64
NumField
Recv
Symlink
CompareAndSwap
IsValid
Timeout
putFast
FieldsFunc
setSignalstackSP
dump
newAllocBits
free
gcMarkDone$4
Signbit
clearAll
shr
atof64exact
medianAdjacent
ToLower
pop
VolumeName
expm1
append
RawSyscall6
reportZombies
runtime_pollUnblock
typeOff
connect
Unlink
CompareAndSwap
Mknod
fpack64
init
debugCallCheck$1
asanpoison
entersyscallblock$2
finishsweep_m
LastIndexFunc
lockextra
panicIndex
fill
readUint64LEAt
explode
newAbiDesc
cancel
ensureSwept
time_now
parseArgNumber
sleep
sync_runtime_SemacquireRWMutexR
appendStrictRFC3339
checkTimersNoP
resolveInternal
Less
RuneCount
racemapshadow
gcBgMarkWorker$1
IsDigit
mapiternext
initMetrics$25
runtime_isPollServerDescriptor
cvtFloat
deferproc
Shutdown
panicunsafestringlen
WriteString
IsDirectIface
exitsyscallfast$1
swapRange_func
Sort
Pwrite
valueMethodName
write
Swap
getsockname
forkExecPipe
f32to64
Store[func(string, string)]
Field
Continued
Name
sigtramp
fastexprand
IsNil
Pipe
pinnerBitSize
initMetrics$13
fmin64
Unlock
pthread_mutex_lock_trampoline
bucketShift
StoreRel64
atoi
gcMarkWorkAvailable
Swap
makeSpanClass
SearchInts
TrimSpace
rwlock
netpollcheckerr
Done
atanh
Stack
archErfc
initAlgAES
Float
getLockRank
fcntl
add
float64bits
isFree
StructType
NumOut
gcallers
poll_runtime_pollReset
socket
Title
match
sysctlbyname
libc_sysconf_trampoline
Write
Mmap
Fchmod$1
TrapCause
pageTraceFree
ptrace
mustReadRune
pthread_self
Outer
Pid
subtract
atoi[string]
resetTimer
MakeMap
fixedZone
UnixMicro
netpollclose
GcSlice
cgoCheckUsingType
Cut
Atoi
Name
libc_munlock_trampoline
WriteRange
rsaAlignOf
issetugid_trampoline
Info
isMultiPinned
Name
refreshPinnerBits
clearflags
FieldAlign
Load[internal/godebug.value]
dedupEnv
archAtanh
memhash32
writeUint64LE
propagateCancel
FieldByNameFunc
casgstatus
saveBlockEventStack
SameFile
CanAddr
Read
Getgrgid
r23
archFrexp
ParseUint
runtime_notifyListWait
finishPageTrace
signal_recv
Truncate
AddUint64
libc_socket_trampoline
Getegid
Deadline
kevent_trampoline
TrailingZeros8
heapBits
Swap
daysIn
userArenaHeapBitsSetType
Common
_Func
raceaddr
adjustctxt
isGoPointerWithoutSpan
Pow10
cvtStringRunes
waitRead
partitionEqual_func
alloc$1
parseSockaddrInet
racemalloc
pthread_create_trampoline
forEachP
preadn
pthread_attr_getstacksize_trampoline
pread
systemTime
sysHugePageOS
mmap
lockRankMayQueueFinalizer
NumIn
funcNamePiecesForPrint
Bytes
RawControl
Elem
Elem
resolveTypeOff
data
close
Lock
ro
racesync
CompareAndSwap[runtime._defer]
archLog1p
Setegid
IfaceIndir
ReadDir
Nanosecond
Grow
digitsLen
sysctl_trampoline
libc_getnameinfo_trampoline
Temporary
PtraceAttach
parseRFC3339
Getegid
lessThan
updateLocked
AppendRune
directlyAssignable
libc_getpriority_trampoline
Day
pidleget
Dup
IndexRune
IsInf
IndexRune
SetDeadline
ro
ArrayType
racereleaseg
libc_getgroups_trampoline
FieldAlign
CutSuffix
alloc
nextGen
r17
WriteRune
LoadOrStore
scanstack
Seek
exitsyscallfast
tracealloc
ToUpperSpecial
flushallmcaches
panicmemAddr
setReadDeadline
checkValid
writeTo
traceAcquireEnabled
fastForward
lock2
daysSinceEpoch
AddDate
Size
init#1
unlockOSThread
gostring
initsig
rotateRight
clear
alloc
doRecordGoroutineProfile
String
archMax
init
cgoNoCallback
clen
sync_throw
enableMetadataHugePages
typehash
libc_getpeername_trampoline
writeString
Version
Clock
String
gcMarkTermination$3
call65536
String
Temporary
Add
mstart_stub
msanRead
Fchown$1
allocRange
cgoCheckTypedBlock$1
IsSorted
f64hash
dumpgs
SwapInt32
read
reflect_mapassign_faststr
GoSysBlock
fromFS
libc_setpgid_trampoline
WalkDir
Size
Sort
seen
head
roundShortest
cleantimers
interfaceSwitch
block64
ToLower
init
needKeyUpdate
Fpathconf
newproc1
Equal
Done
CanInt
panicNotMap
mapclone
SetString
mustBeAssignable
sigsp
exited
Chmod
tan
SliceStable
Unlock
Get
symMerge
LastIndexByte
tempDir
fmtF
libc_flock_trampoline
f32hash
reflect_mapiterinit
goPanicIndexU
reportZombies
grow
toType
dumproots
TryLock
setMaxThreads
removeGreaterEqual
CloseWithError
panicNotMap
Erfinv
implements
setStatusTraced
Store
Store
checkdead
libc_setgroups_trampoline
Swap
mustBeAssignableSlow
readUnaligned32
elideWrapperCalling
allocAll
separator
reflect_verifyNotInHeapPtr
UnreadRune
needIdleMarkWorker
floatFromReg
Socket
error
osInit
set
pollFractionalWorkerExit
hasSuffix
abs
libc_setrlimit_trampoline
osinit_hack_trampoline
ReadAt
Kind
runtimeNano
goschedguarded
Tag
r28
ilogb
Elem
UnixMilli
postClean
Rename
insertBack
goroutineProfileWithLabelsConcurrent$3
get1
libc_kill_trampoline
check
Cap
tracebackothers$1
MapOf
metricsLock
goPanicSlice3B
Clear
mustBe
libc_chflags_trampoline
init
empty
runfinq
init
cvtFloatUint
NumMethod
leUint64
gostringw
fipstls_runtime_arg0
Len
resolveInternal
traceAdvance$6
assignFloatN
ReadDir
InterfaceType
grow
Slice
Common
Unwrap
addtimer
runtime_debug_freeOSMemory$1
fork
runtime_debug_WriteHeapDump
reflect_mapaccess
Index
InterfaceType
cgoBindM
godebug_setUpdate
reflect_growslice
init$1
initMetrics$44
runqgrab
libc_ioctl_trampoline
Getnameinfo
mProf_Flush
FieldAlign
heapBits
cgoCallers
kind
pthread_cond_signal
incrnoverflow
CutMarker
mustBeAssignable
getg
addrsToSummaryRange
Store
cheaprand
enlistWorker
full
CmsgLen
Chmod
getfp
Fstat
Truncate
fixErr
HasPrefix
printlock
markDrained
OpenDir
trimRightASCII
Cut
selectgo$2
pcvalue
traceStack
Load
buildInterfaceSwitchCache$1
getShellName
SyscallConn
srcFunc
netpollIsPollDescriptor
initMetrics$24
Timeout
success
PtraceDetach
initMetrics$15
IsPrint
addr
base
Setpgid
slicecopy
Kind
ArrayType
Getpid
Len
Error
guintptr
String
readMetrics
reverseRangeCmpFunc
Truncate
Len
Stat
sysNoHugePageOS
mStackIsSystemAllocated
Add
get4
gcWriteBarrier7
syscall_syscall
skipStdinCopyError
ToLower$bound
getgcmask
Ptsname
Abs
Chown
osStackAlloc
log1p
CompareAndSwap
Elem
write
newosproc
Command$1
mapdelete_fast32
Deadline
FieldByName
Grow
concatstring5
manual
initMetrics$36
add
pushHead
volumeName
childStdin$1
ReadAt
StructType
raceWriteObjectPC
alloc
cvtI2I
ValidPath
cgocallback
scanblock
expandCgoFrames
UserHomeDir
CanFloat
Lstat
badctxt
archSinh
traceback1
Load
quote
layout
elem
r4
Equal
Recvmsg
Open
ro
runqputslow
StructOf$2
ensureSigM
StoreMin
Float32frombits
itabsinit
sockaddr
writeHeapBitsSmall
GoStop
syscall_runtime_BeforeFork
MinFunc
OverflowFloat
sysGrow$1
Lock
call8388608
pwrite
get
assertE2I2
MakeMapWithSize
LeadingZeros16
Add
Kill
HasName
archTanh
Lgamma
OverflowFloat
cgoCheckPtrWrite$1
Truncate
newBucket
escapes
Write
libc_execve_trampoline
ReleaseMerge
r4
scanframeworker
floatToReg
printArg
open_trampoline
interhash
newosproc0
Kind
atomicstorep
atomic_storePointer
Temporary
fdopendir
cloneInto
initMetrics$22
Equal
CompareAndSwapRelease
Done
pthread_kill_trampoline
raceacquirectx
ifaceIndir
unlinkat
walk
fmtBoolean
mProf_NextCycle
loadReadOnly
Readlink
InterfaceData
update
archAcos
ReadFile
union
dumpfields
writerDescriptor$1
NumMethod
HasName
callers
alloc
bsearch32
Ilogb
goenvs
initMetrics$17
Err
Signal
nextSeq
runOneTimer
ensureSwept
underlyingError
c64hash
Exited
Set
ptrTo
panicSlice3C
StructType
SetReadDeadline
CompareAndSwapNoWB[runtime.g]
greyobject
find
Xchg
isValidFieldName
Elem
String
dataCount
setUpdate
Len
Error
atomicAllGIndex
appendVarint
sysInit
Chmod
Setgid
free
Open
Write
next
chansend$1
typehash
sysInit
sync_runtime_Semacquire
Elem
funcfile
forkAndExecInChild
OnceValues
SetCgoTraceback
WithCancelCause$1
stringsAreSortedImpl
ioctl
PosixOpenpt
Done
StoreRelease
Data
evacuate_fast64
startTimer
CompareAndSwapPointer
libc_connect_trampoline
Swap
SetsockoptByte
lookup
And
pread
Addr
f32touint64
rawbyteslice
chmod
isDigit
funcname
isFree
runGCProg
Load$bound
init
initMetrics$2
Temporary
pthread_mutex_unlock_trampoline
noescape
advance
Float64bits
float64sAreSortedImpl
newUserArenaChunk
pwrite
HeapGoal
parseByteCount
write
SetMapIndex
AppendFormat
read
libc_getrusage_trampoline
environ
debugCallWrap2
removeAll
newFile$1
cgoCheckMemmove
msanwrite
init
Load
end
gcDrainMarkWorkerDedicated
write
mapassign_faststr0
Fchown
parseSockaddrLink
signal_ignore
SetsockoptIPv6Mreq
allocN
useGCProg
Compact
Truncate
NumMethod
ReadFrom
chansend0
UnsafePointer
read
markBitsForSpan
MkdirAll
Marker
ArrayType
pipe
IntsAreSorted
mapiterinit
stopTheWorld$1
firstZoneUsed
growSlice
Walk
makeslice
Exited
toRoutingMessage
SendmsgNInet4
dumpframe
clearMarked
releaseSudog
Load
lockWithRank
runtime_beforeExit
Write
setStatusTraced
libc_read_trampoline
schedtrace$1
libc_getsid_trampoline
Store
mapaccess
Cause
reflect_chanrecv
Remove
IsDirectIface
makechan
init
ResNclose
Mode
String
ceil
Sub32
ChanDir
InterfaceType
appendFormat
Uncommon
FuncForPC
socketControlMessageHeaderAndData
panicunsafestringnilptr
NumMethod
Unix
underscoreOK
fmtFrac
checkIdleGCNoP
archLog10
Truncate
Store[any]
Kind
StoreRelease
GetsockoptInt
suspendG
pin
printpointer
Bool
reflectcall
Read
cgoInRange
fmin[float32]
TeeReader
SetIterKey
Err
Read
arrayAt
Interface
medianAdjacentOrdered
ro
libc_sysctl_trampoline
faketimeWrite
unsafeslice
fmin32
Pin
GcSlice
tryAlloc
Sendfile
poll_runtime_pollWait
gostartcallfn
goStatusToTraceGoStatus
Value
abs
IsDirectIface
init#2
open
memequal32
UserConfigDir
rawstringtmp
AssignableTo
Size
exp2
Reverse32
Scanf
IsDST
RuntimeError
callCgoSymbolizer
update
runtime_nanotime
Gamma
Error
mustBeExported
init#1
HasName
initMetrics$34
value
CompareAndSwap
walltime
heapSort
glob
Info
bytesSlow
end
CompactFunc
TrySend
Asin
boring_registerCache
gcMark
bsearch16
Or32
initLocal
Geteuid
Len
Add
AppendQuoteRune
readdir_r
sendTime
runExitHooks$1$1
godebug_setNewIncNonDefault
stringHash
sysAllocOS
notifyListWait
start
makeBucketArray
writeFrameAt
Min
TrailingZeros32
assignTo
setCheckmark
ToUpper
Xaddint32
And
gfget$1
needAndBindM
makeslicecopy
Value
FieldByNameFunc
AppendQuoteRuneToASCII
findnull
raiseproc
goschedguarded_m
StoreInt32
WriteString
IsPollDescriptor
runes
fmax[float64]
parseARM64SystemRegisters
isEmpty
end
libc_unlink_trampoline
Start
Load
CanUint
trimRightUnicode
Uitox
printany
Round
Join
QuoteToGraphic
MarshalText
offAddrToLevelIndex
addExtra
runtime_pollSetDeadline
ignoringEINTR
chancap
stackinit
IsDST
verifyTimerHeap
Select
String
closedir
convT16
poll_runtime_Semrelease
common
Error
procyield
SetNonblock
Load[string]
Done
start
OverflowInt
capNonSlice
lockWithRankMayAcquire
libc_fstatat_trampoline
libc_gai_strerror_trampoline
Key
CanSet
UnsafePointer
ExitCode
Next
WriteString
padString
FieldByIndexErr
valid
syscall_syscallX
gorecover
Deadline
initHeapBits
bulkBarrierPreWriteSrcOnly
Store
Sync
Date
String
gopark
RuntimeError
Xadd
StructOf
reverseRangeOrdered
Unwrap
InterfaceType
Jn
cgoCheckSliceCopy
NumMethod
Readlink
FuncType
closing
siftDownCmpFunc
Error
Key
reflectOffsLock
lockSlow
cloneString
initMetrics$10
MapType
runtime_args
getnum3
ReadDir
Unix
incrementOverflow
libc_lchown_trampoline
ISOWeek
sec
partialInsertionSort
libc_closedir_trampoline
makeASCIISet
TrimFunc
Uncommon
remove
add
initSpan
stackcacherelease
preemptPark
init
IndexRabinKarp[[]byte]
Y0
runCommand
Repeat
findProcess
find
ProcSteal
And64
initMetrics$54
KernelVersion
shrcompress
In
pthread_attr_getstacksize
MarkerOnly
fmtB
isReflexive
SetBpfDatalink
legacy_fastrandn
set_pc
goparkunlock
swapRange
sbrk0
GCSweepSpan
isInlined
chunkPageIndex
traceShuttingDown
Chdir
gcmarknewobject
cosh
mget
mProf_FlushLocked
SendmsgNInet6
setRunes
dolockOSThread
funcInfo
setEmpty
setsig
makeRunes
SetsockoptLinger
gdestroy
memhash0
unlock
ReadFrom
textAddr
traceExitedSyscall
Mprotect
initMetrics$19
joinPath
wrapErr
FieldByName
panicoverflow
acquireSudog
init#1
ToTitle
LeadingZeros8
libc_fchdir_trampoline
reflect_maplen
typePointersOfType
nonblockingPipe
IsEmbedded
saveAncestors
Err
Replace
Sort[[]float64 float64]
timeSleepUntil
Setreuid
nextFrame$1
isMutexWait
Close
UnreadByte
float64frombits
tracefree
initMetrics$41
Reset
packPallocSum
common
memequal8
startIdx
equal
StoreRel
Pipe
mustBe
CountString
InterfaceType
gcMarkDone$2
Join
readFrom
bootstrapRandReseed
gcDrainMarkWorkerFractional
MapOf$1
typesEqual
makechan
syscall_syscall9
Load
reflect_mapiterelem
SetControllen
clearRange
IndirectElem
writerDescriptor
persistentalloc
libc_mlock_trampoline
TrimLeftFunc
traceAdvance$5
ExportedMethods
getPinnerBits
unblocksig
cgoCheckMemmove2
UnreadRune
newextram
selectgo
read
Swap
glob
doPrintf
reflect_typedmemclr
resolveReflectName
goPanicSliceAcap
sync_atomic_CompareAndSwapUintptr
Grow
Pointers
Common
ReadFrom
float64NegInf
set_sigcode
Error
newproc
close
Compare
findfunc
WriteAt
gcComputeStartingStackSize
throw
appendFormat
goFunc
Close
OnceFunc$1$1
printpanics
begin
setgroups
MarshalBinary
ArrayType
traceEnabled
gcMarkTinyAllocs
LoadInt64
bucketOf
libc_fchown_trampoline
memclrHasPointers
acquireStatus
MapType
Swap
Equal
refill
Lchown
sysGrow
Success
Load
initMetrics$23
WriteTo
CallSlice
becomeSpinning
socketpair
netpolldeadlineimpl
syscall_rawSyscall6
Caller
divisibleByPower5
LoadAcq64
EqualFunc
SwapUintptr
adjustpointers
Swapper$1
isUnusedUserArenaChunk
srcFunc
NumMethod
init
HasTag
empty
sysMap
StoreMarked
HashStrRev
String
TryRecv
call
setLoc
reset
maplen
CompareAndSwap[any]
Pointers
addRcvr
makeSingleStringReplacer
Key
store
NumMethod
libc_issetugid_trampoline
Sscanf
WriteTo
createfing
dumpmemstats
chunkBase
push
asanwrite
sysUnusedOS
CheckBpfVersion
writeHeapBitsSmall
div
RLocker
doubleCheckHeapPointersInterior
norm
prefixAndSuffix
Key
lookExtensions
ensureSigM$1
InUseObjects
Len
Unix
readMetricNames
reflect_chancap
Minutes
Pow
libc_sendmsg_trampoline
Truncate
longestCommonSuffix
crypto_x509_syscall
nextFreeIndex
Comparable
libc_sendfile_trampoline
setRunes
initMetrics$4
pop
freeAll
libc_getppid_trampoline
readdir
Size
findZone
IsVariadic
semrelease
UseInterfaceSwitchCache
flush$1
CanConvert
InSlice
add
stirling
haveIdenticalType
goPanicSlice3BU
Entry
WriteString
Elem
call64
sleep
Link
gotraceback
start$1
StartProcess
pwrite
WriteMsgInet4
Len
allocPages64
close
trimRightByte
recv
printStack
waitWrite
sendmsgN
getAuxv
CompareAndDelete
reflectOffsUnlock
runtimeNano
sameFile
Bind
UnixMilli
propagateCancel$2
Seek
Close
unwindm
insertionSortOrdered
dequeueSudoG
Output
Readdirnames
Next
reclaimChunk
poll_runtime_pollUnblock
swap
init
mulByLog2Log10
Exit
sigaction_trampoline
cgoCheckBits
worldStopped
Elem
SkipSpace
GoStart
sendmsgNInet6
Error
ChanDir
runqputbatch
Len
read_trampoline
valueInterface
writeTo
LoadUintptr
sysargs
release
closedir
Error
Value
syscall_runtime_AfterFork
forbits
stableOrdered
sweep$1
markrootBlock
Pwrite
newstack
OverflowInt
load
init
worldStarted
Unwrap
recvmsg
initMetrics$1
setUserArenaChunkToFault
AssignableTo
archLog
textOffFor
readInt
traceCPUFlush
String
Uitoa
SetFinalizer$1
CompareAndSwapUintptr
DataChecked
init
capNonSlice
stop
execve
name
Load
read
find1
init#8
Lstat
readdir
siftDown
Title
syscallPtr
SetCap
updateTimer0When
fastlog2
fmtBool
ExitCode
funcNameForPrint
NumMethod
growWork_fast64
markrootSpans
Undocumented
eiselLemire64
parseRFC3339[[]byte]
Init
grow
next
rotateRight
valid
Acquire
WriteAt
newPrinter
memhash8
init
Exec
sigsave
unminitSignals
order2Ordered
Chown
archFloat32ToReg
intFromArg
ChanDir
Store64
sysFree
cvtSliceArrayPtr
runtime_StoreReluintptr
Hour
call2097152
CanSet
close
Index
resetTimer
Chtimes$1
rotateLeft
setTimespec
info
parsedebugvars
directlyAssignable
AppendSlice
leadingFraction
StoreUint32
wrapErr
release
Temporary
StderrPipe
findnullw
sigFetchG
free
Logb
FieldByName$1
Call
checkValid
Swapper$4
BpfDatalink
parse
Swap
Type
SliceIsSorted
getExtraM
diff
sighandler
LockOSThread
base
traceback1$1
Slice3
TryLock
Chdir
goready
clear
sigfwd
panicSlice3AlenU
quoteWith
cancel
incPinCounter
init
heapSortCmpFunc
Ints
put$1
resolveTypeOff
finish analysis for: unsafe.init, result:  &{[] [] []}
finish analysis for: internal/goarch.init, result:  &{[] [] []}
finish analysis for: internal/unsafeheader.init, result:  &{[] [] []}
finish analysis for: internal/abi.init, result:  &{[] [] []}
finish analysis for: internal/cpu.init, result:  &{[] [] []}
finish analysis for: internal/goexperiment.init, result:  &{[] [] []}
finish analysis for: runtime/internal/atomic.init, result:  &{[] [] []}
finish analysis for: runtime/internal/math.init, result:  &{[] [] []}
finish analysis for: internal/goos.init, result:  &{[] [] []}
finish analysis for: runtime/internal/sys.init, result:  &{[] [] []}
finish analysis for: internal/coverage/rtcov.init, result:  &{[] [] []}
finish analysis for: internal/bytealg.init#1, result:  &{[] [] []}
finish analysis for: internal/bytealg.init, result:  &{[] [] []}
finish analysis for: internal/godebugs.init, result:  &{[] [] []}
finish analysis for: internal/chacha8rand.init, result:  &{[] [] []}
finish analysis for: runtime.float64frombits, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.efaceOf, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.sigdelset, result:  &{[] [] [[0 1] [1]]}
finish analysis for: runtime.init$2, result:  &{[] [[]] []}
finish analysis for: runtime.init, result:  &{[] [] []}
finish analysis for: internal/reflectlite.init, result:  &{[] [] []}
finish analysis for: errors.New, result:  &{[] [[0]] [[0]]}
finish analysis for: internal/reflectlite.noescape, result:  &{[] [[0]] [[0]]}
finish analysis for: internal/reflectlite.toRType, result:  &{[] [[0]] [[0]]}
finish analysis for: internal/reflectlite.toType, result:  &{[] [[0]] [[0]]}
finish analysis for: internal/reflectlite.TypeOf, result:  &{[] [[0]] [[0]]}
finish analysis for: (internal/reflectlite.rtype).common, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.Type).Kind, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.Type).Elem, result:  &{[0] [[0]] []}
finish analysis for: (internal/reflectlite.rtype).nameOff, result:  &{[0] [[]] [[1]]}
finish analysis for: internal/abi.addChecked, result:  &{[] [[0 1]] [[0] [1] [2]]}
finish analysis for: (internal/abi.Name).DataChecked, result:  &{[0] [[0 1]] [[1] [2]]}
finish analysis for: (internal/abi.Name).ReadVarint, result:  &{[0] [[] [0 1]] [[1]]}
finish analysis for: (internal/abi.Name).Name, result:  &{[0] [[]] []}
finish analysis for: (internal/reflectlite.rtype).String, result:  &{[0] [[]] []}
finish analysis for: internal/reflectlite.elem, result:  &{[] [[0]] [[0]]}
finish analysis for: (internal/reflectlite.rtype).Elem, result:  &{[0] [[0]] []}
finish analysis for: errors.init, result:  &{[] [] []}
finish analysis for: math/bits.init, result:  &{[] [] []}
finish analysis for: cmp.init, result:  &{[] [] []}
finish analysis for: slices.init, result:  &{[] [] []}
finish analysis for: sort.init, result:  &{[] [] []}
finish analysis for: math.init, result:  &{[] [] []}
finish analysis for: unicode/utf8.init, result:  &{[] [] []}
finish analysis for: strconv.init, result:  &{[] [] []}
finish analysis for: sync/atomic.init, result:  &{[] [] []}
finish analysis for: internal/race.init, result:  &{[] [] []}
finish analysis for: sync.init#1, result:  &{[] [] []}
finish analysis for: sync.init#2, result:  &{[] [] []}
finish analysis for: sync.init, result:  &{[] [] []}
finish analysis for: unicode.init, result:  &{[] [] []}
finish analysis for: internal/itoa.init, result:  &{[] [] []}
finish analysis for: reflect.rtypeOf, result:  &{[] [[0]] [[0]]}
finish analysis for: reflect.init, result:  &{[] [] []}
finish analysis for: internal/fmtsort.init, result:  &{[] [] []}
finish analysis for: io.init, result:  &{[] [] []}
finish analysis for: internal/oserror.init, result:  &{[] [] []}
finish analysis for: syscall.rsaAlignOf, result:  &{[] [[0]] [[0]]}
finish analysis for: syscall.errnoErr, result:  &{[] [[0]] [[0]]}
finish analysis for: syscall.Getrlimit, result:  &{[] [[]] [[0] [1]]}
finish analysis for: syscall.ByteSliceFromString, result:  &{[] [[0] []] [[0]]}
finish analysis for: syscall.sysctl, result:  &{[] [[]] [[0] [1] [2] [3] [4]]}
finish analysis for: syscall.nametomib, result:  &{[] [[] []] [[0]]}
finish analysis for: syscall.SysctlUint32, result:  &{[] [[] []] [[0]]}
finish analysis for: syscall.adjustFileLimit, result:  &{[] [] [[0]]}
finish analysis for: syscall.setrlimit, result:  &{[] [[]] [[0] [1]]}
finish analysis for: syscall.init#1, result:  &{[] [] []}
finish analysis for: syscall.init#2, result:  &{[] [] []}
finish analysis for: syscall.init, result:  &{[] [] []}
finish analysis for: time.init, result:  &{[] [] []}
finish analysis for: path.init, result:  &{[] [] []}
finish analysis for: io/fs.errInvalid, result:  &{[] [[]] []}
finish analysis for: io/fs.errPermission, result:  &{[] [[]] []}
finish analysis for: io/fs.errExist, result:  &{[] [[]] []}
finish analysis for: io/fs.errNotExist, result:  &{[] [[]] []}
finish analysis for: io/fs.errClosed, result:  &{[] [[]] []}
finish analysis for: io/fs.init, result:  &{[] [] []}
finish analysis for: internal/testlog.init, result:  &{[] [] []}
finish analysis for: internal/syscall/unix.init, result:  &{[] [] []}
finish analysis for: internal/poll.init, result:  &{[] [] []}
finish analysis for: internal/syscall/execenv.init, result:  &{[] [] []}
finish analysis for: internal/safefilepath.init, result:  &{[] [] []}
finish analysis for: os.errNoDeadline, result:  &{[] [[]] []}
finish analysis for: os.errDeadlineExceeded, result:  &{[] [[]] []}
finish analysis for: internal/syscall/unix.Fcntl, result:  &{[] [[] []] [[0] [1] [2]]}
finish analysis for: internal/syscall/unix.HasNonblockFlag, result:  &{[] [[0]] [[0]]}
finish analysis for: syscall.Munlockall, result:  &{[] [[]] []}
finish analysis for: os.ignoringEINTR, result:  &{[] [[]] [[0]]}
finish analysis for: syscall.fcntl, result:  &{[] [[] []] [[0] [1] [2]]}
finish analysis for: syscall.SetNonblock, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*internal/poll.SysFile).init, result:  &{[0] [] []}
finish analysis for: (*sync/atomic.Uint32).Load, result:  &{[0] [[]] []}
finish analysis for: internal/race.Acquire, result:  &{[] [] [[0]]}
finish analysis for: (*sync.Mutex).lockSlow, result:  &{[0] [] []}
finish analysis for: (*sync.Mutex).Lock, result:  &{[0] [] []}
finish analysis for: runtime.fatalthrow, result:  &{[] [] [[0]]}
finish analysis for: runtime.throw, result:  &{[] [] [[0]]}
finish analysis for: runtime.cansemacquire, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.acquirem, result:  &{[] [[]] []}
finish analysis for: (runtime.puintptr).ptr, result:  &{[0] [[0]] []}
finish analysis for: runtime.getLockRank, result:  &{[] [[]] [[0]]}
finish analysis for: (*runtime.guintptr).set, result:  &{[0 1] [] [[1]]}
finish analysis for: runtime.libcCall, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.KeepAlive, result:  &{[] [] [[0]]}
finish analysis for: runtime.pthread_mutex_init, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.pthread_cond_init, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.semacreate, result:  &{[] [] [[0]]}
finish analysis for: runtime/internal/math.Mul64, result:  &{[] [[0 1] [0 1]] [[0] [1]]}
finish analysis for: runtime.cheaprand, result:  &{[] [[]] []}
finish analysis for: runtime.nanotime1, result:  &{[] [[]] []}
finish analysis for: runtime.nanotime, result:  &{[] [[]] []}
finish analysis for: runtime.cputicks, result:  &{[] [[]] []}
finish analysis for: (*runtime.lockTimer).begin, result:  &{[0] [] []}
finish analysis for: runtime.pthread_mutex_lock, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.pthread_cond_wait, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*runtime.timespec).setNsec, result:  &{[0 1] [] [[1]]}
finish analysis for: runtime.pthread_cond_timedwait_relative_np, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: runtime.pthread_mutex_unlock, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.semasleep, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.usleep, result:  &{[] [] [[0]]}
finish analysis for: runtime.osyield, result:  &{[] [] []}
finish analysis for: (*runtime/internal/atomic.Int64).Add, result:  &{[0] [[]] [[1]]}
finish analysis for: runtime.cheaprand64, result:  &{[] [[]] []}
finish analysis for: (*runtime.mLockProfile).recordLock, result:  &{[0 1 2] [] [[1] [2]]}
finish analysis for: (*runtime.lockTimer).end, result:  &{[0] [] []}
finish analysis for: runtime.lock2, result:  &{[] [] [[0]]}
finish analysis for: runtime.lockWithRank, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.lock, result:  &{[] [] [[0]]}
finish analysis for: (runtime.muintptr).ptr, result:  &{[0] [[0]] []}
finish analysis for: runtime.pthread_cond_signal, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.semawakeup, result:  &{[] [] [[0]]}
finish analysis for: (*runtime/internal/atomic.Int32).Load, result:  &{[0] [[]] []}
finish analysis for: (*runtime.mLockProfile).captureStack, result:  &{[0] [] []}
finish analysis for: (*runtime/internal/atomic.UnsafePointer).Load, result:  &{[0] [[]] []}
finish analysis for: (*runtime.sysMemStat).add, result:  &{[0] [] [[1]]}
finish analysis for: (*runtime/internal/atomic.Uint64).Add, result:  &{[0] [[]] [[1]]}
finish analysis for: runtime.mmap, result:  &{[] [[0 1 2 3 4 5] [0 1 2 3 4 5]] [[0] [1] [2] [3] [4] [5]]}
finish analysis for: runtime.sysAllocOS, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.sysAlloc, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: (*runtime/internal/atomic.UnsafePointer).StoreNoWB, result:  &{[0] [] [[1]]}
finish analysis for: runtime.persistentalloc, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: runtime.newBucket, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.add, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*runtime.bucket).stk, result:  &{[0] [[0]] []}
finish analysis for: runtime.eqslice, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.stkbucket, result:  &{[] [[0 1 2]] [[0] [1] [2] [3]]}
finish analysis for: (*runtime.bucket).bp, result:  &{[0] [[0]] []}
finish analysis for: runtime.saveBlockEventStack, result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: runtime.releasem, result:  &{[] [] [[0]]}
finish analysis for: (*runtime.mLockProfile).store, result:  &{[0] [] []}
finish analysis for: (*runtime.mLockProfile).recordUnlock, result:  &{[0] [] [[1]]}
finish analysis for: runtime.unlock2, result:  &{[] [] [[0]]}
finish analysis for: runtime.unlockWithRank, result:  &{[] [] [[0]]}
finish analysis for: runtime.unlock, result:  &{[] [] [[0]]}
finish analysis for: runtime.acquireSudog, result:  &{[] [[]] []}
finish analysis for: (*runtime.semTable).rootFor, result:  &{[0] [[0]] [[1]]}
finish analysis for: (*runtime/internal/atomic.Uint32).Add, result:  &{[0] [[]] [[1]]}
finish analysis for: (*runtime.semaRoot).rotateLeft, result:  &{[0 1] [] [[1]]}
finish analysis for: (*runtime.semaRoot).rotateRight, result:  &{[0 1] [] [[1]]}
finish analysis for: (*runtime.semaRoot).queue, result:  &{[0 1 2] [] [[1] [0 1 2] [3]]}
finish analysis for: runtime.checkTimeouts, result:  &{[] [] []}
finish analysis for: (*runtime/internal/atomic.Uint32).Load, result:  &{[0] [[]] []}
finish analysis for: runtime.readgstatus, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.gopark, result:  &{[] [] [[0] [1] [2] [3] [4]]}
finish analysis for: runtime.goparkunlock, result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: runtime.blocksampled, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.findmoduledatap, result:  &{[] [[]] [[0]]}
finish analysis for: (*runtime.moduledata).textOff, result:  &{[0] [[0 1] []] [[1]]}
finish analysis for: runtime.findfunc, result:  &{[] [[]] [[0]]}
finish analysis for: (runtime.funcInfo).valid, result:  &{[0] [[0]] []}
finish analysis for: runtime.printlock, result:  &{[] [] []}
finish analysis for: runtime.printunlock, result:  &{[] [] []}
finish analysis for: runtime.tracebackHexdump$1, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.recordForPanic, result:  &{[] [] [[0]]}
finish analysis for: runtime.write1, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: runtime.noescape, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.write, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: runtime.writeErr, result:  &{[] [] [[0]]}
finish analysis for: runtime.gwrite, result:  &{[] [] [[0]]}
finish analysis for: runtime.findnull, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.gostringnocopy, result:  &{[] [[0]] [[0]]}
finish analysis for: (*runtime.moduledata).funcName, result:  &{[0] [[0]] [[1]]}
finish analysis for: runtime.funcname, result:  &{[] [[0]] [[0]]}
finish analysis for: (*runtime.moduledata).textAddr, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (runtime.funcInfo).entry, result:  &{[0] [[0]] []}
finish analysis for: runtime.hexdumpWords, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: runtime.tracebackHexdump, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: (*runtime.g).guintptr, result:  &{[0] [[0]] []}
finish analysis for: (runtime.guintptr).ptr, result:  &{[0] [[0]] []}
finish analysis for: runtime.pcvalueCacheKey, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.readvarint, result:  &{[] [[] [0]] [[0]]}
finish analysis for: runtime.step, result:  &{[] [[0] []] [[0] [0 1] [0 2] [3]]}
finish analysis for: runtime.cheaprandn, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.pcvalue, result:  &{[] [[0] [0]] [[0] [1] [2] [3]]}
finish analysis for: runtime.funcspdelta, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: (*runtime.unwinder).finishInternal, result:  &{[0] [] []}
finish analysis for: (*runtime.unwinder).resolveInternal, result:  &{[0] [] [[1] [2]]}
finish analysis for: (*runtime.unwinder).initAt, result:  &{[0 1 2 3 4 5] [] [[1] [2] [3] [4] [5]]}
finish analysis for: (*runtime.unwinder).init, result:  &{[0 1 2] [] [[1] [2]]}
finish analysis for: (*runtime.unwinder).valid, result:  &{[0] [[0]] []}
finish analysis for: runtime.msanwrite, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.asanwrite, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.racereleasemerge, result:  &{[] [] [[0]]}
finish analysis for: (*runtime/internal/atomic.Uintptr).Load, result:  &{[0] [[]] []}
finish analysis for: runtime.traceEnabled, result:  &{[] [[]] []}
finish analysis for: runtime.lockWithRankMayAcquire, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.lockRankMayTraceFlush, result:  &{[] [] []}
finish analysis for: (*runtime/internal/atomic.Uintptr).Add, result:  &{[0] [[]] [[1]]}
finish analysis for: runtime.traceAcquireEnabled, result:  &{[] [[]] []}
finish analysis for: runtime.traceAcquire, result:  &{[] [[]] []}
finish analysis for: runtime.badctxt, result:  &{[] [] []}
finish analysis for: runtime.save, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.acquireLockRank, result:  &{[] [] [[0]]}
finish analysis for: runtime.releaseLockRank, result:  &{[] [] [[0]]}
finish analysis for: (*runtime/internal/atomic.Uint32).CompareAndSwap, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: (runtime.waitReason).isMutexWait, result:  &{[0] [[0]] []}
finish analysis for: runtime/internal/sys.Len64, result:  &{[] [[0]] [[0]]}
finish analysis for: (*runtime.timeHistogram).record, result:  &{[0] [] [[1]]}
finish analysis for: runtime.casgstatus, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: (runtime.traceLocker).ok, result:  &{[0] [[0]] []}
finish analysis for: (*runtime/internal/atomic.Uint8).Load, result:  &{[0] [[]] []}
finish analysis for: (*runtime/internal/atomic.Bool).Load, result:  &{[0] [[]] []}
finish analysis for: (*runtime.puintptr).set, result:  &{[0 1] [] [[1]]}
finish analysis for: runtime.reentersyscall, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.entersyscall, result:  &{[] [] []}
finish analysis for: runtime.osPreemptExtEnter, result:  &{[] [] [[0]]}
finish analysis for: runtime.osPreemptExtExit, result:  &{[] [] [[0]]}
finish analysis for: runtime.traceRelease, result:  &{[] [] [[0]]}
finish analysis for: (*runtime.muintptr).set, result:  &{[0 1] [] [[1]]}
finish analysis for: runtime.wirep, result:  &{[] [] [[0]]}
finish analysis for: runtime.exitsyscallfast_reacquired, result:  &{[] [] [[0]]}
finish analysis for: runtime.exitsyscallfast, result:  &{[] [[]] [[0]]}
finish analysis for: (runtime.traceLocker).RecordSyscallExitedTime, result:  &{[0 1 2] [] [[0 1 2] [0 1 2]]}
finish analysis for: runtime.assertLockHeld, result:  &{[] [] [[0]]}
finish analysis for: runtime.hasPrefix, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.isSystemGoroutine, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.schedEnabled, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.Gosched, result:  &{[] [] []}
finish analysis for: runtime.exitsyscall, result:  &{[] [] []}
finish analysis for: runtime.raceacquire, result:  &{[] [] [[0]]}
finish analysis for: runtime.cgocall, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.cgoContextPCs, result:  &{[] [] [[0] [1]]}
finish analysis for: (*runtime.unwinder).cgoCallers, result:  &{[0] [[]] [[1]]}
finish analysis for: (*runtime.unwinder).symPC, result:  &{[0] [[0]] []}
finish analysis for: runtime.funcdata, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.pcdatastart, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.pcdatavalue1, result:  &{[] [[0]] [[0] [1] [2] [3]]}
finish analysis for: (*runtime.inlineUnwinder).resolveInternal, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: runtime.newInlineUnwinder, result:  &{[] [[0] [0 1]] [[0] [1]]}
finish analysis for: (runtime.inlineFrame).valid, result:  &{[0] [[0]] []}
finish analysis for: runtime.alignUp, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*runtime.unwinder).next, result:  &{[0] [] []}
finish analysis for: (runtime.funcInfo).srcFunc, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.inlineUnwinder).srcFunc, result:  &{[0] [[0]] [[1]]}
finish analysis for: runtime.elideWrapperCalling, result:  &{[] [[0]] [[0]]}
finish analysis for: (*runtime.inlineUnwinder).next, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: runtime.tracebackPCs, result:  &{[] [[]] [[0] [1] [0 2]]}
finish analysis for: runtime.gcallers, result:  &{[] [[]] [[0] [1] [0 2]]}
finish analysis for: runtime.callers, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.saveblockevent, result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: runtime.blockevent, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.releaseSudog, result:  &{[] [] [[0]]}
finish analysis for: runtime.semacquire1, result:  &{[] [] [[0] [1] [2] [3] [4]]}
finish analysis for: runtime.semacquire, result:  &{[] [] [[0]]}
finish analysis for: runtime.unsafeTraceWriter, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*runtime.traceBuf).available, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: runtime.traceClockNow, result:  &{[] [[]] []}
finish analysis for: (*runtime.traceBuf).byte, result:  &{[0 1] [] [[1]]}
finish analysis for: (*runtime.traceBuf).varint, result:  &{[0] [] [[1]]}
finish analysis for: (*runtime.traceBuf).varintReserve, result:  &{[0] [[0]] []}
finish analysis for: (runtime.traceWriter).refill, result:  &{[0] [[0]] []}
finish analysis for: (runtime.traceWriter).ensure, result:  &{[0] [[0] [0 1]] [[1]]}
finish analysis for: (*runtime/internal/atomic.Int64).Load, result:  &{[0] [[]] []}
finish analysis for: runtime.timeSleep, result:  &{[] [] [[0]]}
finish analysis for: (*runtime/internal/atomic.Int64).Store, result:  &{[0] [] [[1]]}
finish analysis for: runtime.ticksPerSecond, result:  &{[] [[]] []}
finish analysis for: runtime.traceClockUnitsPerSecond, result:  &{[] [[]] []}
finish analysis for: runtime.traceFrequency, result:  &{[] [] [[0]]}
finish analysis for: runtime.atomicAllG, result:  &{[] [[] []] []}
finish analysis for: runtime.atomicAllGIndex, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*runtime.goroutineProfileStateHolder).Load, result:  &{[0] [[]] []}
finish analysis for: (*runtime.goroutineProfileStateHolder).CompareAndSwap, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: runtime.doRecordGoroutineProfile, result:  &{[] [] [[0]]}
finish analysis for: (*runtime/internal/atomic.Uint32).Store, result:  &{[0] [] [[1]]}
finish analysis for: (*runtime.goroutineProfileStateHolder).Store, result:  &{[0] [] [[1]]}
finish analysis for: runtime.tryRecordGoroutineProfile, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.tryRecordGoroutineProfileWB, result:  &{[] [] [[0]]}
finish analysis for: runtime.forEachGRace, result:  &{[] [] [[0]]}
finish analysis for: runtime.traceNextGen, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.stringStructOf, result:  &{[] [[0]] [[0]]}
finish analysis for: (*runtime.traceMap).bucket, result:  &{[0] [[]] [[1]]}
finish analysis for: (*runtime.traceMapNode).next, result:  &{[0] [[]] []}
finish analysis for: (*runtime.traceMap).find, result:  &{[0] [[]] [[1] [2] [3]]}
finish analysis for: (*runtime.traceMap).put, result:  &{[0] [[] []] [[1] [2]]}
finish analysis for: (*runtime.traceStringTable).put, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: runtime.traceRegisterLabelsAndReasons, result:  &{[] [] [[0]]}
finish analysis for: (*runtime/internal/atomic.Uintptr).Store, result:  &{[0] [] [[1]]}
finish analysis for: (runtime.traceLocker).writer, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.traceSchedResourceState).statusWasTraced, result:  &{[0] [[]] [[1]]}
finish analysis for: (*runtime.traceSchedResourceState).readyNextGen, result:  &{[0] [] [[1]]}
finish analysis for: (*runtime.traceSchedResourceState).acquireStatus, result:  &{[0] [[]] [[1]]}
finish analysis for: (runtime.traceWriter).event, result:  &{[0] [[0]] [[1] [2]]}
finish analysis for: (runtime.traceWriter).writeProcStatus, result:  &{[0] [[0]] [[1] [2] [3]]}
finish analysis for: (runtime.traceWriter).writeGoStatus, result:  &{[0] [[0]] [[1] [2] [3] [4]]}
finish analysis for: (runtime.traceLocker).eventWriter, result:  &{[0] [[0]] [[0 1] [0 2]]}
finish analysis for: runtime.tracefpunwindoff, result:  &{[] [[]] []}
finish analysis for: (*runtime.m).hasCgoOnStack, result:  &{[0] [[0]] []}
finish analysis for: runtime.fpTracebackPCs, result:  &{[] [[]] [[0] [0 1]]}
finish analysis for: (*runtime.traceStackTable).put, result:  &{[0] [[]] [[1]]}
finish analysis for: runtime.traceStack, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: (runtime.traceLocker).stack, result:  &{[0] [[]] [[1]]}
finish analysis for: (runtime.traceEventWriter).write, result:  &{[0] [[0]] [[1] [2]]}
finish analysis for: (runtime.traceWriter).end, result:  &{[0] [] []}
finish analysis for: (runtime.traceEventWriter).end, result:  &{[0] [] []}
finish analysis for: (runtime.traceEventWriter).commit, result:  &{[0] [] [[0 1] [0 2]]}
finish analysis for: (runtime.traceLocker).Gomaxprocs, result:  &{[0] [] [[1]]}
finish analysis for: (runtime.traceLocker).GCActive, result:  &{[0] [] []}
finish analysis for: (*runtime.semaRoot).dequeue, result:  &{[0] [[0] [] [0]] [[1]]}
finish analysis for: runtime.mutexevent, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.goready, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.readyWithTime, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.goyield, result:  &{[] [] []}
finish analysis for: runtime.semrelease1, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: runtime.semrelease, result:  &{[] [] [[0]]}
finish analysis for: (runtime.traceWriter).flush, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.profAtomic).load, result:  &{[0] [[]] []}
finish analysis for: (runtime.profIndex).tagCount, result:  &{[0] [[0]] []}
finish analysis for: runtime.countSub, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*runtime.profAtomic).store, result:  &{[0] [] [[1]]}
finish analysis for: (runtime.profIndex).dataCount, result:  &{[0] [[0]] []}
finish analysis for: (runtime.profIndex).addCountsAndClearFlags, result:  &{[0] [[0 1 2]] [[1] [2]]}
finish analysis for: (*runtime/internal/atomic.Uint64).Load, result:  &{[0] [[]] []}
finish analysis for: (*runtime.profBuf).hasOverflow, result:  &{[0] [[]] []}
finish analysis for: (*runtime.profAtomic).cas, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: runtime.entersyscallblock, result:  &{[] [] []}
finish analysis for: runtime.notetsleep_internal, result:  &{[] [[]] [[0] [1] [2] [3]]}
finish analysis for: runtime.notetsleepg, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.noteclear, result:  &{[] [] [[0]]}
finish analysis for: (*runtime/internal/atomic.Uint64).CompareAndSwap, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: (*runtime.profBuf).takeOverflow, result:  &{[0] [[] []] []}
finish analysis for: (*runtime.profBuf).read, result:  &{[0] [[0] [0] []] [[1]]}
finish analysis for: runtime.traceReadCPU, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.forEachP, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.notewakeup, result:  &{[] [] [[0]]}
finish analysis for: (*runtime.profBuf).wakeupExtra, result:  &{[0] [] []}
finish analysis for: (*runtime.profBuf).close, result:  &{[0] [] []}
finish analysis for: runtime.racerelease, result:  &{[] [] [[0]]}
finish analysis for: (*runtime.wakeableSleep).wake, result:  &{[0] [] []}
finish analysis for: (*runtime.wakeableSleep).close, result:  &{[0] [] []}
finish analysis for: runtime.traceStopReadCPU, result:  &{[] [] []}
finish analysis for: (*runtime.traceAdvancerState).stop, result:  &{[0] [] []}
finish analysis for: runtime.goStatusToTraceGoStatus, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.traceAdvance, result:  &{[] [] [[0]]}
finish analysis for: runtime.StopTrace, result:  &{[] [] []}
finish analysis for: (*sync.Once).doSlow, result:  &{[0] [] [[1]]}
finish analysis for: (*sync.Once).Do, result:  &{[0] [] [[1]]}
finish analysis for: internal/poll.errnoErr, result:  &{[] [[0]] [[0]]}
finish analysis for: (*internal/poll.pollDesc).init, result:  &{[0] [[]] [[1]]}
finish analysis for: (*internal/poll.FD).Init, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: runtime.toRType, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.reflectOffsLock, result:  &{[] [] []}
finish analysis for: runtime.reflectOffsUnlock, result:  &{[] [] []}
finish analysis for: runtime.resolveNameOff, result:  &{[] [[1]] [[0] [1]]}
finish analysis for: (runtime.rtype).nameOff, result:  &{[0] [[1]] [[1]]}
finish analysis for: (runtime.rtype).string, result:  &{[0] [[]] []}
finish analysis for: runtime.arenaIndex, result:  &{[] [[0]] [[0]]}
finish analysis for: (runtime.arenaIdx).l1, result:  &{[0] [[0]] []}
finish analysis for: (runtime.arenaIdx).l2, result:  &{[0] [[0]] []}
finish analysis for: runtime.spanOf, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.inUserArenaChunk, result:  &{[] [[]] [[0]]}
finish analysis for: (*runtime.mSpanStateBox).get, result:  &{[0] [[]] []}
finish analysis for: (*runtime.mspan).base, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.mspan).divideByElemSize, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (*runtime.mspan).objIndex, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: runtime.gcDumpObject, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: runtime.badPointer, result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: runtime.findObject, result:  &{[] [[0] [] [0]] [[0] [1] [2]]}
finish analysis for: runtime.isGoPointerWithoutSpan, result:  &{[] [[]] [[0]]}
finish analysis for: (runtime.spanClass).noscan, result:  &{[0] [[0]] []}
finish analysis for: runtime.heapBitsInSpan, result:  &{[] [[0]] [[0]]}
finish analysis for: (runtime.spanClass).sizeclass, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.FuncType).IsVariadic, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.FuncType).InSlice, result:  &{[0] [[0]] []}
finish analysis for: runtime.itabHashFunc, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*runtime.itabTableType).find, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: (*internal/abi.Type).Uncommon, result:  &{[0] [[0]] []}
finish analysis for: runtime.resolveTypeOff, result:  &{[] [[1]] [[0] [1]]}
finish analysis for: (runtime.rtype).typeOff, result:  &{[0] [[1]] [[1]]}
finish analysis for: (internal/abi.Name).Data, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: runtime.pkgPath, result:  &{[] [[]] [[0]]}
finish analysis for: (internal/abi.Name).IsExported, result:  &{[0] [[0]] []}
finish analysis for: (runtime.rtype).textOff, result:  &{[0] [[1]] [[1]]}
finish analysis for: (*runtime.itab).init, result:  &{[0] [[]] []}
finish analysis for: runtime.lockRankMayQueueFinalizer, result:  &{[] [] []}
finish analysis for: runtime.computeRZlog, result:  &{[] [[]] [[0]]}
finish analysis for: (*runtime.gcCPULimiterState).limiting, result:  &{[0] [[]] []}
finish analysis for: (*runtime/internal/atomic.Float64).Load, result:  &{[0] [[]] []}
finish analysis for: (runtime.traceLocker).GCMarkAssistStart, result:  &{[0] [] []}
finish analysis for: (*runtime.gcWork).empty, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.lfstack).empty, result:  &{[0] [[]] []}
finish analysis for: runtime.gcMarkWorkAvailable, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.round2, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.gcComputeStartingStackSize, result:  &{[] [] []}
finish analysis for: (*runtime.gcCPULimiterState).tryLock, result:  &{[0] [[]] []}
finish analysis for: (runtime.limiterEventStamp).typ, result:  &{[0] [[0]] []}
finish analysis for: (runtime.limiterEventStamp).duration, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: runtime.makeLimiterEventStamp, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*runtime.limiterEvent).consume, result:  &{[0] [[] [1]] [[1]]}
finish analysis for: (*runtime/internal/atomic.Uint8).Store, result:  &{[0] [] [[1]]}
finish analysis for: (*runtime/internal/atomic.Bool).Store, result:  &{[0] [] [[1]]}
finish analysis for: (*runtime.gcCPULimiterState).accumulate, result:  &{[0 1 2] [] [[1] [2]]}
finish analysis for: (*runtime.gcCPULimiterState).updateLocked, result:  &{[0 1] [] [[1]]}
finish analysis for: (*runtime.gcCPULimiterState).startGCTransition, result:  &{[0 1 2] [] [[1] [2]]}
finish analysis for: (*runtime.gQueue).popList, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.gList).empty, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.gQueue).empty, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.gQueue).pop, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.gQueue).pushBack, result:  &{[0 1] [] [[1]]}
finish analysis for: (*runtime.gQueue).pushBackAll, result:  &{[0 1] [] [[1]]}
finish analysis for: runtime.globrunqputbatch, result:  &{[] [] [[0] [1]]}
finish analysis for: (runtime.pMask).set, result:  &{[0] [] [[1]]}
finish analysis for: (runtime.pMask).clear, result:  &{[0] [] [[1]]}
finish analysis for: (*runtime/internal/atomic.Int32).Add, result:  &{[0] [[]] [[1]]}
finish analysis for: (*runtime.gcCPULimiterState).addAssistTime, result:  &{[0] [] [[1]]}
finish analysis for: (*runtime.gcCPULimiterState).addIdleTime, result:  &{[0] [] [[1]]}
finish analysis for: (*runtime.limiterEvent).stop, result:  &{[0] [] [[1] [2]]}
finish analysis for: runtime.pidleget, result:  &{[] [[] [0]] [[0]]}
finish analysis for: runtime.pidlegetSpinning, result:  &{[] [[] [0]] [[0]]}
finish analysis for: runtime.mget, result:  &{[] [[]] []}
finish analysis for: runtime.runqempty, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.mcount, result:  &{[] [[]] []}
finish analysis for: runtime.checkmcount, result:  &{[] [] []}
finish analysis for: runtime.mReserveID, result:  &{[] [[]] []}
finish analysis for: (*runtime.rwmutex).rlock, result:  &{[0] [] []}
finish analysis for: (*runtime.consistentHeapStats).acquire, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.consistentHeapStats).release, result:  &{[0] [] []}
finish analysis for: (runtime.traceLocker).HeapAlloc, result:  &{[0] [] [[1]]}
finish analysis for: (*runtime.sysMemStat).load, result:  &{[0] [[]] []}
finish analysis for: (*runtime.gcControllerState).memoryLimitHeapGoal, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.gcControllerState).heapGoalInternal, result:  &{[0] [[0] []] []}
finish analysis for: (*runtime.gcControllerState).heapGoal, result:  &{[0] [[0]] []}
finish analysis for: (*runtime/internal/atomic.Uint64).Store, result:  &{[0] [] [[1]]}
finish analysis for: (*runtime/internal/atomic.Float64).Store, result:  &{[0] [] [[1]]}
finish analysis for: (*runtime.gcControllerState).revise, result:  &{[0] [] []}
finish analysis for: (*runtime.gcControllerState).update, result:  &{[0] [] [[1] [2]]}
finish analysis for: (*runtime.mcentral).fullSwept, result:  &{[0] [[0]] [[1]]}
finish analysis for: (runtime.headTailIndex).tail, result:  &{[0] [[0]] []}
finish analysis for: (runtime.headTailIndex).head, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.atomicHeadTailIndex).incTail, result:  &{[0] [[]] []}
finish analysis for: (*runtime.atomicSpanSetSpinePointer).Load, result:  &{[0] [[]] []}
finish analysis for: (*runtime.atomicSpanSetSpinePointer).StoreNoWB, result:  &{[0] [] [[1]]}
finish analysis for: (runtime.taggedPointer).pointer, result:  &{[0] [[0]] []}
finish analysis for: runtime.lfstackUnpack, result:  &{[] [[0]] [[0]]}
finish analysis for: (*runtime.lfstack).pop, result:  &{[0] [[]] []}
finish analysis for: (*runtime.spanSetBlockAlloc).alloc, result:  &{[0] [[]] []}
finish analysis for: (runtime.spanSetSpinePointer).lookup, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (*runtime.atomicMSpanPointer).StoreNoWB, result:  &{[0] [] [[1]]}
finish analysis for: (*runtime.spanSet).push, result:  &{[0] [] [[1]]}
finish analysis for: (*runtime.mcentral).partialSwept, result:  &{[0] [[0]] [[1]]}
finish analysis for: (runtime.traceLocker).GCSweepSpan, result:  &{[0] [] [[1]]}
finish analysis for: runtime.newSpecialsIter, result:  &{[] [[0]] [[0]]}
finish analysis for: (*runtime.specialsIter).valid, result:  &{[0] [[0]] []}
finish analysis for: runtime.spanHasNoSpecials, result:  &{[] [] [[0]]}
finish analysis for: (*runtime.mspan).markBitsForBase, result:  &{[0] [[0]] []}
finish analysis for: runtime.addb, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*runtime.gcBits).bytep, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (*runtime.gcBits).bitp, result:  &{[0] [[0 1] [1]] [[1]]}
finish analysis for: (*runtime.mspan).allocBitsForIndex, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (runtime.markBits).isMarked, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.markBits).advance, result:  &{[0] [] []}
finish analysis for: (*runtime.mspan).reportZombies, result:  &{[0] [] []}
finish analysis for: runtime.divRoundUp, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime/internal/sys.OnesCount64, result:  &{[] [[0]] [[0]]}
finish analysis for: (*runtime.mspan).countAlloc, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.gcBitsArena).tryAlloc, result:  &{[0] [[0]] [[1]]}
finish analysis for: runtime.newArenaMayUnlock, result:  &{[] [[]] []}
finish analysis for: runtime.newMarkBits, result:  &{[] [[]] [[0]]}
finish analysis for: (*runtime.mspan).getPinnerBits, result:  &{[0] [[]] []}
finish analysis for: (*runtime.mspan).pinnerBitSize, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.wbBuf).discard, result:  &{[0] [] []}
finish analysis for: runtime.wbBufFlush, result:  &{[] [] []}
finish analysis for: (*runtime.wbBuf).get2, result:  &{[0] [[0]] []}
finish analysis for: runtime.atomicwb, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.inHeapOrStack, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.activeModules, result:  &{[] [[]] []}
finish analysis for: runtime.cgoInRange, result:  &{[] [[0 2]] [[0] [1] [2]]}
finish analysis for: runtime.cgoIsGoPointer, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.spanOfHeap, result:  &{[] [[]] [[0]]}
finish analysis for: (*runtime.pinnerBits).ofObject, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (*runtime.pinState).isPinned, result:  &{[0] [[0]] []}
finish analysis for: runtime.isPinned, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.inPersistentAlloc, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.cgoCheckPtrWrite, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.atomicstorep, result:  &{[] [] [[0] [1]]}
finish analysis for: (*runtime.mspan).setPinnerBits, result:  &{[0] [] [[1]]}
finish analysis for: (*runtime.mspan).newPinnerBits, result:  &{[0] [[]] []}
finish analysis for: (*runtime.mspan).refreshPinnerBits, result:  &{[0] [] []}
finish analysis for: (*runtime.mspan).refillAllocCache, result:  &{[0 1] [] [[1]]}
finish analysis for: (*runtime.mheap).freeSpan, result:  &{[0] [] [[1]]}
finish analysis for: runtime.sysFaultOS, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.sysFault, result:  &{[] [] [[0] [1]]}
finish analysis for: (*runtime.mSpanStateBox).set, result:  &{[0] [] [[1]]}
finish analysis for: runtime.gotraceback, result:  &{[] [[] [] []] []}
finish analysis for: (runtime.waitReason).String, result:  &{[0] [[]] []}
finish analysis for: runtime.goroutineheader, result:  &{[] [] [[0]]}
finish analysis for: runtime.tracefree, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.clobberfree, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.racefree, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.msanfree, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.asanpoison, result:  &{[] [] [[0] [1]]}
finish analysis for: (*runtime.mspan).markBitsForIndex, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (runtime.markBits).setMarkedNonAtomic, result:  &{[0] [] []}
finish analysis for: (*runtime.specialsIter).next, result:  &{[0] [] []}
finish analysis for: (*runtime.specialsIter).unlinkAndNext, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.fixalloc).free, result:  &{[0 1] [] [[0 1]]}
finish analysis for: (*runtime.mProfCycleHolder).read, result:  &{[0] [[]] []}
finish analysis for: (*runtime.bucket).mp, result:  &{[0] [[0]] []}
finish analysis for: runtime.mProf_Free, result:  &{[] [] [[0] [1]]}
finish analysis for: (*runtime/internal/atomic.Uint32).Or, result:  &{[0] [] [[1]]}
finish analysis for: runtime.queuefinalizer, result:  &{[] [] [[0] [1] [2] [3] [4]]}
finish analysis for: runtime.freeSpecial, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: (*runtime.sweepLocked).sweep, result:  &{[0] [[]] [[1]]}
finish analysis for: (*runtime.mcentral).uncacheSpan, result:  &{[0] [] [[1]]}
finish analysis for: (*runtime.mcache).releaseAll, result:  &{[0] [] []}
finish analysis for: (runtime.gclinkptr).ptr, result:  &{[0] [[0]] []}
finish analysis for: runtime.spanOfUnchecked, result:  &{[] [[]] [[0]]}
finish analysis for: (*runtime.mSpanList).insert, result:  &{[0 1] [] [[0 1]]}
finish analysis for: (*runtime.mSpanList).remove, result:  &{[0 1] [] [[1]]}
finish analysis for: runtime.osStackFree, result:  &{[] [] [[0]]}
finish analysis for: runtime.pageTraceFree, result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: runtime.pageIndexOf, result:  &{[] [[] [0] [0]] [[0]]}
finish analysis for: (runtime.offAddr).lessThan, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: runtime.chunkIndex, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.chunkPageIndex, result:  &{[] [[0]] [[0]]}
finish analysis for: (runtime.chunkIdx).l1, result:  &{[0] [[0]] []}
finish analysis for: (runtime.chunkIdx).l2, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.pageAlloc).chunkOf, result:  &{[0] [[0]] [[1]]}
finish analysis for: (*runtime.pageBits).clear, result:  &{[0 1] [] [[1]]}
finish analysis for: (*runtime.pageBits).clearRange, result:  &{[0 1 2] [] [[1] [2]]}
finish analysis for: (*runtime.pallocBits).free, result:  &{[0 1 2] [] [[1] [2]]}
finish analysis for: runtime.unpackScavChunkData, result:  &{[] [[0]] [[0]]}
finish analysis for: (*runtime.atomicScavChunkData).load, result:  &{[0] [[]] []}
finish analysis for: (*runtime.scavChunkFlags).setNonEmpty, result:  &{[0] [] []}
finish analysis for: (*runtime.scavChunkData).free, result:  &{[0 1 2] [] [[1] [2]]}
finish analysis for: (runtime.scavChunkData).pack, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.atomicScavChunkData).store, result:  &{[0] [] [[1]]}
finish analysis for: runtime.chunkBase, result:  &{[] [[0]] [[0]]}
finish analysis for: (*runtime.atomicOffAddr).Load, result:  &{[0] [[] []] []}
finish analysis for: (*runtime.atomicOffAddr).StoreMarked, result:  &{[0] [] [[1]]}
finish analysis for: (*runtime.scavengeIndex).free, result:  &{[0 1 2 3] [] [[1] [2] [3]]}
finish analysis for: (*runtime.pageBits).clearAll, result:  &{[0] [] []}
finish analysis for: (*runtime.pallocBits).freeAll, result:  &{[0] [] []}
finish analysis for: (*runtime.pallocBits).free1, result:  &{[0 1] [] [[1]]}
finish analysis for: runtime.packPallocSum, result:  &{[] [[0 1 2]] [[0] [1] [2]]}
finish analysis for: runtime/internal/sys.TrailingZeros64, result:  &{[] [[]] [[0]]}
finish analysis for: runtime/internal/sys.LeadingZeros64, result:  &{[] [[0]] [[0]]}
finish analysis for: (*runtime.pallocBits).summarize, result:  &{[0] [[0]] []}
finish analysis for: runtime.addrsToSummaryRange, result:  &{[] [[1] [2]] [[0] [1] [2]]}
finish analysis for: (runtime.pallocSum).unpack, result:  &{[0] [[0] [0] [0]] []}
finish analysis for: runtime.mergeSummaries, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*runtime.pageAlloc).update, result:  &{[0] [] [[1] [2] [3] [4]]}
finish analysis for: (*runtime.pageAlloc).free, result:  &{[0 1 2] [] [[1] [2]]}
finish analysis for: (*runtime.mheap).freeMSpanLocked, result:  &{[0 1] [] [[0 1]]}
finish analysis for: (*runtime.mheap).freeSpanLocked, result:  &{[0 1] [] [[0 1] [2]]}
finish analysis for: (*runtime.mheap).freeManual, result:  &{[0 1] [] [[0 1] [2]]}
finish analysis for: runtime.stackpoolfree, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.stackcache_clear, result:  &{[] [] [[0]]}
finish analysis for: (*runtime.mcache).prepareForSweep, result:  &{[0] [] []}
finish analysis for: (*runtime.traceSchedResourceState).nextSeq, result:  &{[0] [[0]] [[1]]}
finish analysis for: (runtime.traceLocker).ProcStart, result:  &{[0] [] []}
finish analysis for: runtime.acquirep, result:  &{[] [] [[0]]}
finish analysis for: runtime.fatal, result:  &{[] [] [[0]]}
finish analysis for: (*internal/chacha8rand.State).Init64, result:  &{[0 1] [] [[1]]}
finish analysis for: (*internal/chacha8rand.State).Next, result:  &{[0] [[0] []] []}
finish analysis for: (*internal/chacha8rand.State).Refill, result:  &{[0] [] []}
finish analysis for: (*internal/chacha8rand.State).Reseed, result:  &{[0] [] []}
finish analysis for: runtime.bootstrapRandReseed, result:  &{[] [] []}
finish analysis for: runtime.rand, result:  &{[] [[]] []}
finish analysis for: runtime.bootstrapRand, result:  &{[] [[]] []}
finish analysis for: runtime.mrandinit, result:  &{[] [] [[0]]}
finish analysis for: runtime.malg, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.mlock, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.mpreinit, result:  &{[] [] [[0]]}
finish analysis for: runtime.mcommoninit, result:  &{[] [] [[0 1] [1]]}
finish analysis for: runtime.mStackIsSystemAllocated, result:  &{[] [[]] []}
finish analysis for: (runtime.traceLocker).ProcStop, result:  &{[0] [] [[1]]}
finish analysis for: runtime.releasepNoTrace, result:  &{[] [[]] []}
finish analysis for: runtime.releasep, result:  &{[] [[]] []}
finish analysis for: (*runtime.rwmutex).runlock, result:  &{[0] [] []}
finish analysis for: runtime.traceShuttingDown, result:  &{[] [[]] []}
finish analysis for: runtime.traceThreadDestroy, result:  &{[] [] [[0]]}
finish analysis for: runtime.allocm, result:  &{[] [[1 2]] [[0] [1] [2]]}
finish analysis for: runtime.pthread_attr_init, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.writeErrStr, result:  &{[] [] [[0]]}
finish analysis for: runtime.exit, result:  &{[] [] [[0]]}
finish analysis for: runtime.pthread_attr_getstacksize, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.pthread_attr_setdetachstate, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.sigprocmask, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: runtime.gcount, result:  &{[] [[]] []}
finish analysis for: runtime.usleep_no_g, result:  &{[] [] [[0]]}
finish analysis for: runtime.retryOnEAGAIN, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.newosproc, result:  &{[] [] [[0]]}
finish analysis for: runtime.newm1, result:  &{[] [] [[0]]}
finish analysis for: runtime.newm, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: runtime.startm, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: runtime.injectglist$1, result:  &{[] [] [[0]]}
finish analysis for: runtime.runqputbatch, result:  &{[] [] [[0 1] [1] [2]]}
finish analysis for: (runtime.traceLocker).GoUnpark, result:  &{[0] [] [[1] [2]]}
finish analysis for: runtime.injectglist, result:  &{[] [] [[0]]}
finish analysis for: runtime.gcWakeAllAssists, result:  &{[] [] []}
finish analysis for: runtime.schedEnableUser, result:  &{[] [] [[0]]}
finish analysis for: (*runtime.gcControllerState).endCycle, result:  &{[0 1 2] [] [[1] [2] [3]]}
finish analysis for: runtime.setGCPhase, result:  &{[] [] [[0]]}
finish analysis for: runtime.casGToWaiting, result:  &{[] [] [[0 2] [1] [2]]}
finish analysis for: (runtime.traceLocker).GCDone, result:  &{[0] [] []}
finish analysis for: runtime.walltime, result:  &{[] [[] []] []}
finish analysis for: runtime.time_now, result:  &{[] [[] [] []] []}
finish analysis for: (*runtime.cpuStats).accumulate, result:  &{[0 1] [] [[1] [2]]}
finish analysis for: (runtime.offAddr).addr, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.scavengeIndex).nextGen, result:  &{[0] [] []}
finish analysis for: (*runtime/internal/atomic.Uint32).Swap, result:  &{[0] [[]] [[1]]}
finish analysis for: (*runtime.gcCPULimiterState).unlock, result:  &{[0] [] []}
finish analysis for: (*runtime.gcCPULimiterState).finishGCTransition, result:  &{[0 1] [] [[1]]}
finish analysis for: (*runtime.mProfCycleHolder).increment, result:  &{[0] [] []}
finish analysis for: runtime.mProf_NextCycle, result:  &{[] [] []}
finish analysis for: (*runtime.activeSweep).begin, result:  &{[0] [[]] []}
finish analysis for: (*runtime.mProfCycleHolder).setFlushed, result:  &{[0] [[] []] []}
finish analysis for: (*runtime.memRecordCycle).add, result:  &{[0 1] [] [[1]]}
finish analysis for: runtime.mProf_FlushLocked, result:  &{[] [] [[0]]}
finish analysis for: runtime.mProf_Flush, result:  &{[] [] []}
finish analysis for: (*runtime.mSpanList).isEmpty, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.mSpanList).takeAll, result:  &{[0 1] [] [[0 1]]}
finish analysis for: runtime.prepareFreeWorkbufs, result:  &{[] [] []}
finish analysis for: (*runtime.activeSweep).end, result:  &{[0] [] [[1]]}
finish analysis for: runtime.itoaDiv, result:  &{[] [[0 1]] [[0 1] [1] [2]]}
finish analysis for: runtime.bool2int, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.makeSpanClass, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*runtime.mspan).setUserArenaChunkToFault, result:  &{[0] [] []}
finish analysis for: runtime.fmtNSAsMS, result:  &{[] [[0 1]] [[0 1] [1]]}
finish analysis for: runtime.gcMarkTermination, result:  &{[] [] [[0]]}
finish analysis for: runtime.gcMarkDone, result:  &{[] [] []}
finish analysis for: runtime.gcParkAssist, result:  &{[] [[]] []}
finish analysis for: (runtime.traceLocker).GCMarkAssistDone, result:  &{[0] [] []}
finish analysis for: runtime.gcAssistAlloc, result:  &{[] [] [[0]]}
finish analysis for: runtime.deductAssistCredit, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.getMCache, result:  &{[] [[0]] [[0]]}
finish analysis for: (runtime.traceLocker).GCSweepStart, result:  &{[0] [] []}
finish analysis for: (*runtime.sweepClass).load, result:  &{[0] [[]] []}
finish analysis for: (*runtime.sweepClass).update, result:  &{[0] [] [[1]]}
finish analysis for: (runtime.sweepClass).split, result:  &{[0] [[0] [0]] []}
finish analysis for: (*runtime.mcentral).partialUnswept, result:  &{[0] [[0]] [[1]]}
finish analysis for: (*runtime.atomicHeadTailIndex).load, result:  &{[0] [[]] []}
finish analysis for: (runtime.headTailIndex).split, result:  &{[0] [[0] [0]] []}
finish analysis for: runtime.makeHeadTailIndex, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*runtime.atomicHeadTailIndex).cas, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: (*runtime.atomicMSpanPointer).Load, result:  &{[0] [[]] []}
finish analysis for: runtime.taggedPointerPack, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.lfstackPack, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*runtime.lfstack).push, result:  &{[0] [] [[1]]}
finish analysis for: (*runtime.spanSetBlockAlloc).free, result:  &{[0] [] [[1]]}
finish analysis for: (*runtime.spanSet).pop, result:  &{[0] [[]] []}
finish analysis for: (*runtime.mcentral).fullUnswept, result:  &{[0] [[0]] [[1]]}
finish analysis for: (*runtime.mheap).nextSpanForSweep, result:  &{[0] [[]] []}
finish analysis for: (*runtime.sweepLocker).tryAcquire, result:  &{[0] [[1] []] [[1]]}
finish analysis for: (*runtime.activeSweep).markDrained, result:  &{[0] [[]] []}
finish analysis for: (*runtime.scavengerState).ready, result:  &{[0] [] []}
finish analysis for: runtime.sweepone, result:  &{[] [[]] []}
finish analysis for: (runtime.traceLocker).GCSweepDone, result:  &{[0] [] []}
finish analysis for: runtime.deductSweepCredit, result:  &{[] [] [[0] [1]]}
finish analysis for: (*runtime.mheap).alloc, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: runtime.heapBitsSlice, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*runtime.mspan).heapBits, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.mspan).initHeapBits, result:  &{[0] [] [[1]]}
finish analysis for: (*runtime.mcache).allocLarge, result:  &{[0] [[1]] [[1] [2]]}
finish analysis for: runtime.nextFreeFast, result:  &{[] [[0]] [[0]]}
finish analysis for: (*runtime.mspan).nextFreeIndex, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.mcentral).grow, result:  &{[0] [[]] []}
finish analysis for: (*runtime.mcentral).cacheSpan, result:  &{[0] [[]] []}
finish analysis for: (*runtime.mcache).refill, result:  &{[0] [] [[1]]}
finish analysis for: (*runtime.mcache).nextFree, result:  &{[0] [[0] [0] []] [[1]]}
finish analysis for: runtime.heapBitsSetType, result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: runtime.add1, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.subtractb, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.subtract1, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.runGCProg, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime/internal/sys.Bswap32, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime/internal/sys.Bswap64, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.readUintptr, result:  &{[] [[0]] [[0]]}
finish analysis for: (*runtime.mspan).heapBitsSmallForAddr, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (*runtime.mspan).writeHeapBitsSmall, result:  &{[0] [[3]] [[1] [2] [3]]}
finish analysis for: (*runtime.mspan).objBase, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (*runtime.mspan).typePointersOfUnchecked, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: runtime/internal/sys.TrailingZeros32, result:  &{[] [[]] [[0]]}
finish analysis for: (runtime.typePointers).nextFast, result:  &{[0] [[0] [0]] []}
finish analysis for: (runtime.typePointers).next, result:  &{[0 1] [[0 1] [0 1]] [[1]]}
finish analysis for: runtime.dumpTypePointers, result:  &{[] [] [[0]]}
finish analysis for: runtime.doubleCheckHeapPointers, result:  &{[] [] [[0 4] [1] [2] [3] [0 4]]}
finish analysis for: runtime.alignDown, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (runtime.typePointers).fastForward, result:  &{[0 1 2] [[0 1 2]] [[1] [2]]}
finish analysis for: (*runtime.mspan).typePointersOf, result:  &{[0 1 2] [[0 1 2]] [[1] [2]]}
finish analysis for: runtime.doubleCheckHeapPointersInterior, result:  &{[] [] [[0] [1 2 6] [1 2 6] [3] [4] [5] [1 2 6]]}
finish analysis for: runtime.heapSetType, result:  &{[] [[2 4]] [[0 1 2 4] [1] [2] [2 3] [0 1 2 4]]}
finish analysis for: (runtime.markBits).setMarked, result:  &{[0] [] []}
finish analysis for: runtime.gcmarknewobject, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.racemalloc, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.msanmalloc, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.asanunpoison, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.float64bits, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.fastlog2, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.fastexprand, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.nextSampleNoFP, result:  &{[] [[]] []}
finish analysis for: runtime.nextSample, result:  &{[] [[]] []}
finish analysis for: runtime.mProf_Malloc, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.profilealloc, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: runtime.goschedguarded, result:  &{[] [] []}
finish analysis for: runtime.memclrNoHeapPointersChunked, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.traceback2$1, result:  &{[] [[] []] []}
finish analysis for: runtime.callCgoSymbolizer, result:  &{[] [] [[0]]}
finish analysis for: runtime.printOneCgoTraceback, result:  &{[] [[]] [[0] [1] [0 2]]}
finish analysis for: runtime.printCgoTraceback, result:  &{[] [] [[0]]}
finish analysis for: (runtime.srcFunc).name, result:  &{[0] [[0]] []}
finish analysis for: runtime.isExportedRuntime, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.showfuncinfo, result:  &{[] [[0]] [[0] [1] [2]]}
finish analysis for: runtime.showframe, result:  &{[] [[0]] [[0] [1] [2] [3]]}
finish analysis for: runtime.funcfile, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: runtime.funcline1, result:  &{[] [[0] [0]] [[0] [1] [2]]}
finish analysis for: (*runtime.inlineUnwinder).fileLine, result:  &{[0] [[0] [0]] [[1]]}
finish analysis for: runtime.funcNamePiecesForPrint, result:  &{[] [[0] [] [0]] [[0]]}
finish analysis for: runtime.printFuncName, result:  &{[] [] [[0]]}
finish analysis for: (*runtime.inlineUnwinder).isInlined, result:  &{[0] [[1]] [[1]]}
finish analysis for: runtime.pcdatavalue, result:  &{[] [[0]] [[0] [1] [2]]}
finish analysis for: runtime.readUnaligned64, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.printArgs$1, result:  &{[] [[1]] [[0] [1]]}
finish analysis for: runtime.printArgs$2, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: runtime.printArgs, result:  &{[] [] [[0] [1] [0 2]]}
finish analysis for: runtime.traceback2, result:  &{[] [[] []] [[0] [1] [2] [3]]}
finish analysis for: runtime.traceback1$1, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.funcline, result:  &{[] [[0] [0]] [[0] [1]]}
finish analysis for: runtime.printcreatedby1, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: runtime.printcreatedby, result:  &{[] [] [[0]]}
finish analysis for: runtime.printAncestorTracebackFuncInfo, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.printAncestorTraceback, result:  &{[] [] [[0]]}
finish analysis for: runtime.traceback1, result:  &{[] [] [[0 3] [1 3] [2] [3] [4]]}
finish analysis for: runtime.traceback, result:  &{[] [] [[0 3] [1 3] [2] [3]]}
finish analysis for: runtime.tracealloc, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: (*runtime.gcControllerState).trigger, result:  &{[0] [[0] [0]] []}
finish analysis for: (runtime.gcTrigger).test, result:  &{[0] [[0]] []}
finish analysis for: (runtime.traceLocker).GCStart, result:  &{[0] [] []}
finish analysis for: runtime.gcBgMarkStartWorkers, result:  &{[] [] []}
finish analysis for: runtime.clearpools, result:  &{[] [] []}
finish analysis for: (*runtime.gcControllerState).setMaxIdleMarkWorkers, result:  &{[0] [] [[1]]}
finish analysis for: (*runtime.gcControllerState).startCycle, result:  &{[0 1 2] [] [[1] [2] [3]]}
finish analysis for: runtime.gcBgMarkPrepare, result:  &{[] [] []}
finish analysis for: runtime.assertWorldStopped, result:  &{[] [] []}
finish analysis for: runtime.assertWorldStoppedOrLockHeld, result:  &{[] [] [[0]]}
finish analysis for: runtime.allGsSnapshot, result:  &{[] [[]] []}
finish analysis for: runtime.gcMarkRootPrepare$1, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.gcMarkRootPrepare, result:  &{[] [] []}
finish analysis for: (*runtime.mspan).isFree, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: runtime.setCheckmark, result:  &{[] [[]] [[0] [1] [2] [3]]}
finish analysis for: runtime/internal/sys.Prefetch, result:  &{[] [] [[0]]}
finish analysis for: (*runtime.gcWork).putFast, result:  &{[0 1] [[]] [[1]]}
finish analysis for: (*runtime.workbuf).checknonempty, result:  &{[0] [] []}
finish analysis for: runtime.putfull, result:  &{[] [] [[0]]}
finish analysis for: (*runtime.workbuf).checkempty, result:  &{[0] [] []}
finish analysis for: runtime.lfnodeValidate, result:  &{[] [] [[0]]}
finish analysis for: runtime.putempty, result:  &{[] [] [[0]]}
finish analysis for: runtime.getempty, result:  &{[] [[]] []}
finish analysis for: runtime.trygetfull, result:  &{[] [[]] []}
finish analysis for: (*runtime.gcWork).init, result:  &{[0] [] []}
finish analysis for: runtime.pthread_kill, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.signalM, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.preemptM, result:  &{[] [] [[0]]}
finish analysis for: runtime.preemptone, result:  &{[] [[]] [[0]]}
finish analysis for: (*runtime.gcControllerState).enlistWorker, result:  &{[0] [] []}
finish analysis for: (*runtime.gcWork).put, result:  &{[0] [] [[1]]}
finish analysis for: runtime.greyobject, result:  &{[] [] [[0] [1] [2] [3 5] [0 3 4 5] [3 5]]}
finish analysis for: runtime.gcMarkTinyAllocs, result:  &{[] [] []}
finish analysis for: runtime.gcStart, result:  &{[] [] [[0]]}
finish analysis for: runtime.mallocgc, result:  &{[] [[0 1]] [[0] [1] [2]]}
finish analysis for: runtime.iterate_itabs, result:  &{[] [] [[0]]}
finish analysis for: (*runtime.itabTableType).add, result:  &{[0] [] [[1]]}
finish analysis for: runtime.itabAdd, result:  &{[] [] [[0]]}
finish analysis for: runtime.getitab, result:  &{[] [[0 1]] [[0] [1] [2]]}
finish analysis for: runtime.assertE2I2, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*internal/abi.FuncType).NumOut, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.FuncType).OutSlice, result:  &{[0] [[0]] []}
finish analysis for: runtime.createfing, result:  &{[] [] []}
finish analysis for: runtime.SetFinalizer, result:  &{[] [] [[0] [1]]}
finish analysis for: os.newFile, result:  &{[] [[0 1]] [[0] [1] [2]]}
finish analysis for: os.NewFile, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: os.basename, result:  &{[] [[0]] [[0]]}
finish analysis for: (*syscall.Timespec).Unix, result:  &{[0] [[0] [0]] []}
finish analysis for: time.unixTime, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: time.Unix, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: os.fillFileStatFromSys, result:  &{[] [] [[0 1] [1]]}
finish analysis for: os.statNolog, result:  &{[] [[0] [0]] [[0]]}
finish analysis for: (*sync/atomic.Value).Load, result:  &{[0] [[]] []}
finish analysis for: internal/testlog.Logger, result:  &{[] [[]] []}
finish analysis for: internal/testlog.Getenv, result:  &{[] [] [[0]]}
finish analysis for: internal/race.Disable, result:  &{[] [] []}
finish analysis for: (*sync/atomic.Int32).Add, result:  &{[0] [[]] [[1]]}
finish analysis for: internal/race.Enable, result:  &{[] [] []}
finish analysis for: (*sync.RWMutex).RLock, result:  &{[0] [] []}
finish analysis for: syscall.Getenv, result:  &{[] [[] []] [[0]]}
finish analysis for: os.Getenv, result:  &{[] [[]] [[0]]}
finish analysis for: os.sameFile, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: os.SameFile, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: internal/race.Release, result:  &{[] [] [[0]]}
finish analysis for: (*sync.Mutex).unlockSlow, result:  &{[0] [] [[1]]}
finish analysis for: (*sync.Mutex).Unlock, result:  &{[0] [] []}
finish analysis for: internal/testlog.Stat, result:  &{[] [] [[0]]}
finish analysis for: os.Stat, result:  &{[] [[0] [0]] [[0]]}
finish analysis for: os.underlyingError, result:  &{[] [[0]] [[0]]}
finish analysis for: (syscall.Errno).Is, result:  &{[0] [[0]] [[1]]}
finish analysis for: os.underlyingErrorIs, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: os.IsNotExist, result:  &{[] [[0]] [[0]]}
finish analysis for: (io/fs.FileMode).Perm, result:  &{[0] [[0]] []}
finish analysis for: os.syscallMode, result:  &{[] [[0]] [[0]]}
finish analysis for: syscall.BytePtrFromString, result:  &{[] [[0] []] [[0]]}
finish analysis for: syscall.Open, result:  &{[] [[] []] [[0] [1] [2]]}
finish analysis for: os.open, result:  &{[] [[] [] []] [[0] [1] [2]]}
finish analysis for: (*os.fileStat).Mode, result:  &{[0] [[0]] []}
finish analysis for: os.fixLongPath, result:  &{[] [[0]] [[0]]}
finish analysis for: os.chmod, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: os.Chmod, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: os.setStickyBit, result:  &{[] [[0]] [[0]]}
finish analysis for: syscall.CloseOnExec, result:  &{[] [] [[0]]}
finish analysis for: os.openFileNolog, result:  &{[] [[0] [0]] [[0] [1] [2]]}
finish analysis for: (*internal/poll.fdMutex).incref, result:  &{[0] [[]] []}
finish analysis for: internal/poll.errClosing, result:  &{[] [[]] [[0]]}
finish analysis for: (*internal/poll.FD).incref, result:  &{[0] [[]] []}
finish analysis for: (*sync/atomic.Bool).Load, result:  &{[0] [[]] []}
finish analysis for: sync/atomic.b32, result:  &{[] [[]] [[0]]}
finish analysis for: (*sync/atomic.Bool).Store, result:  &{[0] [] [[1]]}
finish analysis for: syscall.Dup, result:  &{[] [[] []] [[0]]}
finish analysis for: internal/poll.dupCloseOnExecOld, result:  &{[] [[] [] []] [[0]]}
finish analysis for: internal/poll.DupCloseOnExec, result:  &{[] [[] [] []] [[0]]}
finish analysis for: (*internal/poll.FD).Dup, result:  &{[0] [[] [] []] []}
finish analysis for: syscall.Close, result:  &{[] [[]] [[0]]}
finish analysis for: (*internal/poll.FD).OpenDir, result:  &{[0] [[] [] []] []}
finish analysis for: os.lstatNolog, result:  &{[] [[0] [0]] [[0]]}
finish analysis for: os.Lstat, result:  &{[] [[0] [0]] [[0]]}
finish analysis for: os.dtToType, result:  &{[] [[]] [[0]]}
finish analysis for: (io/fs.FileMode).Type, result:  &{[0] [[0]] []}
finish analysis for: os.newUnixDirent, result:  &{[] [[0 1 2] [0 1]] [[0] [1] [2]]}
finish analysis for: (*os.File).readdir, result:  &{[0] [[] [0] [0] [0]] [[1] [2]]}
finish analysis for: (*os.File).Readdirnames, result:  &{[0] [[] [0]] [[1]]}
finish analysis for: internal/poll.ignoringEINTR, result:  &{[] [[]] [[0]]}
finish analysis for: (*internal/poll.FD).Fstat, result:  &{[0] [[]] [[1]]}
finish analysis for: (*os.File).Stat, result:  &{[0] [[0] [0]] []}
finish analysis for: (*os.dirInfo).close, result:  &{[0] [] []}
finish analysis for: (*internal/poll.fdMutex).increfAndClose, result:  &{[0] [[]] []}
finish analysis for: (*internal/poll.pollDesc).evict, result:  &{[0] [] []}
finish analysis for: (*internal/poll.fdMutex).decref, result:  &{[0] [[]] []}
finish analysis for: (*internal/poll.pollDesc).close, result:  &{[0] [] []}
finish analysis for: (*internal/poll.SysFile).destroy, result:  &{[0] [[]] [[1]]}
finish analysis for: (*internal/poll.FD).destroy, result:  &{[0] [[]] []}
finish analysis for: (*internal/poll.FD).decref, result:  &{[0] [[]] []}
finish analysis for: (*internal/poll.FD).Close, result:  &{[0] [[]] []}
finish analysis for: (*os.file).close, result:  &{[0] [[0]] []}
finish analysis for: (*os.File).Close, result:  &{[0] [[0]] []}
finish analysis for: syscall.getcwd, result:  &{[] [[] []] [[0]]}
finish analysis for: syscall.clen, result:  &{[] [[]] [[0]]}
finish analysis for: syscall.Getwd, result:  &{[] [[] []] []}
finish analysis for: os.NewSyscallError, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: os.Getwd, result:  &{[] [[] []] []}
finish analysis for: os.init#1, result:  &{[] [] []}
finish analysis for: os.init, result:  &{[] [] []}
finish analysis for: fmt.init, result:  &{[] [] []}
finish analysis for: bytes.init, result:  &{[] [] []}
finish analysis for: context.init#1, result:  &{[] [] []}
finish analysis for: context.init, result:  &{[] [] []}
finish analysis for: internal/bisect.init, result:  &{[] [] []}
finish analysis for: internal/godebug.init#1, result:  &{[] [] []}
finish analysis for: internal/godebug.init, result:  &{[] [] []}
finish analysis for: strings.init, result:  &{[] [] []}
finish analysis for: path/filepath.init, result:  &{[] [] []}
finish analysis for: internal/godebug.New, result:  &{[] [[0]] [[0]]}
finish analysis for: os/exec.init, result:  &{[] [] []}
finish analysis for: (*runtime/internal/atomic.Int64).CompareAndSwap, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: (*runtime.atomicOffAddr).Clear, result:  &{[0] [] []}
finish analysis for: runtime.sysReserveOS, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.sysReserve, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*runtime.scavengeIndex).sysInit, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: (*runtime.scavengeIndex).init, result:  &{[0 1] [[]] [[1] [2]]}
finish analysis for: (*runtime.linearAlloc).init, result:  &{[0 1 2 3] [] [[1] [2] [3]]}
finish analysis for: (*runtime.addrRanges).init, result:  &{[0 1] [] [[1]]}
finish analysis for: (*runtime.fixalloc).init, result:  &{[0 2 3 4] [] [[1] [2] [3] [4]]}
finish analysis for: runtime.lockInit, result:  &{[] [] [[0] [1]]}
finish analysis for: (*runtime.mspan).init, result:  &{[0 1 2] [] [[1] [2]]}
finish analysis for: (*runtime.liveUserArenaChunk).init, result:  &{[0 1 2] [] [[1] [2]]}
finish analysis for: (*internal/poll.FD).init, result:  &{[0] [] []}
finish analysis for: (*fmt.fmt).clearflags, result:  &{[0] [] []}
finish analysis for: (*fmt.fmt).init, result:  &{[0 1] [] [[1]]}
finish analysis for: (runtime.liveUserArenaChunk).init, result:  &{[0 1 2] [] [[1] [2]]}
finish analysis for: (*runtime.wbBuf).reset, result:  &{[0] [] []}
finish analysis for: runtime.allocmcache, result:  &{[] [[]] []}
finish analysis for: runtime.raceproccreate, result:  &{[] [[]] []}
finish analysis for: (*runtime.p).init, result:  &{[0 1] [] [[1]]}
finish analysis for: (*runtime.scavengerState).init, result:  &{[0] [] []}
finish analysis for: (*runtime.rwmutex).init, result:  &{[0 1] [] [[1] [2] [3]]}
finish analysis for: github.com/cokeBeer/goot/cmd/taintanalysis/case.init, result:  &{[] [] []}
finish analysis for: (*runtime.mSpanList).init, result:  &{[0] [] []}
finish analysis for: (*runtime/internal/atomic.Int32).Store, result:  &{[0] [] [[1]]}
finish analysis for: (*runtime.gcControllerState).setGCPercent, result:  &{[0 1] [[]] [[1]]}
finish analysis for: (*runtime.gcControllerState).setMemoryLimit, result:  &{[0] [[]] [[1]]}
finish analysis for: (*runtime.gcControllerState).commit, result:  &{[0] [] [[1]]}
finish analysis for: (*runtime.gcControllerState).init, result:  &{[0 1] [] [[1] [2]]}
finish analysis for: (*runtime.ticksType).init, result:  &{[0] [] []}
finish analysis for: (*runtime.pageAlloc).sysInit, result:  &{[0] [] [[1]]}
finish analysis for: runtime.maxSearchAddr, result:  &{[] [[]] []}
finish analysis for: (*runtime.pageAlloc).init, result:  &{[0 1 2 3] [] [[1] [2] [3]]}
finish analysis for: (*runtime.mcentral).init, result:  &{[0 1] [] [[1]]}
finish analysis for: (*runtime.mheap).init, result:  &{[0] [] []}
end analysis for: slices.startIdx , result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*reflect.rtype).common, result:  &{[0] [[0]] []}
finish analysis for: runtime.memequal8, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: io.Pipe, result:  &{[] [[] []] []}
finish analysis for: runtime.Callers, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.CallersFrames, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.rawstring, result:  &{[] [[] []] [[0]]}
finish analysis for: runtime.gostring, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.expandCgoFrames, result:  &{[] [[0]] [[0]]}
finish analysis for: (runtime.funcInfo)._Func, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.Func).raw, result:  &{[0] [[0]] []}
finish analysis for: (*runtime._func).isInlined, result:  &{[0] [[0]] []}
finish analysis for: (*runtime._func).funcInfo, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.Func).Entry, result:  &{[0] [[0]] []}
finish analysis for: runtime.funcNameForPrint, result:  &{[] [[0]] [[0]]}
finish analysis for: (*runtime.Frames).Next, result:  &{[0] [[0] []] []}
finish analysis for: reflect.valueMethodName, result:  &{[] [[]] []}
finish analysis for: (reflect.flag).kind, result:  &{[0] [[0]] []}
finish analysis for: (reflect.flag).mustBe, result:  &{[0] [] [[1]]}
finish analysis for: (*reflect.Value).mustBe, result:  &{[0] [] [[1]]}
finish analysis for: (runtime.offAddr).equal, result:  &{[0] [[0 1]] [[1]]}
end analysis for: runtime/internal/atomic.StoreRel , result:  &{[] [] [[0] [1]]}
finish analysis for: (*internal/abi.Type).InterfaceType, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.StructType).InterfaceType, result:  &{[0] [[0]] []}
end analysis for: internal/bytealg.CountString , result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*os.File).readFrom, result:  &{[0] [[] [] []] [[1]]}
finish analysis for: (*os.fileWithoutReadFrom).readFrom, result:  &{[0] [[] [] []] [[1]]}
finish analysis for: (runtime.stwReason).String, result:  &{[0] [[]] []}
finish analysis for: (runtime.traceLocker).string, result:  &{[0] [[]] [[1]]}
finish analysis for: (runtime.traceLocker).STWStart, result:  &{[0] [] [[1]]}
finish analysis for: runtime.preemptall, result:  &{[] [[]] []}
finish analysis for: runtime.notetsleep, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (runtime.stwReason).isGC, result:  &{[0] [[0]] []}
finish analysis for: runtime.worldStopped, result:  &{[] [] []}
finish analysis for: (runtime.traceLocker).GoSysBlock, result:  &{[0] [] [[1]]}
finish analysis for: (runtime.traceLocker).ProcSteal, result:  &{[0] [] [[1] [2]]}
finish analysis for: runtime.stopTheWorldWithSema, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.gcMarkDone$2, result:  &{[] [] []}
finish analysis for: bytes.Join, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: (internal/abi.Name).HasTag, result:  &{[0] [[0]] []}
finish analysis for: (internal/abi.Name).Tag, result:  &{[0] [[]] []}
finish analysis for: (internal/abi.Name).IsEmbedded, result:  &{[0] [[0]] []}
finish analysis for: runtime.typesEqual, result:  &{[] [[0 1]] [[0] [1] [0 1 2]]}
finish analysis for: runtime/internal/math.MulUintptr, result:  &{[] [[0 1] [0 1]] [[0] [1]]}
finish analysis for: (*runtime.hchan).raceaddr, result:  &{[0] [[0]] []}
finish analysis for: runtime.makechan, result:  &{[] [[0 1]] [[0] [1]]}
end analysis for: internal/syscall/unix.syscall_syscall9 , result:  &{[] [[] [] []] [[0] [1] [2] [3] [4] [5] [6] [7] [8] [9]]}
finish analysis for: runtime.heapBitsForAddr, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (runtime.heapBits).nextFast, result:  &{[0] [[] []] []}
finish analysis for: (runtime.heapBits).next, result:  &{[0] [[] []] []}
finish analysis for: runtime.scanobject, result:  &{[] [] [[0] [0 1]]}
finish analysis for: (*runtime.stackScanState).putPtr, result:  &{[0] [] [[1] [2]]}
finish analysis for: runtime.scanblock, result:  &{[] [] [[0] [1] [2] [0 3] [4]]}
finish analysis for: runtime.markrootSpans, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.markrootBlock, result:  &{[] [[1 4]] [[0] [1] [2] [0 3 4] [4]]}
finish analysis for: runtime.dumpgstatus, result:  &{[] [] [[0]]}
finish analysis for: runtime.randn, result:  &{[] [[0]] [[0]]}
finish analysis for: (*runtime.guintptr).cas, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: runtime.runqputslow, result:  &{[] [[]] [[0] [1] [2] [3]]}
finish analysis for: runtime.runqput, result:  &{[] [] [[0 1] [1] [2]]}
finish analysis for: (*runtime/internal/atomic.Int32).CompareAndSwap, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: runtime.wakep, result:  &{[] [] []}
finish analysis for: runtime.ready, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: runtime.gcFlushBgCredit, result:  &{[] [] [[0]]}
finish analysis for: runtime.markroot, result:  &{[] [[1]] [[0 1] [1] [2]]}
finish analysis for: runtime.handoff, result:  &{[] [[0]] [[0]]}
finish analysis for: (*runtime.gcWork).balance, result:  &{[0] [] []}
finish analysis for: (*runtime.gcWork).tryGetFast, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.gcWork).tryGet, result:  &{[0] [[0]] []}
finish analysis for: runtime.gcDrain, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.gcDrainMarkWorkerFractional, result:  &{[] [] [[0]]}
finish analysis for: reflect.MapOf$1, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.reflect_mapiterelem, result:  &{[] [[0]] [[0]]}
finish analysis for: (*syscall.Msghdr).SetControllen, result:  &{[0 1] [] [[1]]}
finish analysis for: (*internal/abi.MapType).IndirectElem, result:  &{[0] [[0]] []}
finish analysis for: syscall.pipe, result:  &{[] [[]] [[0]]}
finish analysis for: syscall.Pipe, result:  &{[] [[]] [[0]]}
finish analysis for: internal/race.ReleaseMerge, result:  &{[] [] [[0]]}
finish analysis for: (*sync.RWMutex).rUnlockSlow, result:  &{[0] [] [[1]]}
finish analysis for: (*sync.RWMutex).RUnlock, result:  &{[0] [] []}
finish analysis for: os.Pipe, result:  &{[] [[] [] []] []}
finish analysis for: internal/testlog.Open, result:  &{[] [] [[0]]}
finish analysis for: os.OpenFile, result:  &{[] [[0 1] [0]] [[0] [1] [2]]}
finish analysis for: (*os/exec.Cmd).writerDescriptor, result:  &{[0] [[1] []] [[1]]}
end analysis for: syscall.libc_mlock_trampoline , result:  &{[] [] []}
finish analysis for: (*internal/abi.UncommonType).ExportedMethods, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.Type).ExportedMethods, result:  &{[0] [[0]] []}
finish analysis for: (*reflect.ptrType).ExportedMethods, result:  &{[0] [[0]] []}
finish analysis for: unicode.IsControl, result:  &{[] [[]] [[0]]}
finish analysis for: strings.indexFunc, result:  &{[] [[0]] [[0] [1] [2]]}
finish analysis for: strings.TrimLeftFunc, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: (runtime.traceWriter).writeProcStatusForP, result:  &{[0] [[0]] [[1] [2]]}
finish analysis for: runtime.traceAdvance$5, result:  &{[] [] [[0]]}
finish analysis for: runtime.racegostart, result:  &{[] [[]] [[0]]}
finish analysis for: (runtime.traceLocker).OneNewExtraM, result:  &{[0] [] [[1]]}
finish analysis for: runtime.allgadd, result:  &{[] [] [[0]]}
finish analysis for: (*runtime/internal/atomic.Uintptr).CompareAndSwap, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: runtime.osyield_no_g, result:  &{[] [] []}
finish analysis for: runtime.lockextra, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.unlockextra, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.addExtraM, result:  &{[] [] [[0]]}
finish analysis for: runtime.oneNewExtraM, result:  &{[] [] []}
finish analysis for: runtime.newextram, result:  &{[] [] []}
finish analysis for: runtime.sellock, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.selunlock, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.selectgo$1, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.raceWriteObjectPC, result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: runtime.raceReadObjectPC, result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: runtime.msanread, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.asanread, result:  &{[] [] [[0] [1]]}
finish analysis for: (*runtime.waitq).dequeueSudoG, result:  &{[0 1] [] [[1]]}
finish analysis for: (*runtime.waitq).enqueue, result:  &{[0 1] [] [[0 1]]}
finish analysis for: runtime.racereadpc, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: (*runtime.waitq).dequeue, result:  &{[0] [[0]] []}
finish analysis for: runtime.chanbuf, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.racereleaseacquireg, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.racereleaseacquire, result:  &{[] [] [[0]]}
finish analysis for: runtime.raceacquireg, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.racereleaseg, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.racenotify, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: (*runtime.mspan).typePointersOfType, result:  &{[0] [[1 2]] [[1] [2]]}
finish analysis for: runtime.doubleCheckTypePointersOfType, result:  &{[] [] [[0 1 2 3] [0 1 2 3] [0 1 2 3] [0 1 2 3]]}
finish analysis for: (*runtime.wbBuf).get1, result:  &{[0] [[0]] []}
finish analysis for: runtime.bulkBarrierBitmap, result:  &{[] [] [[0] [1] [2] [3] [4]]}
finish analysis for: runtime.bulkBarrierPreWrite, result:  &{[] [] [[0 2 3] [1] [0 2 3] [0 2 3]]}
finish analysis for: runtime.cgoCheckBits, result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: runtime.cgoCheckTypedBlock, result:  &{[] [] [[0] [1] [2] [0 2 3]]}
finish analysis for: runtime.cgoCheckMemmove2, result:  &{[] [] [[0] [1] [2] [3] [0 3 4]]}
finish analysis for: runtime.typedmemmove, result:  &{[] [] [[0 1] [0 1] [2]]}
finish analysis for: runtime.racesync, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.typeBitsBulkBarrier, result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: runtime.sendDirect, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: runtime.send, result:  &{[] [] [[0] [1] [2] [3] [4]]}
finish analysis for: runtime.typedmemclr, result:  &{[] [] [[0 1] [0 1]]}
finish analysis for: runtime.recvDirect, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: runtime.recv, result:  &{[] [] [[0 2] [1] [0 2] [3] [4]]}
finish analysis for: (*runtime.hchan).sortkey, result:  &{[0] [[0]] []}
finish analysis for: runtime.selectgo, result:  &{[] [[1] []] [[0] [1] [2] [3] [4] [5]]}
finish analysis for: (*io.onceError).Load, result:  &{[0] [[0]] []}
finish analysis for: (*io.pipe).readCloseError, result:  &{[0] [[0]] []}
finish analysis for: (*io.pipe).read, result:  &{[0] [[] [0]] [[1]]}
finish analysis for: (*io.PipeReader).read, result:  &{[0] [[] [0]] [[1]]}
finish analysis for: runtime.sigaddset, result:  &{[] [] [[0 1] [1]]}
finish analysis for: runtime.unblocksig, result:  &{[] [] [[0]]}
finish analysis for: (*bytes.Buffer).UnreadRune, result:  &{[0] [[]] []}
finish analysis for: (*fmt.ss).UnreadRune, result:  &{[0] [[]] []}
finish analysis for: (*internal/fmtsort.SortedMap).Swap, result:  &{[0] [] [[1] [2]]}
finish analysis for: (sort.reverse).Swap, result:  &{[0] [] [[1] [2]]}
finish analysis for: (io/fs.FileMode).IsDir, result:  &{[0] [[0]] []}
finish analysis for: (*os.fileStat).IsDir, result:  &{[0] [[0]] []}
finish analysis for: os.Open, result:  &{[] [[0] [0]] [[0]]}
finish analysis for: sort.stringsImpl, result:  &{[] [] [[0]]}
finish analysis for: sort.Strings, result:  &{[] [] [[0]]}
finish analysis for: path/filepath.scanChunk, result:  &{[] [[] [0] [0]] [[0]]}
finish analysis for: unicode/utf8.DecodeRuneInString, result:  &{[] [[0] []] [[0]]}
finish analysis for: path/filepath.getEsc, result:  &{[] [[0] [0] []] [[0]]}
finish analysis for: path/filepath.matchChunk, result:  &{[] [[1] [] []] [[0] [1]]}
finish analysis for: strings.IndexByte, result:  &{[] [[]] [[0] [1]]}
finish analysis for: internal/bytealg.Cutover, result:  &{[] [[0]] [[0]]}
finish analysis for: strings.Index, result:  &{[] [[]] [[0] [1]]}
finish analysis for: strings.Contains, result:  &{[] [[]] [[0] [1]]}
finish analysis for: path/filepath.Match, result:  &{[] [[] []] [[0] [1]]}
finish analysis for: strings.noescape, result:  &{[] [[0]] [[0]]}
finish analysis for: (*strings.Builder).copyCheck, result:  &{[0] [] []}
finish analysis for: (*strings.Builder).grow, result:  &{[0] [] [[1]]}
finish analysis for: (*strings.Builder).Grow, result:  &{[0] [] [[1]]}
finish analysis for: (*strings.Builder).WriteString, result:  &{[0 1] [[] []] [[0 1]]}
finish analysis for: (*strings.Builder).String, result:  &{[0] [[]] []}
finish analysis for: strings.Join, result:  &{[] [[0 1]] [[0 1] [0 1]]}
finish analysis for: path/filepath.volumeNameLen, result:  &{[] [[]] [[0]]}
finish analysis for: os.IsPathSeparator, result:  &{[] [[0]] [[0]]}
finish analysis for: (*path/filepath.lazybuf).append, result:  &{[0 1] [] [[1]]}
finish analysis for: path/filepath.postClean, result:  &{[] [] [[0]]}
finish analysis for: (*path/filepath.lazybuf).string, result:  &{[0] [[0]] []}
finish analysis for: unicode/utf8.RuneCountInString, result:  &{[] [[]] [[0]]}
finish analysis for: strings.Count, result:  &{[] [[]] [[0] [1]]}
finish analysis for: strings.Replace, result:  &{[] [[0 2]] [[0 2] [1] [0 2] [3]]}
finish analysis for: strings.ReplaceAll, result:  &{[] [[0 2]] [[0 2] [1] [0 2]]}
finish analysis for: path/filepath.FromSlash, result:  &{[] [[0]] [[0]]}
finish analysis for: (*path/filepath.lazybuf).index, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: path/filepath.Clean, result:  &{[] [[0]] [[0]]}
finish analysis for: path/filepath.join, result:  &{[] [[0]] [[0]]}
finish analysis for: path/filepath.Join, result:  &{[] [[0]] [[0]]}
finish analysis for: path/filepath.glob, result:  &{[] [[0 2] []] [[0] [1] [0 2]]}
finish analysis for: (*fmt.buffer).writeString, result:  &{[0 1] [] [[0 1]]}
finish analysis for: fmt.tooLarge, result:  &{[] [[0]] [[0]]}
finish analysis for: fmt.parsenum, result:  &{[] [[0 1] [] [1 2]] [[0] [1] [2]]}
finish analysis for: fmt.parseArgNumber, result:  &{[] [[0] [] []] [[0]]}
finish analysis for: (*fmt.pp).argNumber, result:  &{[0] [[1 2] [3] []] [[1] [2] [3] [4]]}
finish analysis for: (*internal/abi.Type).IfaceIndir, result:  &{[0] [[0]] []}
finish analysis for: reflect.unpackEface, result:  &{[] [[0]] [[0]]}
finish analysis for: reflect.ValueOf, result:  &{[] [[0]] [[0]]}
finish analysis for: (reflect.Value).Kind, result:  &{[0] [[0]] []}
finish analysis for: (reflect.Value).Uint, result:  &{[0] [[0]] []}
finish analysis for: (reflect.Value).Int, result:  &{[0] [[0]] []}
finish analysis for: fmt.intFromArg, result:  &{[] [[0] [] [1]] [[0] [1]]}
finish analysis for: unicode/utf8.appendRuneNonASCII, result:  &{[] [[0 1]] [[0 1] [1]]}
finish analysis for: unicode/utf8.AppendRune, result:  &{[] [[0 1]] [[0 1] [1]]}
finish analysis for: (*fmt.buffer).writeRune, result:  &{[0 1] [] [[1]]}
finish analysis for: (*fmt.buffer).writeByte, result:  &{[0 1] [] [[1]]}
finish analysis for: (reflect.Value).IsValid, result:  &{[0] [[0]] []}
finish analysis for: reflect.noescape, result:  &{[] [[0]] [[0]]}
finish analysis for: (reflect.Value).typ, result:  &{[0] [[0]] []}
finish analysis for: reflect.toRType, result:  &{[] [[0]] [[0]]}
finish analysis for: (*reflect.rtype).typeOff, result:  &{[0] [[]] [[1]]}
finish analysis for: reflect.typeOffFor, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (reflect.Value).typeSlow, result:  &{[0] [[0]] []}
finish analysis for: (reflect.Value).Type, result:  &{[0] [[0]] []}
finish analysis for: (*reflect.rtype).nameOff, result:  &{[0] [[]] [[1]]}
finish analysis for: (*reflect.rtype).String, result:  &{[0] [[]] []}
finish analysis for: (reflect.Value).CanInterface, result:  &{[0] [[0]] []}
finish analysis for: reflect.methodValueCallCodePtr, result:  &{[] [[]] []}
finish analysis for: (*sync.Map).loadReadOnly, result:  &{[0] [[]] []}
finish analysis for: (*sync.Map).missLocked, result:  &{[0] [] []}
finish analysis for: (*sync.entry).load, result:  &{[0] [[] []] []}
finish analysis for: (*sync.Map).Load, result:  &{[0] [[] []] [[1]]}
finish analysis for: reflect.ifaceIndir, result:  &{[] [[0]] [[0]]}
finish analysis for: (*internal/abi.Type).Pointers, result:  &{[0] [[0]] []}
finish analysis for: (*reflect.abiSeq).assignIntN, result:  &{[0 1 2] [[]] [[1] [2] [3] [4]]}
finish analysis for: reflect.align, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*reflect.abiSeq).stackAssign, result:  &{[0 1 2] [] [[1] [2]]}
finish analysis for: (*reflect.abiSeq).addRcvr, result:  &{[0] [[0] []] [[1]]}
finish analysis for: (*reflect.bitVector).append, result:  &{[0 1] [] [[1]]}
finish analysis for: (*internal/abi.Type).Size, result:  &{[0] [[0]] []}
finish analysis for: (*reflect.abiSeq).assignFloatN, result:  &{[0 1 2] [[]] [[1] [2] [3]]}
finish analysis for: (*reflect.abiSeq).regAssign, result:  &{[0 1 2] [[]] [[1] [2]]}
finish analysis for: (*internal/abi.Type).Align, result:  &{[0] [[0]] []}
finish analysis for: (*reflect.abiSeq).addArg, result:  &{[0 1] [[0 1]] [[1]]}
finish analysis for: (*reflect.abiSeq).stepsForValue, result:  &{[0] [[0]] [[1]]}
finish analysis for: (*internal/abi.IntArgRegBitmap).Set, result:  &{[0 1] [] [[1]]}
finish analysis for: reflect.addTypeBits, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: reflect.newAbiDesc, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: reflect.stringFor, result:  &{[] [[]] [[0]]}
finish analysis for: internal/abi.writeVarint, result:  &{[] [[]] [[0 1] [1]]}
finish analysis for: internal/abi.NewName, result:  &{[] [[]] [[0] [1] [2] [3]]}
finish analysis for: reflect.newName, result:  &{[] [[]] [[0] [1] [2] [3]]}
finish analysis for: reflect.resolveReflectName, result:  &{[] [[]] [[0]]}
finish analysis for: (*sync.entry).tryLoadOrStore, result:  &{[0] [[1] [] []] [[1]]}
finish analysis for: (*sync.entry).tryExpungeLocked, result:  &{[0] [[]] []}
finish analysis for: (*sync.Map).dirtyLocked, result:  &{[0] [] []}
finish analysis for: sync.newEntry, result:  &{[] [[]] [[0]]}
finish analysis for: (*sync.entry).unexpungeLocked, result:  &{[0] [[]] []}
finish analysis for: (*sync.Map).LoadOrStore, result:  &{[0] [[2] []] [[1] [2]]}
finish analysis for: reflect.funcLayout, result:  &{[] [[0] [0] [0]] [[0] [0 1]]}
finish analysis for: reflect.nameOffFor, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*reflect.rtype).textOff, result:  &{[0] [[]] [[1]]}
finish analysis for: reflect.textOffFor, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*reflect.interfaceType).nameOff, result:  &{[0] [[]] [[1]]}
finish analysis for: (*reflect.interfaceType).typeOff, result:  &{[0] [[]] [[1]]}
finish analysis for: reflect.methodReceiver, result:  &{[] [[1] [] [1]] [[0] [1] [2]]}
finish analysis for: (*internal/abi.Type).Common, result:  &{[0] [[0]] []}
finish analysis for: reflect.makeMethodValue, result:  &{[] [[1]] [[0] [1]]}
finish analysis for: reflect.packEface, result:  &{[] [[0]] [[0]]}
finish analysis for: (*reflect.rtype).Kind, result:  &{[0] [[0]] []}
finish analysis for: (*reflect.rtype).uncommon, result:  &{[0] [[0]] []}
finish analysis for: (*reflect.rtype).exportedMethods, result:  &{[0] [[0]] []}
finish analysis for: (*reflect.interfaceType).NumMethod, result:  &{[0] [[]] []}
finish analysis for: (*reflect.rtype).NumMethod, result:  &{[0] [[]] []}
finish analysis for: (reflect.Value).NumMethod, result:  &{[0] [[]] []}
finish analysis for: reflect.valueInterface, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: (reflect.Value).Interface, result:  &{[0] [[0]] []}
finish analysis for: (*fmt.pp).unknownType, result:  &{[0] [] [[1]]}
finish analysis for: (reflect.Value).pointer, result:  &{[0] [[0]] []}
finish analysis for: (reflect.Value).UnsafePointer, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.InterfaceType).NumMethod, result:  &{[0] [[]] []}
finish analysis for: (*internal/abi.Type).NumMethod, result:  &{[0] [[]] []}
finish analysis for: (reflect.flag).ro, result:  &{[0] [[]] []}
finish analysis for: (reflect.Value).Elem, result:  &{[0] [[0]] []}
finish analysis for: strconv.bsearch32, result:  &{[] [[]] [[0] [1]]}
finish analysis for: strconv.bsearch16, result:  &{[] [[]] [[0] [1]]}
finish analysis for: strconv.IsPrint, result:  &{[] [[0]] [[0]]}
finish analysis for: unicode/utf8.RuneLen, result:  &{[] [[]] [[0]]}
finish analysis for: unicode/utf8.EncodeRune, result:  &{[] [[]] [[0 1] [1]]}
finish analysis for: unicode/utf8.RuneCount, result:  &{[] [[]] [[0]]}
finish analysis for: (*fmt.fmt).writePadding, result:  &{[0] [] [[1]]}
finish analysis for: (*fmt.buffer).write, result:  &{[0 1] [] [[0 1]]}
finish analysis for: (*fmt.fmt).pad, result:  &{[0 1] [] [[0 1]]}
finish analysis for: (*fmt.fmt).fmtUnicode, result:  &{[0 1] [] [[1]]}
finish analysis for: unicode/utf8.ValidRune, result:  &{[] [[]] [[0]]}
finish analysis for: strconv.isInGraphicList, result:  &{[] [[0]] [[0]]}
finish analysis for: strconv.appendEscapedRune, result:  &{[] [[0 1]] [[0 1] [1] [2] [3] [4]]}
finish analysis for: strconv.appendQuotedRuneWith, result:  &{[] [[0 1 2]] [[0 2] [1] [2] [3] [4]]}
finish analysis for: strconv.AppendQuoteRune, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: strconv.AppendQuoteRuneToASCII, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*fmt.fmt).fmtQc, result:  &{[0 1] [] [[1]]}
finish analysis for: (*fmt.fmt).fmtC, result:  &{[0 1] [] [[1]]}
finish analysis for: (*fmt.fmt).fmtInteger, result:  &{[0 1 5] [] [[1] [2] [3] [4] [5]]}
finish analysis for: (*fmt.pp).fmt0x64, result:  &{[0 1 2] [] [[1] [2]]}
finish analysis for: (*fmt.pp).fmtInteger, result:  &{[0 1] [] [[1] [2] [3]]}
finish analysis for: (*fmt.fmt).padString, result:  &{[0 1] [] [[0 1]]}
finish analysis for: (*fmt.pp).fmtPointer, result:  &{[0 1] [] [[1] [2]]}
finish analysis for: reflect.elem, result:  &{[] [[0]] [[0]]}
finish analysis for: reflect.toType, result:  &{[] [[0]] [[0]]}
finish analysis for: (*reflect.rtype).Elem, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.Type).Len, result:  &{[0] [[0]] []}
finish analysis for: (reflect.Value).lenNonSlice, result:  &{[0] [[0]] []}
finish analysis for: (reflect.Value).Len, result:  &{[0] [[0]] []}
finish analysis for: reflect.add, result:  &{[] [[0 1]] [[0] [1] [2]]}
finish analysis for: reflect.arrayAt, result:  &{[] [[0 1 2]] [[0] [1] [2] [3]]}
finish analysis for: (reflect.Value).Index, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (reflect.Value).IsNil, result:  &{[0] [[0]] []}
finish analysis for: (reflect.Value).CanAddr, result:  &{[0] [[0]] []}
finish analysis for: (reflect.Value).bytesSlow, result:  &{[0] [[0]] []}
finish analysis for: (reflect.Value).Bytes, result:  &{[0] [[0]] []}
finish analysis for: (*fmt.fmt).truncateString, result:  &{[0] [[1]] [[1]]}
finish analysis for: strconv.CanBackquote, result:  &{[] [[]] [[0]]}
finish analysis for: strconv.appendQuotedWith, result:  &{[] [[0 1 2]] [[0] [1] [2] [3] [4]]}
finish analysis for: strconv.AppendQuote, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: strconv.AppendQuoteToASCII, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*fmt.fmt).fmtQ, result:  &{[0 1] [] [[1]]}
finish analysis for: (*fmt.fmt).fmtSbx, result:  &{[0 1 2 3] [] [[1] [2] [3]]}
finish analysis for: (*fmt.fmt).fmtBx, result:  &{[0 1 2] [] [[1] [2]]}
finish analysis for: unicode/utf8.DecodeRune, result:  &{[] [[0] []] [[0]]}
finish analysis for: (*fmt.fmt).truncate, result:  &{[0] [[1]] [[1]]}
finish analysis for: (*fmt.fmt).fmtBs, result:  &{[0 1] [] [[1]]}
finish analysis for: (*fmt.pp).fmtBytes, result:  &{[0 1 3] [] [[1] [2] [0 1 3]]}
finish analysis for: (reflect.Value).NumField, result:  &{[0] [[]] []}
finish analysis for: (*internal/abi.StructField).Embedded, result:  &{[0] [[0]] []}
finish analysis for: (*reflect.structType).Field, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (*reflect.rtype).Field, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (reflect.Value).Field, result:  &{[0] [[0]] [[1]]}
finish analysis for: fmt.getField, result:  &{[] [[0]] [[0] [0 1]]}
finish analysis for: (reflect.flag).panicNotMap, result:  &{[0] [] []}
finish analysis for: (reflect.Value).MapRange, result:  &{[0] [[0]] []}
finish analysis for: (*reflect.hiter).initialized, result:  &{[0] [[0]] []}
finish analysis for: (*reflect.MapIter).Next, result:  &{[0] [[]] []}
finish analysis for: (sort.reverse).Len, result:  &{[0] [[]] []}
finish analysis for: sort.isNaN, result:  &{[] [[0]] [[0]]}
finish analysis for: (sort.Float64Slice).Less, result:  &{[0] [[0]] [[1] [2]]}
finish analysis for: (*sort.Float64Slice).Less, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: sort.insertionSort, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: sort.swapRange, result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: sort.rotate, result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: sort.symMerge, result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: sort.stable, result:  &{[] [] [[0] [1]]}
finish analysis for: sort.Stable, result:  &{[] [] [[0]]}
finish analysis for: reflect.copyVal, result:  &{[] [[0 1 2]] [[0] [1] [2]]}
finish analysis for: (*reflect.MapIter).Key, result:  &{[0] [[0]] []}
finish analysis for: (*reflect.MapIter).Value, result:  &{[0] [[0]] []}
finish analysis for: internal/fmtsort.Sort, result:  &{[] [[0]] [[0]]}
finish analysis for: (reflect.Value).stringNonString, result:  &{[0] [[]] []}
finish analysis for: (reflect.Value).String, result:  &{[0] [[0]] []}
finish analysis for: (*fmt.fmt).fmtSx, result:  &{[0 1 2] [] [[1] [2]]}
finish analysis for: (*fmt.fmt).fmtS, result:  &{[0 1] [] [[1]]}
finish analysis for: (*fmt.pp).fmtString, result:  &{[0 1] [] [[1] [2]]}
finish analysis for: (reflect.Value).Complex, result:  &{[0] [[0]] []}
finish analysis for: math.Float64bits, result:  &{[] [[0]] [[0]]}
finish analysis for: math.Float32bits, result:  &{[] [[0]] [[0]]}
finish analysis for: strconv.trim, result:  &{[] [] [[0]]}
finish analysis for: (*strconv.decimal).Assign, result:  &{[0 1] [] [[1]]}
finish analysis for: strconv.rightShift, result:  &{[] [] [[0 1] [1]]}
finish analysis for: strconv.prefixIsLessThan, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: strconv.leftShift, result:  &{[] [] [[0 1] [1]]}
finish analysis for: (*strconv.decimal).Shift, result:  &{[0 1] [] [[1]]}
finish analysis for: strconv.shouldRoundUp, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: (*strconv.decimal).RoundDown, result:  &{[0 1] [] [[1]]}
finish analysis for: (*strconv.decimal).RoundUp, result:  &{[0 1] [] [[1]]}
finish analysis for: (*strconv.decimal).Round, result:  &{[0 1] [] [[1]]}
finish analysis for: strconv.roundShortest, result:  &{[] [] [[0 1 2 3] [1] [2] [3]]}
finish analysis for: strconv.fmtF, result:  &{[] [[0 2]] [[0] [1] [2] [3]]}
finish analysis for: strconv.fmtE, result:  &{[] [[0 2 4]] [[0] [1] [2] [3] [4]]}
finish analysis for: strconv.formatDigits, result:  &{[] [[0 3 5]] [[0 5] [1] [2] [3] [4] [5]]}
finish analysis for: strconv.bigFtoa, result:  &{[] [[0 1 2 4 5 6]] [[0 2] [1] [2] [3] [4] [5] [6]]}
finish analysis for: math/bits.Len64, result:  &{[] [[0]] [[0]]}
finish analysis for: strconv.mulByLog2Log10, result:  &{[] [[0]] [[0]]}
finish analysis for: strconv.mulByLog10Log2, result:  &{[] [[0]] [[0]]}
finish analysis for: math/bits.Mul64, result:  &{[] [[0 1] [0 1]] [[0] [1]]}
finish analysis for: math/bits.Add64, result:  &{[] [[0 1 2] [0 1 2]] [[0] [1] [2]]}
finish analysis for: strconv.mult128bitPow10, result:  &{[] [[0] [1 2] [0]] [[0] [1] [2]]}
finish analysis for: strconv.divisibleByPower5, result:  &{[] [[]] [[0] [1]]}
finish analysis for: strconv.formatDecimal, result:  &{[] [] [[0 1 4] [1] [2] [3] [4]]}
finish analysis for: strconv.ryuFtoaFixed64, result:  &{[] [] [[0 1 2 3] [1] [2] [3]]}
finish analysis for: math/bits.Len32, result:  &{[] [[0]] [[0]]}
finish analysis for: strconv.mult64bitPow10, result:  &{[] [[0] [1 2] [0]] [[0] [1] [2]]}
finish analysis for: strconv.ryuFtoaFixed32, result:  &{[] [] [[0 1 2 3] [1] [2] [3]]}
finish analysis for: math/bits.TrailingZeros64, result:  &{[] [[]] [[0]]}
finish analysis for: strconv.computeBounds, result:  &{[] [[0] [0] [0] [1]] [[0] [1] [2]]}
finish analysis for: strconv.divmod1e9, result:  &{[] [[0] [0]] [[0]]}
finish analysis for: strconv.ryuDigits32, result:  &{[] [] [[0 2 6] [1] [2] [3] [4] [5] [6]]}
finish analysis for: strconv.ryuDigits, result:  &{[] [] [[0 2] [1] [2] [3] [4] [5]]}
finish analysis for: strconv.ryuFtoaShortest, result:  &{[] [] [[0 1 2] [1] [2] [3]]}
finish analysis for: strconv.lower, result:  &{[] [[0]] [[0]]}
finish analysis for: strconv.fmtX, result:  &{[] [[0 1 2 4 5 6]] [[0] [1] [2] [3] [4] [5] [6]]}
finish analysis for: strconv.isPowerOfTwo, result:  &{[] [[0]] [[0]]}
finish analysis for: math/bits.TrailingZeros32, result:  &{[] [[]] [[0]]}
finish analysis for: math/bits.TrailingZeros, result:  &{[] [[]] [[0]]}
finish analysis for: strconv.formatBits, result:  &{[] [[0 1 2] [1 2]] [[0 1 2] [1] [2] [3] [4]]}
finish analysis for: strconv.fmtB, result:  &{[] [[0 2 3 4]] [[0] [1] [2] [3] [4]]}
finish analysis for: strconv.genericFtoa, result:  &{[] [[0 1 2 3]] [[0 2] [1] [2] [3] [4]]}
finish analysis for: strconv.AppendFloat, result:  &{[] [[0 1 2 3]] [[0 2] [1] [2] [3] [4]]}
finish analysis for: (*fmt.fmt).fmtFloat, result:  &{[0 1 3 4] [] [[1] [2] [3] [4]]}
finish analysis for: (*fmt.pp).fmtFloat, result:  &{[0 1 3] [] [[1] [2] [3]]}
finish analysis for: (*fmt.pp).fmtComplex, result:  &{[0 3] [] [[1] [2] [3]]}
finish analysis for: (reflect.Value).Float, result:  &{[0] [[0]] []}
finish analysis for: (reflect.Value).panicNotBool, result:  &{[0] [] []}
finish analysis for: (reflect.Value).Bool, result:  &{[0] [[0]] []}
finish analysis for: (*fmt.fmt).fmtBoolean, result:  &{[0] [] [[1]]}
finish analysis for: (*fmt.pp).fmtBool, result:  &{[0] [] [[1] [2]]}
finish analysis for: (*fmt.pp).printValue, result:  &{[0 1 2] [] [[1] [2] [3]]}
finish analysis for: reflect.TypeOf, result:  &{[] [[0]] [[0]]}
finish analysis for: (*fmt.pp).badVerb, result:  &{[0 1] [] [[1]]}
finish analysis for: (*runtime.waitReason).String, result:  &{[0] [[]] []}
finish analysis for: (*os.SyscallError).Error, result:  &{[0] [[0]] []}
finish analysis for: (*time.Location).get, result:  &{[0] [[0]] []}
finish analysis for: (*time.Time).sec, result:  &{[0] [[0]] []}
finish analysis for: (*time.Time).unixSec, result:  &{[0] [[0]] []}
finish analysis for: time.tzsetName, result:  &{[] [[0] [0] []] [[0]]}
finish analysis for: time.tzsetNum, result:  &{[] [[0] [0] []] [[0] [1] [2]]}
finish analysis for: time.tzsetOffset, result:  &{[] [[0] [0] []] [[0]]}
finish analysis for: time.tzsetRule, result:  &{[] [[0] [0] []] [[0]]}
finish analysis for: time.isLeap, result:  &{[] [[0]] [[0]]}
finish analysis for: time.absDate, result:  &{[] [[0] [0] [0] [0]] [[0] [1]]}
finish analysis for: time.daysSinceEpoch, result:  &{[] [[0]] [[0]]}
finish analysis for: time.daysIn, result:  &{[] [[]] [[0] [1]]}
finish analysis for: time.tzruleTime, result:  &{[] [[0 1 2]] [[0] [1] [2]]}
finish analysis for: time.tzset, result:  &{[] [[0] [0] [0 1 2] [0 2] [] []] [[0] [1] [2]]}
finish analysis for: (*time.Location).firstZoneUsed, result:  &{[0] [[]] []}
finish analysis for: (*time.Location).lookupFirstZone, result:  &{[0] [[0]] []}
finish analysis for: (*time.Location).lookup, result:  &{[0] [[0] [0] [0 1] [0 1] [0]] [[1]]}
finish analysis for: (time.Time).abs, result:  &{[0] [[0]] []}
finish analysis for: time.absClock, result:  &{[] [[0] [0] [0]] [[0]]}
finish analysis for: time.appendInt$1, result:  &{[] [[0]] [[0]]}
finish analysis for: time.appendInt, result:  &{[] [[0 1]] [[0] [1] [2]]}
finish analysis for: (*time.Time).nsec, result:  &{[0] [[0]] []}
finish analysis for: (time.Time).Nanosecond, result:  &{[0] [[0]] []}
finish analysis for: (time.Time).Location, result:  &{[0] [[0]] []}
finish analysis for: time.quote, result:  &{[] [[0]] [[0]]}
finish analysis for: (time.Time).GoString, result:  &{[0] [[0]] []}
finish analysis for: (*fmt.pp).handleMethods, result:  &{[0 1] [[]] [[1]]}
finish analysis for: (*fmt.pp).printArg, result:  &{[0 1 2] [] [[1] [2]]}
finish analysis for: (*fmt.pp).missingArg, result:  &{[0 1] [] [[1]]}
finish analysis for: (*fmt.pp).badArgNum, result:  &{[0 1] [] [[1]]}
finish analysis for: (*fmt.pp).doPrintf, result:  &{[0 1 2] [] [[0 1 2] [2]]}
finish analysis for: runtime.reflect_typedmemclr, result:  &{[] [] [[0 1] [0 1]]}
finish analysis for: runtime.panicCheck1, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.goPanicSliceAcap, result:  &{[] [] [[0] [1]]}
end analysis for: runtime.sync_atomic_CompareAndSwapUintptr , result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: (reflect.flag).mustBeAssignableSlow, result:  &{[0] [] []}
finish analysis for: (reflect.flag).mustBeAssignable, result:  &{[0] [] []}
finish analysis for: (reflect.Value).grow, result:  &{[0] [] [[1]]}
finish analysis for: (reflect.Value).Grow, result:  &{[0] [] [[1]]}
finish analysis for: (*internal/abi.FuncType).Pointers, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.ChanType).Common, result:  &{[0] [[0]] []}
finish analysis for: (*bytes.Buffer).Len, result:  &{[0] [[0]] []}
finish analysis for: (*bytes.Buffer).Reset, result:  &{[0] [] []}
finish analysis for: (*bytes.Buffer).tryGrowByReslice, result:  &{[0] [[] []] [[1]]}
finish analysis for: bytes.growSlice, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: (*bytes.Buffer).grow, result:  &{[0] [[0]] [[1]]}
finish analysis for: (*internal/poll.fdMutex).rwlock, result:  &{[0] [[]] [[1]]}
finish analysis for: (*internal/poll.FD).readLock, result:  &{[0] [[]] []}
finish analysis for: internal/poll.convertErr, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*internal/poll.pollDesc).prepare, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: (*internal/poll.pollDesc).prepareRead, result:  &{[0] [[]] [[1]]}
finish analysis for: syscall.write, result:  &{[] [[] []] [[0] [1]]}
finish analysis for: internal/poll.ignoringEINTRIO, result:  &{[] [[] []] [[0] [1] [2]]}
finish analysis for: (*internal/poll.pollDesc).pollable, result:  &{[0] [[0]] []}
finish analysis for: (*internal/poll.pollDesc).wait, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: (*internal/poll.pollDesc).waitRead, result:  &{[0] [[]] [[1]]}
finish analysis for: (*internal/poll.FD).eofError, result:  &{[0] [[2]] [[1] [2]]}
finish analysis for: (*internal/poll.FD).Read, result:  &{[0] [[] []] [[1]]}
finish analysis for: (*bytes.Buffer).ReadFrom, result:  &{[0] [[] []] [[1]]}
finish analysis for: (*time.ParseError).Error, result:  &{[0] [[0]] []}
finish analysis for: runtime.float64NegInf, result:  &{[] [[]] []}
finish analysis for: (*runtime.sigctxt).set_sigcode, result:  &{[0 1] [] [[1]]}
finish analysis for: runtime.newproc, result:  &{[] [] [[0]]}
finish analysis for: (*os.fileWithoutReadFrom).close, result:  &{[0] [[0]] []}
finish analysis for: (time.Time).Compare, result:  &{[0] [[]] [[1]]}
finish analysis for: (*time.Time).Compare, result:  &{[0] [[]] [[1]]}
finish analysis for: (*os.File).checkValid, result:  &{[0] [[]] [[1]]}
finish analysis for: syscall.pwrite, result:  &{[] [[] []] [[0] [1] [2]]}
finish analysis for: internal/race.ReadRange, result:  &{[] [] [[0] [1]]}
finish analysis for: syscall.msanRead, result:  &{[] [] [[0] [1]]}
finish analysis for: syscall.asanRead, result:  &{[] [] [[0] [1]]}
finish analysis for: syscall.Pwrite, result:  &{[] [[] []] [[0] [1] [2]]}
finish analysis for: (*internal/poll.FD).Pwrite, result:  &{[0] [[] []] [[1] [2]]}
finish analysis for: (*os.File).pwrite, result:  &{[0] [[] []] [[1] [2]]}
finish analysis for: (internal/reflectlite.rtype).Comparable, result:  &{[0] [[0]] []}
finish analysis for: (*syscall.Errno).Is, result:  &{[0] [[]] [[1]]}
finish analysis for: (*errors.joinError).Unwrap, result:  &{[0] [[0]] []}
finish analysis for: (*os.SyscallError).Unwrap, result:  &{[0] [[0]] []}
finish analysis for: errors.is, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: errors.Is, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*os.File).wrapErr, result:  &{[0] [[0 1 2]] [[1] [2]]}
finish analysis for: (*os.File).WriteAt, result:  &{[0] [[] [0]] [[1] [2]]}
finish analysis for: (*os.fileWithoutReadFrom).WriteAt, result:  &{[0] [[] [0]] [[1] [2]]}
finish analysis for: (*io.OffsetWriter).WriteAt, result:  &{[0] [[] [0]] [[1] [2]]}
finish analysis for: time.goFunc, result:  &{[] [] [[0] [1]]}
finish analysis for: (io.nopCloserWriterTo).Close, result:  &{[0] [[]] []}
finish analysis for: (*io.nopCloserWriterTo).Close, result:  &{[0] [[]] []}
end analysis for: sync.throw , result:  &{[] [] [[0]]}
finish analysis for: (time.Time).locabs, result:  &{[0] [[0] [0] [0]] []}
finish analysis for: time.stdFracSecond, result:  &{[] [[0 1]] [[0] [1] [2]]}
finish analysis for: time.startsWithLowerCase, result:  &{[] [[0]] [[0]]}
finish analysis for: time.nextStdChunk, result:  &{[] [[0] [] [0]] [[0]]}
finish analysis for: time.digitsLen, result:  &{[] [[0]] [[0]]}
finish analysis for: time.separator, result:  &{[] [[]] [[0]]}
finish analysis for: time.appendNano, result:  &{[] [[0 1]] [[0] [1] [2]]}
finish analysis for: time.absWeekday, result:  &{[] [[0]] [[0]]}
finish analysis for: time.fmtInt, result:  &{[] [[]] [[0 1] [1]]}
finish analysis for: (time.Weekday).String, result:  &{[0] [[0]] []}
finish analysis for: (time.Month).String, result:  &{[0] [[0]] []}
finish analysis for: (time.Time).appendFormat, result:  &{[0] [[0 1 2]] [[1] [2]]}
finish analysis for: runtime.printanycustomtype, result:  &{[] [] [[0]]}
finish analysis for: runtime.printany, result:  &{[] [] [[0]]}
finish analysis for: runtime.printpanics, result:  &{[] [] [[0]]}
finish analysis for: sync.OnceFunc$1$1, result:  &{[] [] []}
finish analysis for: (time.Time).Zone, result:  &{[0] [[0] [0]] []}
finish analysis for: (time.Time).MarshalBinary, result:  &{[0] [[0] []] []}
finish analysis for: (*internal/abi.Type).ArrayType, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.InterfaceType).ArrayType, result:  &{[0] [[0]] []}
finish analysis for: syscall.setgroups, result:  &{[] [[]] [[0] [1]]}
end analysis for: sync/atomic.LoadInt64 , result:  &{[] [[]] [[0]]}
finish analysis for: (*runtime.gTraceState).acquireStatus, result:  &{[0] [[]] [[1]]}
finish analysis for: (*internal/abi.Type).MapType, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.StructType).MapType, result:  &{[0] [[0]] []}
finish analysis for: reflect.rtypeOff, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: reflect.typesByString, result:  &{[] [[]] [[0]]}
finish analysis for: reflect.fnv1, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*reflect.rtype).ptrTo, result:  &{[0] [[0]] []}
finish analysis for: reflect.ptrTo, result:  &{[] [[0]] [[0]]}
finish analysis for: (*internal/abi.Type).GcSlice, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: reflect.emitGCMask, result:  &{[] [] [[0 1 2] [1] [2] [3]]}
finish analysis for: reflect.bucketOf, result:  &{[] [[0 1]] [[0] [1]]}
end analysis for: syscall.libc_fchown_trampoline , result:  &{[] [] []}
finish analysis for: runtime.memclrHasPointers, result:  &{[] [] [[0 1] [0 1]]}
finish analysis for: (sort.StringSlice).Swap, result:  &{[0] [] [[1] [2]]}
finish analysis for: (*sort.StringSlice).Swap, result:  &{[0] [] [[1] [2]]}
finish analysis for: (runtime.offAddr).diff, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (runtime.addrRange).size, result:  &{[0] [[0]] []}
finish analysis for: runtime.makeAddrRange, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.newUserArenaChunk, result:  &{[] [[] []] []}
finish analysis for: (*runtime.userArena).refill, result:  &{[0] [[0]] []}
finish analysis for: os.Lchown, result:  &{[] [[0]] [[0] [1] [2]]}
finish analysis for: (time.Time).Equal, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (runtime.offAddr).lessEqual, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (runtime.addrRange).subtract, result:  &{[0 1] [[0 1]] [[1]]}
finish analysis for: runtime.sysMapOS, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.sysMap, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: runtime.madvise, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: runtime.sysUsedOS, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.sysUsed, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: (*runtime.scavengeIndex).sysGrow, result:  &{[0] [[0 1 2]] [[1] [2] [3]]}
finish analysis for: (syscall.WaitStatus).ExitStatus, result:  &{[0] [[0]] []}
finish analysis for: (*os.ProcessState).success, result:  &{[0] [[0]] []}
finish analysis for: (*os.ProcessState).Success, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.metricValue).float64HistOrInit, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: runtime.initMetrics$23, result:  &{[] [] [[0] [1]]}
finish analysis for: (os.noWriteTo).WriteTo, result:  &{[0] [[] []] [[1]]}
finish analysis for: (*os.noWriteTo).WriteTo, result:  &{[0] [[] []] [[1]]}
finish analysis for: (io.nopCloserWriterTo).WriteTo, result:  &{[0] [[] []] [[1]]}
finish analysis for: (reflect.flag).mustBeExportedSlow, result:  &{[0] [] []}
finish analysis for: (reflect.flag).mustBeExported, result:  &{[0] [] []}
finish analysis for: (*internal/abi.FuncType).NumIn, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.FuncType).In, result:  &{[0] [[0]] [[1]]}
finish analysis for: reflect.MakeSlice, result:  &{[] [[0 1 2]] [[0] [1] [2]]}
finish analysis for: (*internal/abi.Type).HasName, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.Type).ChanDir, result:  &{[0] [[0]] []}
finish analysis for: (*reflect.rtype).Name, result:  &{[0] [[]] []}
finish analysis for: reflect.nameFor, result:  &{[] [[]] [[0]]}
finish analysis for: (*reflect.rtype).PkgPath, result:  &{[0] [[]] []}
finish analysis for: reflect.pkgPathFor, result:  &{[] [[]] [[0]]}
finish analysis for: (*internal/abi.Type).Key, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.FuncType).Out, result:  &{[0] [[0]] [[1]]}
finish analysis for: reflect.haveIdenticalUnderlyingType, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: reflect.haveIdenticalType, result:  &{[] [[0 1]] [[0] [1] [2]]}
finish analysis for: reflect.specialChannelAssignability, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: reflect.directlyAssignable, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*internal/abi.UncommonType).Methods, result:  &{[0] [[0]] []}
finish analysis for: reflect.pkgPath, result:  &{[] [[]] [[0]]}
finish analysis for: reflect.implements, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*reflect.rtype).AssignableTo, result:  &{[0] [[]] [[1]]}
finish analysis for: (reflect.Value).assignTo, result:  &{[0] [[0 2 3]] [[0 1] [2] [3]]}
finish analysis for: (reflect.Value).Set, result:  &{[0 1] [] [[0 1]]}
finish analysis for: runtime.stopTheWorld, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.stopTheWorldGC, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.startTheWorld, result:  &{[] [] [[0]]}
finish analysis for: runtime.startTheWorldGC, result:  &{[] [] [[0]]}
finish analysis for: runtime.GOMAXPROCS, result:  &{[] [[]] [[0]]}
finish analysis for: sync.indexLocal, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*sync.Pool).pinSlow, result:  &{[0] [[0] []] []}
finish analysis for: (*sync.Pool).pin, result:  &{[0] [[0] []] []}
finish analysis for: (*sync/atomic.Uint64).Load, result:  &{[0] [[]] []}
finish analysis for: (*sync.poolDequeue).unpack, result:  &{[0] [[1] [1]] [[1]]}
finish analysis for: (*sync.poolDequeue).pack, result:  &{[0] [[1 2]] [[1] [2]]}
finish analysis for: (*sync/atomic.Uint64).CompareAndSwap, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: (*sync.poolDequeue).popHead, result:  &{[0] [[0] []] []}
finish analysis for: sync.loadPoolChainElt, result:  &{[] [[]] [[0]]}
finish analysis for: (*sync.poolChain).popHead, result:  &{[0] [[0] []] []}
finish analysis for: (*sync.poolDequeue).popTail, result:  &{[0] [[0] []] []}
finish analysis for: sync.storePoolChainElt, result:  &{[] [] [[0] [1]]}
finish analysis for: (*sync.poolChain).popTail, result:  &{[0] [[] []] []}
finish analysis for: (*sync.Pool).getSlow, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: sync.poolRaceAddr, result:  &{[] [[]] [[0]]}
finish analysis for: io.init$1, result:  &{[] [[]] []}
finish analysis for: (*sync.Pool).Get, result:  &{[0] [[0]] []}
finish analysis for: (*reflect.abiSeq).dump, result:  &{[0] [] []}
finish analysis for: (*internal/abi.IntArgRegBitmap).Get, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: reflect.dumpPtrBitMap, result:  &{[] [] [[0]]}
finish analysis for: (*reflect.abiDesc).dump, result:  &{[0] [] []}
finish analysis for: reflect.storeRcvr, result:  &{[] [] [[0] [0 1]]}
finish analysis for: (*internal/abi.RegArgs).Dump, result:  &{[0] [] []}
finish analysis for: (*runtime.gList).push, result:  &{[0 1] [] [[0 1]]}
finish analysis for: runtime.gcWaitOnMark, result:  &{[] [] [[0]]}
finish analysis for: (*runtime.activeSweep).isDone, result:  &{[0] [[]] []}
finish analysis for: runtime.isSweepDone, result:  &{[] [[]] []}
finish analysis for: runtime.mProf_PostSweep, result:  &{[] [] []}
finish analysis for: runtime.GC, result:  &{[] [] []}
finish analysis for: reflect.archFloat32FromReg, result:  &{[] [[0]] [[0]]}
finish analysis for: reflect.floatFromReg, result:  &{[] [] [[0] [1] [2] [0 3]]}
finish analysis for: (*internal/abi.RegArgs).IntRegArgAddr, result:  &{[0] [[0 2]] [[1] [2]]}
finish analysis for: reflect.intFromReg, result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: reflect.Zero, result:  &{[] [[0]] [[0]]}
finish analysis for: (*sync/atomic.Uint64).Add, result:  &{[0] [[]] [[1]]}
finish analysis for: (*sync.poolDequeue).pushHead, result:  &{[0 1] [[]] [[1]]}
finish analysis for: (*sync.poolChain).pushHead, result:  &{[0 1] [] [[1]]}
finish analysis for: (*sync.Pool).Put, result:  &{[0] [] [[1]]}
finish analysis for: reflect.archFloat32ToReg, result:  &{[] [[0]] [[0]]}
finish analysis for: reflect.floatToReg, result:  &{[] [] [[0 3] [1] [2] [3]]}
finish analysis for: reflect.intToReg, result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: (reflect.Value).call, result:  &{[0] [[0 2]] [[1] [2]]}
finish analysis for: (reflect.Value).CallSlice, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: runtime.syscall_rawSyscall6, result:  &{[] [[0 1 2 3 4 5 6] [0 1 2 3 4 5 6] [0 1 2 3 4 5 6]] [[0] [1] [2] [3] [4] [5] [6]]}
finish analysis for: (*runtime.m).becomeSpinning, result:  &{[0] [] []}
finish analysis for: syscall.socketpair, result:  &{[] [[]] [[0] [1] [2] [3]]}
finish analysis for: (*runtime.pollDesc).publishInfo, result:  &{[0] [] []}
finish analysis for: runtime.netpollunblock, result:  &{[] [[]] [[0] [1] [2] [3]]}
finish analysis for: runtime.netpollgoready, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.netpollAdjustWaiters, result:  &{[] [] [[0]]}
finish analysis for: runtime.netpolldeadlineimpl, result:  &{[] [] [[0] [1] [2] [3]]}
end analysis for: runtime/internal/atomic.LoadAcq64 , result:  &{[] [[]] [[0]]}
end analysis for: slices.EqualFunc , result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: runtime.Caller, result:  &{[] [[] [] [] []] [[0]]}
end analysis for: sync/atomic.SwapUintptr , result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*runtime.mspan).isUnusedUserArenaChunk, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.funcInfo).srcFunc, result:  &{[0] [[]] []}
finish analysis for: runtime/internal/sys.TrailingZeros8, result:  &{[] [[0]] [[0]]}
finish analysis for: (*runtime.bitvector).ptrbit, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: runtime.adjustpointers, result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: reflect.Swapper$1, result:  &{[] [] [[0] [1]]}
finish analysis for: (*reflect.ptrType).NumMethod, result:  &{[0] [[]] []}
finish analysis for: (*bytes.Buffer).empty, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.Name).HasTag, result:  &{[0] [[]] []}
finish analysis for: (reflect.Value).recv, result:  &{[0] [[0] []] [[1]]}
finish analysis for: (reflect.Value).TryRecv, result:  &{[0] [[0] []] []}
end analysis for: internal/bytealg.HashStrRev , result:  &{[] [[] []] [[0]]}
finish analysis for: strconv.small, result:  &{[] [[]] [[0]]}
finish analysis for: strconv.FormatInt, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: strconv.Itoa, result:  &{[] [[0]] [[0]]}
finish analysis for: (reflect.ChanDir).String, result:  &{[0] [[0]] []}
finish analysis for: (*reflect.ChanDir).String, result:  &{[0] [[]] []}
finish analysis for: (*reflect.Value).call, result:  &{[0] [[2]] [[1] [2]]}
finish analysis for: (*time.Time).stripMono, result:  &{[0] [] []}
finish analysis for: (*time.Time).setLoc, result:  &{[0 1] [] [[1]]}
finish analysis for: (*runtime.piController).reset, result:  &{[0] [] []}
end analysis for: internal/reflectlite.maplen , result:  &{[] [[]] [[0]]}
end analysis for: (*sync/atomic.Pointer[any]).CompareAndSwap[any] , result:  &{[0] [[]] [[1] [2]]}
finish analysis for: (*internal/abi.StructType).Pointers, result:  &{[0] [[0]] []}
finish analysis for: (internal/reflectlite.rtype).Key, result:  &{[0] [[0]] []}
finish analysis for: (*internal/reflectlite.rtype).Key, result:  &{[0] [[]] []}
finish analysis for: strings.longestCommonSuffix, result:  &{[] [[]] [[0] [1]]}
finish analysis for: strings.HasPrefix, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: strings.makeStringFinder, result:  &{[] [[0]] [[0]]}
finish analysis for: strings.makeSingleStringReplacer, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*os.File).writeTo, result:  &{[0] [[] [] []] [[1]]}
finish analysis for: (*os/exec.prefixSuffixSaver).fill, result:  &{[0] [[2]] [[1 2] [2]]}
finish analysis for: (*os/exec.prefixSuffixSaver).Write, result:  &{[0 1] [[] []] [[1]]}
finish analysis for: os.genericReadFrom, result:  &{[] [[] []] [[0] [1]]}
finish analysis for: (*os.File).ReadFrom, result:  &{[0] [[] [0]] [[1]]}
finish analysis for: io.copyBuffer, result:  &{[] [[] [0 2]] [[0 2] [1] [2]]}
finish analysis for: io.Copy, result:  &{[] [[] [0]] [[0] [1]]}
finish analysis for: os.genericWriteTo, result:  &{[] [[] [1]] [[0] [1]]}
finish analysis for: (*os.File).WriteTo, result:  &{[0] [[] [0 1]] [[1]]}
finish analysis for: (os.fileWithoutReadFrom).WriteTo, result:  &{[0] [[] [0 1]] [[1]]}
end analysis for: syscall.libc_issetugid_trampoline , result:  &{[] [] []}
finish analysis for: fmt.newScanState, result:  &{[] [[0 1 2] []] [[0] [1] [2]]}
finish analysis for: fmt.isSpace, result:  &{[] [[]] [[0]]}
finish analysis for: (*fmt.ss).errorString, result:  &{[0] [] [[1]]}
finish analysis for: (*bytes.Reader).ReadRune, result:  &{[0] [[0] [] []] []}
finish analysis for: (*fmt.ss).ReadRune, result:  &{[0] [[0] [] []] []}
finish analysis for: (*fmt.ss).error, result:  &{[0] [] [[1]]}
finish analysis for: (*fmt.ss).getRune, result:  &{[0] [[0]] []}
finish analysis for: (*fmt.ss).mustReadRune, result:  &{[0] [[0]] []}
finish analysis for: (*fmt.ss).advance, result:  &{[0] [[]] [[1]]}
finish analysis for: fmt.indexRune, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: (*fmt.ss).peek, result:  &{[0] [[1]] [[1]]}
finish analysis for: (*fmt.ss).SkipSpace, result:  &{[0] [] []}
finish analysis for: (*reflect.rtype).Bits, result:  &{[0] [[0]] []}
finish analysis for: (*fmt.ss).okVerb, result:  &{[0] [[]] [[1] [2] [3]]}
finish analysis for: (*fmt.ss).notEOF, result:  &{[0] [] []}
finish analysis for: (*fmt.ss).consume, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: (*fmt.ss).accept, result:  &{[0] [[]] [[1]]}
finish analysis for: (*fmt.ss).floatToken, result:  &{[0] [[0]] []}
finish analysis for: (*fmt.ss).complexTokens, result:  &{[0] [[0] [0]] []}
finish analysis for: fmt.hasX, result:  &{[] [[]] [[0]]}
finish analysis for: strconv.commonPrefixLenIgnoreCase, result:  &{[] [[]] [[0] [1]]}
finish analysis for: math.Float64frombits, result:  &{[] [[0]] [[0]]}
finish analysis for: math.NaN, result:  &{[] [[]] []}
finish analysis for: math.Inf, result:  &{[] [[]] [[0]]}
finish analysis for: strconv.special, result:  &{[] [[] [] []] [[0]]}
finish analysis for: strconv.underscoreOK, result:  &{[] [[]] [[0]]}
finish analysis for: strconv.readFloat, result:  &{[] [[0] [0] [] [] [] [] []] [[0]]}
finish analysis for: strconv.cloneString, result:  &{[] [[0]] [[0]]}
finish analysis for: strconv.syntaxError, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: strconv.atof64exact, result:  &{[] [[0] []] [[0] [1] [2]]}
finish analysis for: math/bits.LeadingZeros64, result:  &{[] [[0]] [[0]]}
finish analysis for: strconv.eiselLemire64, result:  &{[] [[0 1] []] [[0] [1] [2]]}
finish analysis for: (*strconv.decimal).set, result:  &{[0 1] [[]] [[1]]}
finish analysis for: (*strconv.decimal).RoundedInteger, result:  &{[0] [[0]] []}
finish analysis for: (*strconv.decimal).floatBits, result:  &{[0 1] [[0 1] []] [[1]]}
finish analysis for: strconv.rangeError, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: math.Float32frombits, result:  &{[] [[0]] [[0]]}
finish analysis for: strconv.atofHex, result:  &{[] [[1 2 3] [0]] [[0] [1] [2] [3] [4] [5]]}
finish analysis for: strconv.atof64, result:  &{[] [[0] [] [0]] [[0]]}
finish analysis for: strconv.atof32exact, result:  &{[] [[0] []] [[0] [1] [2]]}
finish analysis for: strconv.eiselLemire32, result:  &{[] [[0 1] []] [[0] [1] [2]]}
finish analysis for: strconv.atof32, result:  &{[] [[0] [] [0]] [[0]]}
finish analysis for: strconv.parseFloatPrefix, result:  &{[] [[0] [] [0]] [[0] [1]]}
finish analysis for: strconv.ParseFloat, result:  &{[] [[0] [0]] [[0] [1]]}
finish analysis for: strconv.baseError, result:  &{[] [[0 1 2]] [[0] [1] [2]]}
finish analysis for: strconv.bitSizeError, result:  &{[] [[0 1 2]] [[0] [1] [2]]}
finish analysis for: strconv.ParseUint, result:  &{[] [[0 1 2] [0 1 2]] [[0] [1] [2]]}
finish analysis for: strconv.ParseInt, result:  &{[] [[0 1 2] [0 1 2]] [[0] [1] [2]]}
finish analysis for: strconv.Atoi, result:  &{[] [[0] [0]] [[0]]}
finish analysis for: math.IsInf, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: math.IsNaN, result:  &{[] [[0]] [[0]]}
finish analysis for: math.Abs, result:  &{[] [[0]] [[0]]}
finish analysis for: math.normalize, result:  &{[] [[0] []] [[0]]}
finish analysis for: math.Copysign, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: math.ldexp, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: math.archLdexp, result:  &{[] [[]] [[0] [1]]}
finish analysis for: math.Ldexp, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*fmt.ss).convertFloat, result:  &{[0] [[1]] [[1] [2]]}
finish analysis for: (*fmt.ss).scanComplex, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: (reflect.Value).SetComplex, result:  &{[0 1] [] [[1]]}
finish analysis for: (reflect.Value).SetFloat, result:  &{[0 1] [] [[1]]}
finish analysis for: (*fmt.ss).token, result:  &{[0] [[0]] [[1] [2]]}
finish analysis for: fmt.hexDigit, result:  &{[] [[0] []] [[0]]}
finish analysis for: (*fmt.ss).hexByte, result:  &{[0] [[0] []] []}
finish analysis for: (*fmt.ss).hexString, result:  &{[0] [[0]] []}
finish analysis for: strconv.index, result:  &{[] [[]] [[0] [1]]}
finish analysis for: strconv.contains, result:  &{[] [[]] [[0] [1]]}
finish analysis for: unicode/utf8.ValidString, result:  &{[] [[]] [[0]]}
finish analysis for: strconv.unhex, result:  &{[] [[0] []] [[0]]}
finish analysis for: strconv.UnquoteChar, result:  &{[] [[0] [] [0] []] [[0] [1]]}
finish analysis for: strconv.unquote, result:  &{[] [[0] [0] []] [[0] [1]]}
finish analysis for: strconv.Unquote, result:  &{[] [[0] []] [[0]]}
finish analysis for: (*fmt.ss).quotedString, result:  &{[0] [[0]] []}
finish analysis for: (*fmt.ss).convertString, result:  &{[0] [[0]] [[1]]}
finish analysis for: (reflect.Value).SetUint, result:  &{[0 1] [] [[1]]}
finish analysis for: (reflect.Value).SetString, result:  &{[0 1] [] [[1]]}
finish analysis for: (*fmt.ss).getBase, result:  &{[0] [[] []] [[1]]}
finish analysis for: (*fmt.ss).scanBasePrefix, result:  &{[0] [[] [] []] []}
finish analysis for: (*fmt.ss).scanNumber, result:  &{[0] [[0]] [[1] [2]]}
finish analysis for: (*fmt.ss).scanRune, result:  &{[0] [[0]] [[1]]}
finish analysis for: (*fmt.ss).scanUint, result:  &{[0] [[0]] [[1] [2]]}
finish analysis for: (*fmt.ss).scanInt, result:  &{[0] [[0]] [[1] [2]]}
finish analysis for: (reflect.Value).SetInt, result:  &{[0 1] [] [[1]]}
finish analysis for: (*fmt.ss).scanBool, result:  &{[0] [[]] [[1]]}
finish analysis for: (reflect.Value).SetBool, result:  &{[0 1] [] [[1]]}
finish analysis for: (*fmt.ss).scanOne, result:  &{[0] [] [[1] [2]]}
finish analysis for: (*fmt.ss).scanPercent, result:  &{[0] [] []}
finish analysis for: (*fmt.ss).doScanf, result:  &{[0 1] [[] []] [[1] [2]]}
finish analysis for: (*fmt.ss).free, result:  &{[0 1] [] [[1]]}
finish analysis for: fmt.Fscanf, result:  &{[] [[] []] [[0] [1] [2]]}
finish analysis for: fmt.Sscanf, result:  &{[] [[] []] [[0] [1] [2]]}
finish analysis for: runtime.dwrite, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.dumpint, result:  &{[] [] [[0]]}
finish analysis for: runtime.dumpmemstats, result:  &{[] [] [[0]]}
finish analysis for: runtime.sysUnusedOS, result:  &{[] [] [[0] [1]]}
finish analysis for: syscall.ioctlPtr, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: syscall.CheckBpfVersion, result:  &{[] [[]] [[0]]}
finish analysis for: time.div, result:  &{[] [[0 1] [0 1]] [[0] [1]]}
finish analysis for: (*sync.RWMutex).RLocker, result:  &{[0] [[0]] []}
finish analysis for: (*reflect.ptrType).Key, result:  &{[0] [[0]] []}
finish analysis for: time.norm, result:  &{[] [[0 1 2] [1 2]] [[0] [1] [2]]}
finish analysis for: internal/bytealg.LastIndexByteString, result:  &{[] [[]] [[0] [1]]}
finish analysis for: os.prefixAndSuffix, result:  &{[] [[0] [0] []] [[0]]}
finish analysis for: (*runtime.MemProfileRecord).InUseObjects, result:  &{[0] [[0]] []}
finish analysis for: (*sort.reverse).Len, result:  &{[0] [[]] []}
finish analysis for: (*syscall.Timeval).Unix, result:  &{[0] [[0] [0]] []}
finish analysis for: os/exec.lookExtensions, result:  &{[] [[0] []] [[0] [1]]}
finish analysis for: runtime.startTemplateThread, result:  &{[] [] []}
finish analysis for: runtime.dolockOSThread, result:  &{[] [] []}
finish analysis for: runtime.LockOSThread, result:  &{[] [] []}
finish analysis for: runtime.blockableSig, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.ensureSigM$1, result:  &{[] [] []}
finish analysis for: runtime.metricsLock, result:  &{[] [] []}
finish analysis for: runtime.float64Inf, result:  &{[] [[]] []}
finish analysis for: runtime.timeHistogramMetricsBuckets, result:  &{[] [[]] []}
finish analysis for: runtime.makeStatDepSet, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.initMetrics, result:  &{[] [] []}
finish analysis for: runtime.metricsUnlock, result:  &{[] [] []}
finish analysis for: runtime.readMetricNames, result:  &{[] [[]] []}
finish analysis for: (time.Duration).Minutes, result:  &{[0] [[0]] []}
finish analysis for: runtime.reflect_chancap, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.crypto_x509_syscall, result:  &{[] [[0 1 2 3 4 5 6]] [[0] [1] [2] [3] [4] [5] [6]]}
finish analysis for: (runtime.liveUserArenaChunk).nextFreeIndex, result:  &{[0] [[0]] []}
finish analysis for: math.sqrt, result:  &{[] [[0]] [[0]]}
finish analysis for: math.Sqrt, result:  &{[] [[0]] [[0]]}
finish analysis for: math.modf, result:  &{[] [[0] [0]] [[0]]}
finish analysis for: math.Modf, result:  &{[] [[0] [0]] [[0]]}
finish analysis for: math.frexp, result:  &{[] [[0] [0]] [[0]]}
finish analysis for: math.archFrexp, result:  &{[] [[] []] [[0]]}
finish analysis for: math.Frexp, result:  &{[] [[0] [0]] [[0]]}
finish analysis for: math.log, result:  &{[] [[0]] [[0]]}
finish analysis for: math.archLog, result:  &{[] [[]] [[0]]}
finish analysis for: math.Log, result:  &{[] [[0]] [[0]]}
finish analysis for: math.expmulti, result:  &{[] [[0 1 2]] [[0] [1] [2]]}
finish analysis for: math.exp, result:  &{[] [[0]] [[0]]}
finish analysis for: math.Exp, result:  &{[] [[0]] [[0]]}
finish analysis for: math.Signbit, result:  &{[] [[0]] [[0]]}
finish analysis for: math.isOddInt, result:  &{[] [[0]] [[0]]}
finish analysis for: math.pow, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: math.archPow, result:  &{[] [[]] [[0] [1]]}
finish analysis for: math.Pow, result:  &{[] [[0 1]] [[0] [1]]}
end analysis for: syscall.libc_sendmsg_trampoline , result:  &{[] [] []}
finish analysis for: syscall.Truncate, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*reflect.rtype).Comparable, result:  &{[0] [[0]] []}
finish analysis for: runtime.nsToSec, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.initMetrics$4, result:  &{[] [] [[0] [0 1]]}
finish analysis for: (*runtime.traceBufQueue).pop, result:  &{[0] [[0]] []}
end analysis for: syscall.libc_sendfile_trampoline , result:  &{[] [] []}
finish analysis for: (reflect.Value).setRunes, result:  &{[0 1] [] [[1]]}
finish analysis for: (*os.fileWithoutWriteTo).readdir, result:  &{[0] [[] [0] [0] [0]] [[1] [2]]}
finish analysis for: (*internal/abi.InterfaceType).Size, result:  &{[0] [[0]] []}
end analysis for: syscall.libc_getppid_trampoline , result:  &{[] [] []}
finish analysis for: time.findZone, result:  &{[] [[]] [[0] [1] [2] [3]]}
finish analysis for: (*reflect.rtype).IsVariadic, result:  &{[0] [[0]] []}
finish analysis for: internal/abi.UseInterfaceSwitchCache, result:  &{[] [[]] [[0]]}
finish analysis for: (*runtime.traceBuf).varintAt, result:  &{[0 2] [] [[1] [2]]}
finish analysis for: (*runtime.traceBufQueue).push, result:  &{[0 1] [] [[1]]}
finish analysis for: runtime.traceBufFlush, result:  &{[] [] [[0] [1]]}
finish analysis for: (runtime.traceWriter).flush$1, result:  &{[] [] []}
finish analysis for: reflect.convertOp, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*reflect.rtype).ConvertibleTo, result:  &{[0] [[]] [[1]]}
finish analysis for: (*reflect.rtype).Len, result:  &{[0] [[0]] []}
finish analysis for: (reflect.Value).CanConvert, result:  &{[0] [[]] [[1]]}
finish analysis for: runtime.goPanicSlice3BU, result:  &{[] [] [[0] [1]]}
finish analysis for: math.stirling, result:  &{[] [[0] [0]] [[0]]}
finish analysis for: strings.getStringWriter, result:  &{[] [[0]] [[0]]}
finish analysis for: (io.discard).WriteString, result:  &{[0] [[] []] [[1]]}
finish analysis for: (*io.discard).WriteString, result:  &{[0] [[] []] [[1]]}
finish analysis for: (*strings.genericReplacer).lookup, result:  &{[0] [[0] [] []] [[1] [2]]}
finish analysis for: (*strings.genericReplacer).WriteString, result:  &{[0] [[] []] [[1] [2]]}
end analysis for: runtime.call64 , result:  &{[] [] [[0] [1] [2] [3] [4] [5] [6]]}
finish analysis for: runtime.setMemoryLimit, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.badTimer, result:  &{[] [] []}
finish analysis for: runtime.updateTimerModifiedEarliest, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.netpollBreak, result:  &{[] [] []}
finish analysis for: runtime.wakeNetPoller, result:  &{[] [] [[0]]}
finish analysis for: runtime.kqueue, result:  &{[] [[]] []}
finish analysis for: runtime.fcntl, result:  &{[] [[0 1 2] [0 1 2]] [[0] [1] [2]]}
finish analysis for: runtime.closeonexec, result:  &{[] [] [[0]]}
finish analysis for: runtime.pipe, result:  &{[] [[] [] []] []}
finish analysis for: runtime.setNonblock, result:  &{[] [] [[0]]}
finish analysis for: runtime.nonblockingPipe, result:  &{[] [[] [] []] []}
finish analysis for: runtime.kevent, result:  &{[] [[]] [[0] [1] [2] [3] [4] [5]]}
finish analysis for: runtime.netpollinit, result:  &{[] [] []}
finish analysis for: runtime.netpollGenericInit, result:  &{[] [] []}
finish analysis for: runtime.siftupTimer, result:  &{[] [[1]] [[0] [1]]}
finish analysis for: runtime.doaddtimer, result:  &{[] [] [[0 1] [0 1]]}
finish analysis for: runtime.modtimer, result:  &{[] [[]] [[0 1 2 3 4 5] [1] [2] [3] [4] [5]]}
finish analysis for: runtime.resettimer, result:  &{[] [[]] [[0 1] [1]]}
finish analysis for: runtime.resetTimer, result:  &{[] [[]] [[0 1] [1]]}
finish analysis for: runtime.deltimer, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.stopTimer, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.isNaN, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.isFinite, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.isInf, result:  &{[] [[0]] [[0]]}
finish analysis for: (*runtime.piController).next, result:  &{[0 1 2 3] [[0 1 2 3] []] [[1] [2] [3]]}
finish analysis for: (*runtime.scavengerState).controllerFailed, result:  &{[0] [] []}
finish analysis for: (*runtime.scavengerState).sleep, result:  &{[0 1] [] [[1]]}
finish analysis for: os.Link, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*internal/poll.FD).writeLock, result:  &{[0] [[]] []}
finish analysis for: (*internal/poll.pollDesc).prepareWrite, result:  &{[0] [[]] [[1]]}
finish analysis for: (*internal/poll.pollDesc).waitWrite, result:  &{[0] [[]] [[1]]}
finish analysis for: (*internal/poll.FD).WriteMsgInet4, result:  &{[0] [[] [] []] [[1] [2] [3]]}
finish analysis for: (*runtime.wakeableSleep).sleep, result:  &{[0 1] [] [[1]]}
finish analysis for: (*runtime.traceAdvancerState).start$1, result:  &{[] [] []}
finish analysis for: syscall.Environ, result:  &{[] [[]] []}
finish analysis for: internal/syscall/execenv.Default, result:  &{[] [[] []] [[0]]}
finish analysis for: syscall.SlicePtrFromStrings, result:  &{[] [[] []] [[0]]}
finish analysis for: (*sync.RWMutex).Lock, result:  &{[0] [] []}
finish analysis for: syscall.acquireForkLock, result:  &{[] [] []}
finish analysis for: syscall.forkExecPipe, result:  &{[] [[]] [[0]]}
finish analysis for: syscall.ptrace, result:  &{[] [[]] [[0] [1] [2] [3]]}
finish analysis for: syscall.forkAndExecInChild, result:  &{[] [[] []] [[0] [1] [2] [3] [4] [5] [6] [7]]}
finish analysis for: (*sync.RWMutex).Unlock, result:  &{[0] [] []}
finish analysis for: syscall.releaseForkLock, result:  &{[] [] []}
finish analysis for: syscall.readlen, result:  &{[] [[] []] [[0] [1] [2]]}
finish analysis for: syscall.wait4, result:  &{[] [[] []] [[0] [1] [2] [3]]}
finish analysis for: syscall.Wait4, result:  &{[] [[] []] [[0] [1] [2] [3]]}
finish analysis for: syscall.forkExec, result:  &{[] [[] []] [[0] [1] [2]]}
finish analysis for: syscall.StartProcess, result:  &{[] [[] [] []] [[0] [1] [2]]}
finish analysis for: os.newProcess, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*internal/poll.FD).SetBlocking, result:  &{[0] [[]] []}
finish analysis for: (*os.File).Fd, result:  &{[0] [[0]] []}
finish analysis for: os.startProcess, result:  &{[] [[] [0 2]] [[0] [1] [2]]}
finish analysis for: os.StartProcess, result:  &{[] [[] [0 2]] [[0] [1] [2]]}
finish analysis for: (internal/reflectlite.flag).kind, result:  &{[0] [[0]] []}
finish analysis for: (internal/reflectlite.Value).typ, result:  &{[0] [[0]] []}
finish analysis for: (internal/reflectlite.Value).pointer, result:  &{[0] [[0]] []}
finish analysis for: (internal/reflectlite.Value).Len, result:  &{[0] [[0]] []}
finish analysis for: (*internal/reflectlite.Value).Len, result:  &{[0] [[]] []}
finish analysis for: bytes.trimRightByte, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: (*runtime.pageBits).setBlock64, result:  &{[0 2] [] [[1] [2]]}
finish analysis for: (*runtime.pallocBits).allocPages64, result:  &{[0 2] [] [[1] [2]]}
finish analysis for: (*reflect.Value).recv, result:  &{[0] [[] []] [[1]]}
finish analysis for: internal/bisect.AppendMarker, result:  &{[] [[0 1]] [[0 1] [1]]}
finish analysis for: (*runtime.Func).funcInfo, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.Func).Name, result:  &{[0] [[0]] []}
finish analysis for: internal/bisect.appendFileLine, result:  &{[] [[0 1 2]] [[0 1] [0 1] [2]]}
finish analysis for: internal/bisect.printStack, result:  &{[] [[]] [[0 1 2] [1] [2]]}
finish analysis for: runtime.getAuxv, result:  &{[] [[]] []}
finish analysis for: (*sync.Map).CompareAndDelete, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: (*syscall.Iovec).SetLen, result:  &{[0 1] [] [[1]]}
finish analysis for: syscall.sendmsg, result:  &{[] [[] []] [[0] [1] [2]]}
finish analysis for: syscall.sendmsgN, result:  &{[] [[] []] [[0] [1] [2] [3] [4] [5]]}
finish analysis for: time.UnixMilli, result:  &{[] [[0]] [[0]]}
finish analysis for: (context.withoutCancelCtx).Done, result:  &{[0] [[]] []}
finish analysis for: (*sync/atomic.Value).Store, result:  &{[0] [] [[1]]}
finish analysis for: (*context.cancelCtx).Done, result:  &{[0] [[]] []}
finish analysis for: (*context.cancelCtx).Err, result:  &{[0] [[0]] []}
finish analysis for: (context.emptyCtx).Value, result:  &{[0] [[]] [[1]]}
finish analysis for: (*context.emptyCtx).Value, result:  &{[0] [[]] [[1]]}
finish analysis for: context.Cause, result:  &{[] [[0]] [[0]]}
finish analysis for: context.parentCancelCtx, result:  &{[] [[] []] [[0]]}
finish analysis for: context.removeChild, result:  &{[] [] [[0] [1]]}
finish analysis for: (*context.cancelCtx).cancel, result:  &{[0 2 3] [] [[1] [2] [3]]}
finish analysis for: (*context.cancelCtx).propagateCancel$2, result:  &{[] [] []}
finish analysis for: syscall.Seek, result:  &{[] [[] []] [[0] [1] [2]]}
finish analysis for: (*internal/poll.FD).Seek, result:  &{[0] [[] []] [[1] [2]]}
finish analysis for: (*os.File).seek, result:  &{[0] [[] []] [[1] [2]]}
finish analysis for: (*os.File).Seek, result:  &{[0] [[] [0]] [[1] [2]]}
end analysis for: internal/poll.runtimeNano , result:  &{[] [[]] []}
finish analysis for: (*syscall.SockaddrInet4).sockaddr, result:  &{[0] [[0] [0] []] []}
finish analysis for: syscall.bind, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: syscall.Bind, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.dounlockOSThread, result:  &{[] [] []}
finish analysis for: runtime.unlockOSThread, result:  &{[] [] []}
finish analysis for: runtime.unwindm, result:  &{[] [] [[0]]}
end analysis for: slices.insertionSortOrdered , result:  &{[] [] [[0] [1] [2]]}
finish analysis for: path/filepath.IsAbs, result:  &{[] [[0]] [[0]]}
finish analysis for: (*os/exec.Cmd).childStdin, result:  &{[0] [[0] []] []}
finish analysis for: (*os/exec.Cmd).childStdout, result:  &{[0] [[0] []] []}
finish analysis for: os/exec.interfaceEqual, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*os/exec.Cmd).childStderr, result:  &{[0] [[0 1] []] [[1]]}
finish analysis for: os.Environ, result:  &{[] [[]] []}
finish analysis for: path/filepath.unixAbs, result:  &{[] [[0] []] [[0]]}
finish analysis for: path/filepath.abs, result:  &{[] [[0] []] [[0]]}
finish analysis for: path/filepath.Abs, result:  &{[] [[0] []] [[0]]}
finish analysis for: unicode.to, result:  &{[] [[0 1 2] []] [[0] [1] [2]]}
finish analysis for: unicode.To, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: unicode.ToTitle, result:  &{[] [[0]] [[0]]}
finish analysis for: (unicode.SpecialCase).ToTitle, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (unicode.SpecialCase).ToTitle$bound, result:  &{[] [[0]] [[0]]}
finish analysis for: (*strings.Builder).WriteRune, result:  &{[0 1] [[] []] [[1]]}
finish analysis for: (*strings.Builder).Cap, result:  &{[0] [[]] []}
finish analysis for: (*strings.Builder).WriteByte, result:  &{[0 1] [[]] [[1]]}
finish analysis for: strings.Map, result:  &{[] [[1]] [[0] [1]]}
finish analysis for: strings.ToLower, result:  &{[] [[0]] [[0]]}
finish analysis for: os/exec.dedupEnvCase, result:  &{[] [[2] []] [[0] [1] [2]]}
finish analysis for: os/exec.dedupEnv, result:  &{[] [[0] []] [[0]]}
finish analysis for: strings.Cut, result:  &{[] [[0] [0] []] [[0] [1]]}
finish analysis for: unicode.ToLower, result:  &{[] [[0]] [[0]]}
finish analysis for: unicode.ToUpper, result:  &{[] [[0]] [[0]]}
finish analysis for: unicode.SimpleFold, result:  &{[] [[0]] [[0]]}
finish analysis for: strings.EqualFold, result:  &{[] [[]] [[0] [1]]}
finish analysis for: os/exec.addCriticalEnv, result:  &{[] [[0]] [[0]]}
finish analysis for: (*os/exec.Cmd).environ, result:  &{[0] [[0] []] []}
finish analysis for: (*os/exec.Cmd).argv, result:  &{[0] [[0]] []}
finish analysis for: (*os/exec.Cmd).Start, result:  &{[0] [[0]] []}
finish analysis for: (*os.Process).blockUntilWaitable, result:  &{[0] [[] []] []}
finish analysis for: (*os.Process).setDone, result:  &{[0] [] []}
finish analysis for: (*os.Process).wait, result:  &{[0] [[] []] []}
finish analysis for: (*os.Process).Wait, result:  &{[0] [[] []] []}
finish analysis for: time.when, result:  &{[] [[0]] [[0]]}
finish analysis for: time.NewTimer, result:  &{[] [[0]] [[0]]}
finish analysis for: (*os.fileWithoutReadFrom).Close, result:  &{[0] [[0]] []}
finish analysis for: os/exec.closeDescriptors, result:  &{[] [] [[0]]}
finish analysis for: (*os/exec.Cmd).awaitGoroutines, result:  &{[0] [[0]] [[0 1]]}
finish analysis for: (*os/exec.Cmd).Wait, result:  &{[0] [[0]] []}
finish analysis for: (*os/exec.Cmd).Run, result:  &{[0] [[0]] []}
finish analysis for: (*bytes.Buffer).Grow, result:  &{[0] [] [[1]]}
finish analysis for: (*bytes.Buffer).Write, result:  &{[0] [[] []] [[1]]}
finish analysis for: (*bytes.Buffer).WriteString, result:  &{[0] [[] []] [[1]]}
finish analysis for: (*bytes.Buffer).Bytes, result:  &{[0] [[0]] []}
finish analysis for: (*os/exec.prefixSuffixSaver).Bytes, result:  &{[0] [[0]] []}
finish analysis for: (*os/exec.Cmd).Output, result:  &{[0] [[] [0]] []}
finish analysis for: (os.fileWithoutWriteTo).Readdirnames, result:  &{[0] [[] [0]] [[1]]}
finish analysis for: (*runtime.mheap).reclaimChunk, result:  &{[0] [[0]] [[1] [2] [3]]}
finish analysis for: runtime.poll_runtime_pollUnblock, result:  &{[] [] [[0]]}
end analysis for: slices.swap , result:  &{[] [] [[0] [1]]}
finish analysis for: internal/testlog.PanicOnExit0, result:  &{[] [[]] []}
finish analysis for: os.Exit, result:  &{[] [] [[0]]}
end analysis for: runtime.sigaction_trampoline , result:  &{[] [] []}
finish analysis for: (*syscall.SockaddrInet6).sockaddr, result:  &{[0] [[0] [0] []] []}
finish analysis for: syscall.sendmsgNInet6, result:  &{[] [[] []] [[0] [1] [2] [3] [4]]}
finish analysis for: (runtime.traceLocker).GoStart, result:  &{[0] [] []}
finish analysis for: strconv.quoteWith, result:  &{[] [[0 1]] [[0] [1] [2] [3]]}
finish analysis for: strconv.Quote, result:  &{[] [[0]] [[0]]}
finish analysis for: (*os/exec.Error).Error, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.ChanType).ChanDir, result:  &{[0] [[0]] []}
finish analysis for: (*os.fileWithoutWriteTo).writeTo, result:  &{[0] [[] [] []] [[1]]}
end analysis for: runtime.read_trampoline , result:  &{[] [] []}
finish analysis for: runtime.argv_index, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.sysargs, result:  &{[] [] [[0] [1]]}
end analysis for: sync/atomic.LoadUintptr , result:  &{[] [[]] [[0]]}
finish analysis for: internal/itoa.Uitoa, result:  &{[] [[0]] [[0]]}
finish analysis for: internal/itoa.Itoa, result:  &{[] [[0]] [[0]]}
finish analysis for: (syscall.Errno).Error, result:  &{[0] [[0]] []}
finish analysis for: context.value, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: (*context.cancelCtx).Value, result:  &{[0] [[0]] [[1]]}
finish analysis for: (*context.afterFuncCtx).Value, result:  &{[0] [[0]] [[1]]}
finish analysis for: syscall.closedir, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.msigrestore, result:  &{[] [] [[0]]}
finish analysis for: runtime.syscall_runtime_AfterFork, result:  &{[] [] []}
end analysis for: runtime.forbits , result:  &{[] [[]] [[0] [1]]}
end analysis for: slices.stableOrdered , result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.canPreemptM, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.isShrinkStackSafe, result:  &{[] [[]] [[0]]}
finish analysis for: (*runtime.gcControllerState).addScannableStack, result:  &{[0] [] [[1 2] [2]]}
finish analysis for: runtime.stacklog2, result:  &{[] [[]] [[0]]}
finish analysis for: (runtime.spanAllocType).manual, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.pageCache).empty, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.pallocBits).findLargeN, result:  &{[0] [[0 2] [2]] [[1] [2]]}
finish analysis for: runtime.findBitRange64, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*runtime.pallocBits).findSmallN, result:  &{[0] [[0 2] [2]] [[1] [2]]}
finish analysis for: (*runtime.pallocBits).find1, result:  &{[0] [[1]] [[1]]}
finish analysis for: (*runtime.pallocBits).find, result:  &{[0] [[0 2] [2]] [[1] [2]]}
finish analysis for: (runtime.pallocSum).start, result:  &{[0] [[0]] []}
finish analysis for: (runtime.pallocSum).max, result:  &{[0] [[0]] []}
finish analysis for: (runtime.pallocSum).end, result:  &{[0] [[0]] []}
finish analysis for: (runtime.offAddr).add, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (*runtime.pageAlloc).find$1, result:  &{[] [] [[0] [1]]}
finish analysis for: (runtime.addrRange).contains, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (*runtime.addrRanges).findSucc, result:  &{[0] [[]] [[1]]}
finish analysis for: (*runtime.addrRanges).findAddrGreaterEqual, result:  &{[0] [[0 1] []] [[1]]}
finish analysis for: (*runtime.pageAlloc).findMappedAddr, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: runtime.offAddrToLevelIndex, result:  &{[] [[1]] [[0] [1]]}
finish analysis for: runtime.levelIndexToOffAddr, result:  &{[] [[1]] [[0] [1]]}
finish analysis for: (*runtime.pageAlloc).find, result:  &{[0] [[0] [0]] [[1]]}
finish analysis for: (*runtime.pageBits).block64, result:  &{[0] [[0]] [[1]]}
finish analysis for: (*runtime.pallocBits).pages64, result:  &{[0] [[0]] [[1]]}
finish analysis for: (*runtime.pageBits).clearBlock64, result:  &{[0 2] [] [[1] [2]]}
finish analysis for: (*runtime.scavChunkFlags).setEmpty, result:  &{[0] [] []}
finish analysis for: (*runtime.scavChunkData).alloc, result:  &{[0 1 2] [] [[1] [2]]}
finish analysis for: (*runtime.scavengeIndex).alloc, result:  &{[0] [] [[1] [2]]}
finish analysis for: (*runtime.pageAlloc).allocToCache, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.pageCache).allocN, result:  &{[0 1] [[0 1] [0 1]] [[1]]}
finish analysis for: (*runtime.pageCache).alloc, result:  &{[0 1] [[0 1] [0 1]] [[1]]}
finish analysis for: (*runtime.mheap).tryAllocMSpan, result:  &{[0] [[]] []}
finish analysis for: (*runtime.linearAlloc).alloc, result:  &{[0 1 2] [[0 2]] [[1] [2] [3]]}
finish analysis for: runtime.munmap, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.sysFreeOS, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.sysReserveAligned, result:  &{[] [[0 1 2] [1 2]] [[0] [1] [2]]}
finish analysis for: runtime.sysFree, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: runtime.recordspan, result:  &{[] [] [[0 1] [1]]}
finish analysis for: (*runtime.fixalloc).alloc, result:  &{[0] [[0]] []}
finish analysis for: runtime.racemapshadow, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.sysNoHugePageOS, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.sysNoHugePage, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.sysHugePageOS, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.sysHugePage, result:  &{[] [] [[0] [1]]}
finish analysis for: (*runtime.mheap).sysAlloc, result:  &{[0 1 2] [[0 1 2] [1]] [[1] [0 1 2] [3]]}
finish analysis for: runtime.blockAlignSummaryRange, result:  &{[] [[1] [2]] [[0] [1] [2]]}
finish analysis for: (*runtime.pageAlloc).sysGrow$1, result:  &{[] [[1] [1]] [[0] [1]]}
finish analysis for: (*runtime.pageAlloc).sysGrow$2, result:  &{[] [[1 2]] [[0] [1] [2]]}
finish analysis for: (*runtime.pageAlloc).sysGrow$3, result:  &{[] [[1]] [[0] [1]]}
finish analysis for: (*runtime.pageAlloc).sysGrow, result:  &{[0 1 2] [] [[1] [2]]}
finish analysis for: (*runtime.scavengeIndex).grow, result:  &{[0] [[0 1 2]] [[1] [2] [3]]}
finish analysis for: (*runtime.addrRanges).add, result:  &{[0 1] [] [[1]]}
finish analysis for: (*runtime.pageBits).set, result:  &{[0 1] [] [[1]]}
finish analysis for: (*runtime.pageBits).setRange, result:  &{[0 1 2] [] [[1] [2]]}
finish analysis for: (*runtime.pageAlloc).grow, result:  &{[0 1 2] [] [[1] [2]]}
finish analysis for: (*runtime.mheap).grow, result:  &{[0 1] [[0 1] []] [[1]]}
finish analysis for: (*runtime.pageBits).popcntRange, result:  &{[0] [[0 1 2]] [[1] [2]]}
finish analysis for: (*runtime.pallocBits).allocRange, result:  &{[0 1 2] [] [[1] [2]]}
finish analysis for: (*runtime.pallocData).allocRange, result:  &{[0 1 2] [] [[1] [2]]}
finish analysis for: (*runtime.pageBits).setAll, result:  &{[0] [] []}
finish analysis for: (*runtime.pallocBits).allocAll, result:  &{[0] [] []}
finish analysis for: (*runtime.pallocData).allocAll, result:  &{[0] [] []}
finish analysis for: (*runtime.pageAlloc).allocRange, result:  &{[0] [[0 1 2]] [[1] [2]]}
finish analysis for: (*runtime.pageAlloc).alloc, result:  &{[0] [[0] [0 1]] [[1]]}
finish analysis for: (*runtime.mheap).allocMSpanLocked, result:  &{[0] [[0]] []}
finish analysis for: runtime.heapRetained, result:  &{[] [[]] []}
finish analysis for: (*runtime.limiterEvent).start, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: (*runtime.scavChunkFlags).isEmpty, result:  &{[0] [[0]] []}
finish analysis for: (runtime.scavChunkData).shouldScavenge, result:  &{[0] [[0]] [[1] [2]]}
finish analysis for: (*runtime.atomicOffAddr).StoreMin, result:  &{[0] [] [[1]]}
finish analysis for: (*runtime.atomicOffAddr).StoreUnmark, result:  &{[0] [] [[1] [2]]}
finish analysis for: (*runtime.scavengeIndex).find, result:  &{[0] [[] []] [[1]]}
finish analysis for: (*runtime.pageAlloc).scavenge, result:  &{[0] [[]] [[1] [2] [3]]}
finish analysis for: (*runtime.mheap).allocNeedsZero, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: runtime.newAllocBits, result:  &{[] [[]] [[0]]}
finish analysis for: (*runtime.mheap).setSpans, result:  &{[0] [] [[1] [2] [3]]}
finish analysis for: (*runtime.mheap).initSpan, result:  &{[0] [] [[1 3 4 5] [2] [3] [4] [5]]}
finish analysis for: runtime.pageTraceAlloc, result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: (*runtime.mheap).allocSpan, result:  &{[0 1] [[0 1 3]] [[1] [2] [3]]}
finish analysis for: (*runtime.mheap).allocManual, result:  &{[0 1] [[0 1]] [[1] [2]]}
finish analysis for: runtime.osStackAlloc, result:  &{[] [] [[0]]}
finish analysis for: runtime.stackpoolalloc, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.stackcacherefill, result:  &{[] [] [[0 1] [1]]}
finish analysis for: runtime.stackalloc, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.fillstack, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.adjustpointer, result:  &{[] [] [[0] [0 1]]}
finish analysis for: runtime.adjustsudogs, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.findsghi, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: runtime.syncadjustsudogs, result:  &{[] [[1 2]] [[0] [1] [2]]}
finish analysis for: runtime.adjustctxt, result:  &{[] [] [[0 1] [1]]}
finish analysis for: runtime.adjustdefers, result:  &{[] [] [[0 1] [1]]}
finish analysis for: runtime.adjustpanics, result:  &{[] [] [[0 1] [1]]}
finish analysis for: runtime.stackcacherelease, result:  &{[] [] [[0 1] [1]]}
finish analysis for: runtime.stackfree, result:  &{[] [] [[0]]}
finish analysis for: runtime.stackmapdata, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*runtime.stkframe).argMapInternal, result:  &{[0] [[0] []] []}
finish analysis for: (*runtime.stkframe).getStackMap, result:  &{[0] [[0] [0] []] [[1]]}
finish analysis for: (*runtime.stackObjectRecord).ptrdata, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.stackObjectRecord).gcdata, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.stackObjectRecord).useGCProg, result:  &{[0] [[0]] []}
finish analysis for: runtime.materializeGCProg, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: runtime.dematerializeGCProg, result:  &{[] [] [[0]]}
finish analysis for: runtime.adjustframe, result:  &{[] [] [[0 1] [1]]}
finish analysis for: runtime.copystack, result:  &{[] [] [[0 1] [1]]}
finish analysis for: runtime.shrinkstack, result:  &{[] [] [[0]]}
finish analysis for: runtime.casGToPreemptScan, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: runtime.setMNoWB, result:  &{[] [] [[0 1] [1]]}
finish analysis for: runtime.setGNoWB, result:  &{[] [] [[0 1] [1]]}
finish analysis for: runtime.dropg, result:  &{[] [] []}
finish analysis for: (runtime.traceLocker).GoPark, result:  &{[0] [] [[1] [2]]}
finish analysis for: runtime.casfrom_Gscanstatus, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: runtime.traceReaderAvailable, result:  &{[] [[]] []}
finish analysis for: runtime.nobarrierWakeTime, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.updateTimerPMask, result:  &{[] [] [[0]]}
finish analysis for: runtime.pidleput, result:  &{[] [[1]] [[0] [1]]}
finish analysis for: runtime.handoffp, result:  &{[] [] [[0]]}
finish analysis for: runtime.forEachG, result:  &{[] [] [[0]]}
finish analysis for: runtime.timeSleepUntil, result:  &{[] [[]] []}
finish analysis for: runtime.checkdead, result:  &{[] [] []}
finish analysis for: runtime.incidlelocked, result:  &{[] [] [[0]]}
finish analysis for: runtime.notesleep, result:  &{[] [] [[0]]}
finish analysis for: runtime.mPark, result:  &{[] [] []}
finish analysis for: runtime.stoplockedm, result:  &{[] [] []}
finish analysis for: runtime.setThreadCPUProfilerHz, result:  &{[] [] [[0]]}
finish analysis for: runtime.setThreadCPUProfiler, result:  &{[] [] [[0]]}
finish analysis for: (runtime.traceLocker).GoSysExit, result:  &{[0] [] [[1]]}
finish analysis for: runtime.execute, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.runSafePointFn, result:  &{[] [] []}
finish analysis for: runtime.addAdjustedTimers, result:  &{[] [] [[0 1] [0 1]]}
finish analysis for: runtime.verifyTimerHeap, result:  &{[] [] [[0]]}
finish analysis for: runtime.siftdownTimer, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.updateTimer0When, result:  &{[] [] [[0]]}
finish analysis for: runtime.dodeltimer, result:  &{[] [[1]] [[0] [1]]}
finish analysis for: runtime.adjusttimers, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.dodeltimer0, result:  &{[] [] [[0]]}
finish analysis for: runtime.raceacquirectx, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.netpollReadDeadline, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.runOneTimer, result:  &{[] [] [[0] [1 2] [2]]}
finish analysis for: runtime.runtimer, result:  &{[] [[0 1]] [[0 1] [1]]}
finish analysis for: runtime.clearDeletedTimers, result:  &{[] [] [[0]]}
finish analysis for: runtime.checkTimers, result:  &{[] [[1] [0 1] []] [[0 1] [1]]}
finish analysis for: runtime.traceReader, result:  &{[] [[]] []}
finish analysis for: (*runtime.gcCPULimiterState).needUpdate, result:  &{[0] [[1]] [[1]]}
finish analysis for: (*runtime.gcCPULimiterState).update, result:  &{[0 1] [] [[1]]}
finish analysis for: (*runtime.gcControllerState).findRunnableGCWorker$1, result:  &{[] [[]] [[0]]}
finish analysis for: (*runtime.gcControllerState).findRunnableGCWorker, result:  &{[0] [[] [2]] [[1] [2]]}
finish analysis for: runtime.globrunqget, result:  &{[] [[1]] [[0 1] [1]]}
finish analysis for: runtime.wakefing, result:  &{[] [[]] []}
finish analysis for: runtime.runqget, result:  &{[] [[0] []] [[0]]}
finish analysis for: runtime.netpollinited, result:  &{[] [[]] []}
finish analysis for: runtime.netpollAnyWaiters, result:  &{[] [[]] []}
finish analysis for: (runtime.taggedPointer).tag, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.pollDesc).setEventErr, result:  &{[0] [] [[1] [2]]}
finish analysis for: runtime.netpollready, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: runtime.read, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: runtime.netpoll, result:  &{[] [[] []] [[0]]}
finish analysis for: (*runtime.gList).pop, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.randomOrder).start, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (*runtime.randomEnum).done, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.randomEnum).position, result:  &{[0] [[0]] []}
finish analysis for: (runtime.pMask).read, result:  &{[0] [[1]] [[1]]}
finish analysis for: runtime.runqgrab, result:  &{[] [[]] [[0] [0 1] [2] [3]]}
finish analysis for: runtime.runqsteal, result:  &{[] [[0 1]] [[0 1] [1] [2]]}
finish analysis for: (*runtime.randomEnum).next, result:  &{[0] [] []}
finish analysis for: runtime.stealWork, result:  &{[] [[0] [] [0] [0] []] [[0]]}
finish analysis for: (*runtime.gcControllerState).addIdleMarkWorker, result:  &{[0] [[]] []}
finish analysis for: (*runtime.gcControllerState).removeIdleMarkWorker, result:  &{[0] [] []}
finish analysis for: runtime.beforeIdle, result:  &{[] [[] []] [[0] [1]]}
finish analysis for: runtime.checkRunqsNoP, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*runtime.gcControllerState).needIdleMarkWorker, result:  &{[0] [[]] []}
finish analysis for: runtime.checkIdleGCNoP, result:  &{[] [[] []] []}
finish analysis for: runtime.checkTimersNoP, result:  &{[] [[2]] [[0] [1] [2]]}
finish analysis for: (*runtime/internal/atomic.Int64).Swap, result:  &{[0] [[]] [[1]]}
finish analysis for: runtime.mput, result:  &{[] [] [[0]]}
finish analysis for: runtime.stopm, result:  &{[] [] []}
finish analysis for: runtime.gcstopm, result:  &{[] [] []}
finish analysis for: runtime.findRunnable, result:  &{[] [[] [] []] []}
finish analysis for: runtime.resetspinning, result:  &{[] [] []}
finish analysis for: runtime.startlockedm, result:  &{[] [] [[0]]}
finish analysis for: runtime.schedule, result:  &{[] [] []}
finish analysis for: runtime.preemptPark, result:  &{[] [] [[0]]}
finish analysis for: (runtime.traceLocker).GoStop, result:  &{[0] [] [[1]]}
finish analysis for: (runtime.traceLocker).GoSched, result:  &{[0] [] []}
finish analysis for: (runtime.traceLocker).GoPreempt, result:  &{[0] [] []}
finish analysis for: runtime.globrunqput, result:  &{[] [] [[0]]}
finish analysis for: runtime.goschedImpl, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.gopreempt_m, result:  &{[] [] [[0]]}
finish analysis for: runtime.funcMaxSPDelta, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.newstack, result:  &{[] [] []}
finish analysis for: (reflect.Value).OverflowInt, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (*reflect.Value).OverflowInt, result:  &{[0] [[1]] [[1]]}
finish analysis for: (*runtime.sweepLocked).sweep$1, result:  &{[] [] []}
finish analysis for: (runtime.liveUserArenaChunk).setUserArenaChunkToFault, result:  &{[0] [] []}
finish analysis for: (internal/reflectlite.rtype).Name, result:  &{[0] [[]] []}
finish analysis for: internal/reflectlite.haveIdenticalType, result:  &{[] [[0 1]] [[0] [1] [2]]}
finish analysis for: internal/reflectlite.haveIdenticalUnderlyingType, result:  &{[] [[0 1]] [[0] [1] [2]]}
finish analysis for: internal/reflectlite.directlyAssignable, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (internal/reflectlite.rtype).typeOff, result:  &{[0] [[]] [[1]]}
finish analysis for: internal/reflectlite.add, result:  &{[] [[0 1]] [[0] [1] [2]]}
finish analysis for: (internal/reflectlite.name).data, result:  &{[0] [[0 1]] [[1] [2]]}
finish analysis for: (internal/reflectlite.name).readVarint, result:  &{[0] [[] [0 1]] [[1]]}
finish analysis for: (internal/reflectlite.name).name, result:  &{[0] [[]] []}
finish analysis for: internal/reflectlite.pkgPath, result:  &{[] [[]] [[0]]}
finish analysis for: internal/reflectlite.implements, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (internal/reflectlite.rtype).AssignableTo, result:  &{[0] [[]] [[1]]}
finish analysis for: runtime.worldStarted, result:  &{[] [] []}
finish analysis for: errors.Unwrap, result:  &{[] [[0]] [[0]]}
finish analysis for: syscall.recvmsg, result:  &{[] [[] []] [[0] [1] [2]]}
finish analysis for: runtime.NumCgoCall, result:  &{[] [[]] []}
finish analysis for: runtime.initMetrics$1, result:  &{[] [] [[0] [1]]}
finish analysis for: syscall.readIntLE, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: syscall.readIntBE, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: syscall.readInt, result:  &{[] [[0] []] [[0] [1] [2]]}
finish analysis for: runtime.traceCPUFlush, result:  &{[] [] [[0]]}
finish analysis for: (time.Time).appendFormatRFC3339, result:  &{[0] [[0 1]] [[1] [2]]}
finish analysis for: (time.Time).AppendFormat, result:  &{[0] [[0 1 2]] [[1] [2]]}
finish analysis for: (time.Time).Format, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (time.Time).String, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.mspan).ensureSwept, result:  &{[0] [] []}
finish analysis for: (*runtime.mspan).specialFindSplicePoint, result:  &{[0] [[0] []] [[1] [2]]}
finish analysis for: runtime.removespecial, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.removefinalizer, result:  &{[] [] [[0]]}
finish analysis for: runtime.SetFinalizer$1, result:  &{[] [] []}
end analysis for: sync/atomic.CompareAndSwapUintptr , result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: (reflect.Value).capNonSlice, result:  &{[0] [[0]] []}
finish analysis for: syscall.execve, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: (runtime.rtype).name, result:  &{[0] [[]] []}
finish analysis for: (*runtime.pallocData).find1, result:  &{[0] [[1]] [[1]]}
finish analysis for: syscall.read, result:  &{[] [[] []] [[0] [1]]}
finish analysis for: bytes.Map, result:  &{[] [[1]] [[0] [1]]}
finish analysis for: bytes.Title, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.init#8, result:  &{[] [] []}
finish analysis for: syscall.Lstat, result:  &{[] [[]] [[0] [1]]}
finish analysis for: sort.siftDown, result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: (reflect.Value).SetCap, result:  &{[0 1] [] [[1]]}
end analysis for: syscall.syscallPtr , result:  &{[] [[] [] []] [[0] [1] [2] [3]]}
finish analysis for: (*os.ProcessState).ExitCode, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.hmap).sameSizeGrow, result:  &{[0] [[0]] []}
finish analysis for: runtime.bucketShift, result:  &{[] [[0]] [[0]]}
finish analysis for: (*runtime.hmap).noldbuckets, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.hmap).oldbucketmask, result:  &{[0] [[0]] []}
finish analysis for: runtime.evacuated, result:  &{[] [[0]] [[0]]}
finish analysis for: (*runtime.bmap).overflow, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: runtime.isEmpty, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.r8, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.mix, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.memhash64Fallback, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.newobject, result:  &{[] [[0]] [[0]]}
finish analysis for: (*runtime.bmap).setoverflow, result:  &{[0] [] [[1] [2]]}
finish analysis for: (*runtime.hmap).incrnoverflow, result:  &{[0] [] []}
finish analysis for: (*runtime.hmap).createOverflow, result:  &{[0] [] []}
finish analysis for: (*runtime.hmap).newoverflow, result:  &{[0 1] [[0 1]] [[1] [2]]}
finish analysis for: runtime.bucketEvacuated, result:  &{[] [[0 1 2]] [[0] [1] [2]]}
finish analysis for: runtime.advanceEvacuationMark, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: runtime.evacuate_fast64, result:  &{[] [] [[0 1 2] [0 1 2] [2]]}
finish analysis for: (*runtime.hmap).growing, result:  &{[0] [[0]] []}
finish analysis for: runtime.growWork_fast64, result:  &{[] [] [[0 1 2] [0 1 2] [2]]}
end analysis for: time.parseRFC3339[[]byte] , result:  &{[] [[] []] [[0] [1]]}
finish analysis for: internal/chacha8rand.leUint64, result:  &{[] [[0]] [[0]]}
finish analysis for: (*internal/chacha8rand.State).Init, result:  &{[0 1] [] [[1]]}
finish analysis for: (*internal/godebug.Setting).Undocumented, result:  &{[0] [[0]] []}
finish analysis for: (os.fileWithoutWriteTo).WriteAt, result:  &{[0] [[] [0]] [[1] [2]]}
finish analysis for: fmt.newPrinter, result:  &{[] [[]] []}
finish analysis for: runtime.memhash8, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.sigsave, result:  &{[] [] [[0]]}
finish analysis for: runtime.restoreGsignalStack, result:  &{[] [] [[0]]}
finish analysis for: runtime.sigaltstack, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.unminitSignals, result:  &{[] [] []}
finish analysis for: syscall.Setrlimit, result:  &{[] [[]] [[0] [1]]}
finish analysis for: syscall.Exec, result:  &{[] [[]] [[0] [1] [2]]}
end analysis for: slices.order2Ordered , result:  &{[] [[] []] [[0] [1] [2] [3]]}
finish analysis for: (*internal/poll.FD).Fchown, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: (*os.File).Chown, result:  &{[0] [[0]] [[1] [2]]}
finish analysis for: (os.fileWithoutReadFrom).Chown, result:  &{[0] [[0]] [[1] [2]]}
finish analysis for: (*internal/abi.MapType).ChanDir, result:  &{[0] [[0]] []}
finish analysis for: reflect.cvtSliceArrayPtr, result:  &{[] [[0 1]] [[0] [1]]}
end analysis for: sync.runtime_StoreReluintptr , result:  &{[] [[]] [[0] [1]]}
end analysis for: runtime/internal/atomic.Store64 , result:  &{[] [] [[0] [1]]}
finish analysis for: (time.Time).Hour, result:  &{[0] [[0]] []}
finish analysis for: (*time.Time).Hour, result:  &{[0] [[]] []}
end analysis for: runtime.call2097152 , result:  &{[] [] [[0] [1] [2] [3] [4] [5] [6]]}
finish analysis for: (reflect.Value).CanSet, result:  &{[0] [[0]] []}
finish analysis for: (os.fileWithoutReadFrom).close, result:  &{[0] [[0]] []}
finish analysis for: (time.Time).IsZero, result:  &{[0] [[0]] []}
finish analysis for: (time.Time).UnixNano, result:  &{[0] [[0]] []}
finish analysis for: syscall.setTimespec, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: syscall.NsecToTimespec, result:  &{[] [[0]] [[0]]}
finish analysis for: os.Chtimes$1, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.environ, result:  &{[] [[]] []}
finish analysis for: runtime.lowerASCII, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.envKeyEqual, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.gogetenv, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.atoi64, result:  &{[] [[0] []] [[0]]}
finish analysis for: runtime.atoi32, result:  &{[] [[0] []] [[0]]}
finish analysis for: runtime.atoi, result:  &{[] [[0] []] [[0]]}
finish analysis for: runtime.parsegodebug, result:  &{[] [] [[0] [0 1]]}
finish analysis for: runtime.enableWER, result:  &{[] [] []}
finish analysis for: runtime.setTraceback, result:  &{[] [] [[0]]}
finish analysis for: runtime.parsedebugvars, result:  &{[] [] []}
finish analysis for: (*runtime.pollDesc).info, result:  &{[0] [[]] []}
finish analysis for: reflect.typesMustMatch, result:  &{[] [] [[0] [0 1] [2]]}
finish analysis for: (reflect.Value).extendSlice, result:  &{[0 1] [[0 1]] [[1]]}
finish analysis for: (reflect.Value).Slice, result:  &{[0] [[0 1 2]] [[1] [2]]}
finish analysis for: reflect.Copy, result:  &{[] [[]] [[0] [1]]}
finish analysis for: reflect.AppendSlice, result:  &{[] [[0 1]] [[0 1] [1]]}
finish analysis for: time.leadingFraction, result:  &{[] [[0] [] [0]] [[0]]}
finish analysis for: (*os.fileWithoutReadFrom).wrapErr, result:  &{[0] [[0 1 2]] [[1] [2]]}
end analysis for: sync/atomic.StoreUint32 , result:  &{[] [] [[0] [1]]}
finish analysis for: (*os.Process).release, result:  &{[0] [[]] []}
finish analysis for: (*internal/poll.DeadlineExceededError).Temporary, result:  &{[0] [[]] []}
finish analysis for: (*os/exec.Cmd).StderrPipe, result:  &{[0] [[] []] []}
finish analysis for: (*runtime.pallocData).free, result:  &{[0 1 2] [] [[1] [2]]}
finish analysis for: runtime.findnullw, result:  &{[] [[]] [[0]]}
finish analysis for: (*runtime.sigctxt).regs, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.sigctxt).pc, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.sigctxt).sigpc, result:  &{[0] [[0]] []}
finish analysis for: runtime.inVDSOPage, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.sigFetchG, result:  &{[] [[]] [[0]]}
finish analysis for: math.ilogb, result:  &{[] [[0]] [[0]]}
finish analysis for: math.Logb, result:  &{[] [[0]] [[0]]}
finish analysis for: (*reflect.structType).FieldByName$1, result:  &{[] [[0]] [[0]]}
finish analysis for: (reflect.Value).Call, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (os.fileWithoutWriteTo).checkValid, result:  &{[0] [[]] [[1]]}
finish analysis for: (*runtime/internal/atomic.Uintptr).Swap, result:  &{[0] [[]] [[1]]}
finish analysis for: (*os.unixDirent).Type, result:  &{[0] [[0]] []}
finish analysis for: reflect.Swapper$4, result:  &{[] [] [[0] [1]]}
finish analysis for: syscall.BpfDatalink, result:  &{[] [[] []] [[0]]}
finish analysis for: time.cutspace, result:  &{[] [[0]] [[0]]}
finish analysis for: time.skip, result:  &{[] [[0] []] [[0] [1]]}
finish analysis for: time.commaOrPeriod, result:  &{[] [[0]] [[0]]}
finish analysis for: time.parseSignedOffset, result:  &{[] [[]] [[0]]}
finish analysis for: time.parseGMT, result:  &{[] [[]] [[0]]}
finish analysis for: time.parseTimeZone, result:  &{[] [[] []] [[0]]}
finish analysis for: time.getnum, result:  &{[] [[0] [0] []] [[0] [1]]}
finish analysis for: time.getnum3, result:  &{[] [[0] [0] []] [[0] [1]]}
finish analysis for: time.match, result:  &{[] [[]] [[0] [1]]}
finish analysis for: time.lookup, result:  &{[] [[] [1] []] [[0] [1]]}
finish analysis for: time.cloneString, result:  &{[] [[0]] [[0]]}
finish analysis for: time.newParseError, result:  &{[] [[0 1 2 3 4]] [[0] [1] [2] [3] [4]]}
finish analysis for: time.Date, result:  &{[] [[0 1 2 3 4 5 6 7]] [[0] [1] [2] [3] [4] [5] [6] [7]]}
finish analysis for: (*time.Location).lookupName, result:  &{[0] [[0] []] [[1] [2]]}
finish analysis for: time.fixedZone, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: time.FixedZone, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*time.Time).addSec, result:  &{[0 1] [] [[1]]}
finish analysis for: time.parse, result:  &{[] [[1 2 3] [0 1]] [[0] [1] [2] [3]]}
finish analysis for: (*runtime.offAddr).diff, result:  &{[0] [[1]] [[1]]}
finish analysis for: internal/reflectlite.ifaceIndir, result:  &{[] [[0]] [[0]]}
finish analysis for: internal/reflectlite.unpackEface, result:  &{[] [[0]] [[0]]}
finish analysis for: internal/reflectlite.ValueOf, result:  &{[] [[0]] [[0]]}
finish analysis for: (*os.unixDirent).Name, result:  &{[0] [[0]] []}
finish analysis for: os.ReadDir$1, result:  &{[] [[]] [[0] [1]]}
finish analysis for: sort.SliceIsSorted, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.getExtraM, result:  &{[] [[] []] []}
finish analysis for: (runtime.liveUserArenaChunk).base, result:  &{[0] [[0]] []}
finish analysis for: runtime.wantAsyncPreempt, result:  &{[] [[]] [[0]]}
finish analysis for: (*runtime.sigctxt).sp, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.sigctxt).sigsp, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.sigctxt).lr, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.sigctxt).siglr, result:  &{[0] [[0]] []}
finish analysis for: runtime.pcdatavalue2, result:  &{[] [[0] [0]] [[0] [1] [2]]}
finish analysis for: runtime.isAsyncSafePoint, result:  &{[] [[] [1]] [[0] [1] [2] [3]]}
finish analysis for: (*runtime.sigctxt).set_sp, result:  &{[0] [] [[1]]}
finish analysis for: (*runtime.sigctxt).r29, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.sigctxt).set_lr, result:  &{[0] [] [[1]]}
finish analysis for: (*runtime.sigctxt).set_pc, result:  &{[0] [] [[1]]}
finish analysis for: (*runtime.sigctxt).pushCall, result:  &{[0] [] [[1] [2]]}
finish analysis for: runtime.doSigPreempt, result:  &{[] [] [[0] [1]]}
finish analysis for: (*runtime.sigctxt).sigcode, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.sigctxt).sigFromUser, result:  &{[0] [[0]] []}
finish analysis for: runtime.isAbortPC, result:  &{[] [[]] [[0]]}
finish analysis for: (*runtime.sigctxt).fault, result:  &{[0] [[0]] []}
finish analysis for: runtime.shouldPushSigpanic, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: (*runtime.sigctxt).set_r28, result:  &{[0] [] [[1]]}
finish analysis for: (*runtime.sigctxt).preparePanic, result:  &{[0] [] [[1] [2]]}
finish analysis for: runtime.sigNoteWakeup, result:  &{[] [] [[0]]}
finish analysis for: runtime.sigsend, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.signal_ignored, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.raise, result:  &{[] [] [[0]]}
finish analysis for: runtime.sigaction, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: runtime.setsig, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.dieFromSignal, result:  &{[] [] [[0]]}
finish analysis for: runtime.schedtrace, result:  &{[] [] [[0]]}
finish analysis for: runtime.freezetheworld, result:  &{[] [] []}
finish analysis for: runtime.startpanic_m, result:  &{[] [[]] []}
finish analysis for: runtime.isSecureMode, result:  &{[] [[]] []}
finish analysis for: runtime.fatalsignal, result:  &{[] [[2 3]] [[0] [1] [2] [3]]}
finish analysis for: runtime.tracebacktrap, result:  &{[] [] [[0 3] [1 3] [2] [3]]}
finish analysis for: runtime.tracebackothers, result:  &{[] [] [[0]]}
finish analysis for: (*runtime.sigctxt).r0, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.sigctxt).r1, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.sigctxt).r2, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.sigctxt).r3, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.sigctxt).r4, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.sigctxt).r5, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.sigctxt).r6, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.sigctxt).r7, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.sigctxt).r8, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.sigctxt).r9, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.sigctxt).r10, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.sigctxt).r11, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.sigctxt).r12, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.sigctxt).r13, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.sigctxt).r14, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.sigctxt).r15, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.sigctxt).r16, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.sigctxt).r17, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.sigctxt).r18, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.sigctxt).r19, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.sigctxt).r20, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.sigctxt).r21, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.sigctxt).r22, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.sigctxt).r23, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.sigctxt).r24, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.sigctxt).r25, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.sigctxt).r26, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.sigctxt).r27, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.sigctxt).r28, result:  &{[0] [[0]] []}
finish analysis for: runtime.dumpregs, result:  &{[] [] [[0]]}
finish analysis for: runtime.raiseproc, result:  &{[] [] [[0]]}
finish analysis for: (*runtime.debugLogReader).readUint16LEAt, result:  &{[0] [[0]] [[1]]}
finish analysis for: (*runtime.debugLogReader).uvarint, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.debugLogReader).varint, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.debugLogReader).header, result:  &{[0] [[0] [0] [0] [0]] []}
finish analysis for: runtime.racereadrangepc, result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: runtime.slicebytetostringtmp, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.printDebugLogPC, result:  &{[] [] [[0] [1]]}
finish analysis for: (*runtime.debugLogReader).printVal, result:  &{[0] [[]] []}
finish analysis for: (*runtime.debugLogReader).readUint64LEAt, result:  &{[0] [[0]] [[1]]}
finish analysis for: (*runtime.debugLogReader).peek, result:  &{[0] [[0]] []}
finish analysis for: runtime.printDebugLog, result:  &{[] [] []}
finish analysis for: runtime.crash, result:  &{[] [] []}
finish analysis for: runtime.runPerThreadSyscall, result:  &{[] [] []}
finish analysis for: runtime.validSIGPROF, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.usesLibcall, result:  &{[] [[]] []}
finish analysis for: (*runtime.profBuf).canWriteTwoRecords, result:  &{[0] [[0 1 2]] [[1] [2]]}
finish analysis for: (*runtime.profBuf).canWriteRecord, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (*runtime.profBuf).incrementOverflow, result:  &{[0] [] [[1]]}
finish analysis for: (*runtime.profBuf).write, result:  &{[0 1] [] [[1] [2] [3] [4]]}
finish analysis for: (*runtime.cpuProfile).addExtra, result:  &{[0] [] []}
finish analysis for: (*runtime.cpuProfile).add, result:  &{[0] [] [[1] [2]]}
finish analysis for: runtime.traceCPUSample, result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: runtime.sigprof, result:  &{[] [] [[0] [1] [2] [3] [4]]}
finish analysis for: runtime.sighandler, result:  &{[] [] [[0] [1] [2] [0 1 2 3]]}
finish analysis for: syscall.Fchdir, result:  &{[] [[]] [[0]]}
finish analysis for: (*internal/poll.FD).Fchdir, result:  &{[0] [[]] []}
finish analysis for: (*os.File).Chdir, result:  &{[0] [[0]] []}
finish analysis for: (os.fileWithoutReadFrom).Chdir, result:  &{[0] [[0]] []}
finish analysis for: (reflect.Value).Slice3, result:  &{[0] [[0 1 2 3]] [[1] [2] [3]]}
finish analysis for: (*reflect.Value).Slice3, result:  &{[0] [[1 2 3]] [[1] [2] [3]]}
finish analysis for: (*sync.Mutex).TryLock, result:  &{[0] [[]] []}
finish analysis for: (*sync/atomic.Int32).CompareAndSwap, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: (*sync.RWMutex).TryLock, result:  &{[0] [[]] []}
end analysis for: runtime.panicSlice3AlenU , result:  &{[] [] [[0] [1]]}
finish analysis for: (*runtime.sweepClass).clear, result:  &{[0] [] []}
end analysis for: runtime.sigfwd , result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: (*time.Timer).Stop, result:  &{[0] [[]] []}
finish analysis for: (*context.timerCtx).cancel, result:  &{[0 2 3] [] [[1] [2] [3]]}
finish analysis for: runtime.spanHasSpecials, result:  &{[] [] [[0]]}
finish analysis for: (*runtime.mspan).incPinCounter, result:  &{[0] [] [[1]]}
finish analysis for: (runtime.liveUserArenaChunk).incPinCounter, result:  &{[0] [] [[1]]}
end analysis for: slices.heapSortCmpFunc , result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: sort.intsImpl, result:  &{[] [] [[0]]}
finish analysis for: sort.Ints, result:  &{[] [] [[0]]}
finish analysis for: (*runtime.traceBuf).stringData, result:  &{[0] [] [[1]]}
finish analysis for: (*runtime.traceStringTable).writeString, result:  &{[0 1] [] [[0 1] [2] [3]]}
finish analysis for: (*runtime.traceStringTable).put$1, result:  &{[] [] []}
finish analysis for: (*reflect.Value).Index, result:  &{[0] [[1]] [[1]]}
finish analysis for: runtime.runtime_setProfLabel, result:  &{[] [] [[0]]}
finish analysis for: (*strings.Reader).UnreadByte, result:  &{[0] [[]] []}
end analysis for: runtime.close_trampoline , result:  &{[] [] []}
finish analysis for: unicode/utf8.FullRune, result:  &{[] [[]] [[0]]}
finish analysis for: (internal/reflectlite.rtype).ArrayType, result:  &{[0] [[0]] []}
finish analysis for: (*io.nopCloserWriterTo).Read, result:  &{[0] [[] []] [[1]]}
finish analysis for: internal/bisect.fnv, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (context.stopCtx).Err, result:  &{[0] [[0]] []}
finish analysis for: math.xatan, result:  &{[] [[0]] [[0]]}
finish analysis for: math.satan, result:  &{[] [[0]] [[0]]}
finish analysis for: math.atan, result:  &{[] [[0]] [[0]]}
finish analysis for: math.archAtan, result:  &{[] [[]] [[0]]}
finish analysis for: math.Atan, result:  &{[] [[0]] [[0]]}
finish analysis for: (*errors.joinError).Error, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.liveUserArenaChunk).objIndex, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (*reflect.flag).panicNotMap, result:  &{[0] [] []}
finish analysis for: internal/reflectlite.arrayAt, result:  &{[] [[0 1 2]] [[0] [1] [2] [3]]}
finish analysis for: internal/reflectlite.Swapper$9, result:  &{[] [] [[0] [1]]}
finish analysis for: sort.swapRange_func, result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: sort.rotate_func, result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: sort.symMerge_func, result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: runtime.panicdottypeE, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: os.tempDir, result:  &{[] [[]] []}
finish analysis for: os.TempDir, result:  &{[] [[]] []}
finish analysis for: os.joinPath, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: os.nextRandom, result:  &{[] [[]] []}
finish analysis for: os.Remove, result:  &{[] [[0]] [[0]]}
finish analysis for: os.Mkdir, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: os.IsExist, result:  &{[] [[0]] [[0]]}
finish analysis for: os.MkdirTemp, result:  &{[] [[0 1] [0 1]] [[0] [1]]}
finish analysis for: (context.emptyCtx).Done, result:  &{[0] [[]] []}
finish analysis for: (context.backgroundCtx).Done, result:  &{[0] [[]] []}
finish analysis for: strings.NewReader, result:  &{[] [[0]] [[0]]}
finish analysis for: (*reflect.Value).mustBeExported, result:  &{[0] [] []}
finish analysis for: unicode.is32, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: unicode.is16, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: unicode.isExcludingLatin, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: unicode.IsLetter, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.freeUserArenaChunk, result:  &{[] [] [[0] [1]]}
finish analysis for: (syscall.WaitStatus).Exited, result:  &{[0] [[0]] []}
finish analysis for: (*os.ProcessState).exited, result:  &{[0] [[0]] []}
finish analysis for: (os/exec.ExitError).exited, result:  &{[0] [[0]] []}
finish analysis for: time.Now, result:  &{[] [[]] []}
finish analysis for: (time.Time).Add, result:  &{[0 1] [[0 1]] [[1]]}
finish analysis for: (time.Time).Before, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: time.subMono, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (time.Time).Sub, result:  &{[0] [[0 1]] [[0 1]]}
finish analysis for: time.Until, result:  &{[] [[0]] [[0]]}
finish analysis for: internal/poll.setDeadlineImpl, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: (*internal/poll.FD).SetDeadline, result:  &{[0] [[]] [[1]]}
finish analysis for: (*os.File).setDeadline, result:  &{[0] [[]] [[1]]}
finish analysis for: (*os.File).SetDeadline, result:  &{[0] [[]] [[1]]}
finish analysis for: (context.todoCtx).Value, result:  &{[0] [[]] [[1]]}
finish analysis for: sort.order2, result:  &{[] [[1 2] [1 2]] [[0] [1] [2] [3]]}
finish analysis for: sort.median, result:  &{[] [[1 2 3]] [[0] [1] [2] [3] [4]]}
finish analysis for: syscall.ParseUnixRights, result:  &{[] [[0] []] [[0]]}
finish analysis for: (*runtime.Func).startLine, result:  &{[0] [[0]] []}
finish analysis for: (time.Time).Minute, result:  &{[0] [[0]] []}
finish analysis for: (*time.Time).Minute, result:  &{[0] [[]] []}
finish analysis for: runtime.entersyscallblock$1, result:  &{[] [] []}
finish analysis for: (*internal/abi.ChanType).GcSlice, result:  &{[0] [[]] [[1] [2]]}
end analysis for: syscall.libc_getgid_trampoline , result:  &{[] [] []}
finish analysis for: (*internal/poll.FD).SetWriteDeadline, result:  &{[0] [[]] [[1]]}
finish analysis for: (*os.File).setWriteDeadline, result:  &{[0] [[]] [[1]]}
finish analysis for: (*os.File).SetWriteDeadline, result:  &{[0] [[]] [[1]]}
finish analysis for: (*os.fileWithoutWriteTo).SetWriteDeadline, result:  &{[0] [[]] [[1]]}
finish analysis for: runtime.entersyscall_gcwait, result:  &{[] [] []}
finish analysis for: runtime.initMetrics$8, result:  &{[] [] [[0] [0 1]]}
finish analysis for: os.splitPath, result:  &{[] [[0] [0]] [[0]]}
finish analysis for: (*fmt.ss).Read, result:  &{[0] [[] []] [[1]]}
finish analysis for: (*runtime.addrRange).takeFromFront, result:  &{[0 1 2] [[0 1 2] []] [[1] [2]]}
finish analysis for: (time.Time).appendStrictRFC3339$1, result:  &{[] [[0]] [[0]]}
finish analysis for: (time.Time).appendStrictRFC3339, result:  &{[0] [[0 1] []] [[1]]}
finish analysis for: (time.Time).MarshalJSON, result:  &{[0] [[0] []] []}
end analysis for: internal/poll.runtime_Semacquire , result:  &{[] [] [[0]]}
finish analysis for: runtime._VDSO, result:  &{[] [] []}
finish analysis for: runtime.buildTypeAssertCache$1, result:  &{[] [] [[0] [1]]}
finish analysis for: (runtime.pollInfo).expiredWriteDeadline, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.pollInfo).expiredWriteDeadline, result:  &{[0] [[]] []}
finish analysis for: (*runtime.pallocData).pages64, result:  &{[0] [[0]] [[1]]}
finish analysis for: (*runtime.liveUserArenaChunk).heapBitsSmallForAddr, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: math/bits.ReverseBytes16, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.os_sigpipe, result:  &{[] [] []}
finish analysis for: (io/fs.dirInfo).IsDir, result:  &{[0] [[0]] []}
finish analysis for: io/fs.ValidPath, result:  &{[] [[]] [[0]]}
finish analysis for: internal/safefilepath.fromFS, result:  &{[] [[0] []] [[0]]}
finish analysis for: internal/safefilepath.FromFS, result:  &{[] [[0] []] [[0]]}
finish analysis for: (os.dirFS).join, result:  &{[0] [[0 1] []] [[1]]}
finish analysis for: (os.dirFS).Open, result:  &{[0] [[0 1] [0 1]] [[1]]}
finish analysis for: (*os.dirFS).Open, result:  &{[0] [[1] [1]] [[1]]}
finish analysis for: (*os.File).ReadDir, result:  &{[0] [[0] [0]] [[1]]}
finish analysis for: (os.fileWithoutReadFrom).ReadDir, result:  &{[0] [[0] [0]] [[1]]}
finish analysis for: (internal/reflectlite.Value).Kind, result:  &{[0] [[0]] []}
finish analysis for: (internal/reflectlite.Value).Type, result:  &{[0] [[0]] []}
finish analysis for: internal/reflectlite.Swapper, result:  &{[] [[]] [[0]]}
finish analysis for: math/bits.Len, result:  &{[] [[0]] [[0]]}
finish analysis for: sort.nextPowerOfTwo, result:  &{[] [[0]] [[0]]}
finish analysis for: (*sort.xorshift).Next, result:  &{[0] [[0]] []}
finish analysis for: sort.breakPatterns_func, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: sort.order2_func, result:  &{[] [[1 2] [1 2]] [[0] [1] [2] [3]]}
finish analysis for: sort.median_func, result:  &{[] [[1 2 3]] [[0] [1] [2] [3] [4]]}
finish analysis for: sort.medianAdjacent_func, result:  &{[] [[1]] [[0] [1] [2]]}
finish analysis for: sort.choosePivot_func, result:  &{[] [[1 2] []] [[0] [1] [2]]}
finish analysis for: sort.reverseRange_func, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: sort.partialInsertionSort_func, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: sort.partitionEqual_func, result:  &{[] [[1]] [[0] [1] [2] [3]]}
finish analysis for: sort.partition_func, result:  &{[] [[2] []] [[0] [1] [2] [3]]}
finish analysis for: sort.siftDown_func, result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: sort.heapSort_func, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: sort.insertionSort_func, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: sort.pdqsort_func, result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: sort.Slice, result:  &{[] [] [[0] [1]]}
finish analysis for: os.ReadDir, result:  &{[] [[0] [0]] [[0]]}
finish analysis for: (os.dirFS).ReadDir, result:  &{[0] [[0 1] [0 1]] [[1]]}
finish analysis for: (*os.dirFS).ReadDir, result:  &{[0] [[1] [1]] [[1]]}
finish analysis for: io/fs.ReadDir, result:  &{[] [[1] [1]] [[0] [1]]}
finish analysis for: (*path.lazybuf).append, result:  &{[0 1] [] [[1]]}
finish analysis for: (*path.lazybuf).string, result:  &{[0] [[0]] []}
finish analysis for: (*path.lazybuf).index, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: path.Clean, result:  &{[] [[0]] [[0]]}
finish analysis for: path.Join, result:  &{[] [[0]] [[0]]}
finish analysis for: io/fs.walkDir, result:  &{[] [[]] [[0] [1] [2] [3]]}
finish analysis for: runtime.finishPageTrace, result:  &{[] [] []}
finish analysis for: runtime.runExitHooks$1, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.runExitHooks, result:  &{[] [] [[0]]}
finish analysis for: (*internal/godebug.Setting).Name, result:  &{[0] [[0]] []}
finish analysis for: internal/bisect.fnvUint64, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: internal/bisect.fnvUint32, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: internal/bisect.fnvString, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: internal/bisect.Hash, result:  &{[] [[0]] [[0]]}
finish analysis for: (*internal/bisect.Matcher).matchResult, result:  &{[0] [[0]] [[1]]}
finish analysis for: (*internal/bisect.Matcher).ShouldPrint, result:  &{[0] [[0]] [[1]]}
finish analysis for: (*internal/bisect.atomicPointerDedup).Load, result:  &{[0] [[]] []}
finish analysis for: (*internal/bisect.atomicPointerDedup).CompareAndSwap, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: (*internal/bisect.Matcher).MarkerOnly, result:  &{[0] [[0]] []}
finish analysis for: (*internal/bisect.dedup).seen, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (*internal/bisect.dedup).seenLossy, result:  &{[0] [[]] [[1]]}
finish analysis for: internal/bisect.PrintMarker, result:  &{[] [[]] [[0 1] [1]]}
finish analysis for: (*internal/bisect.Matcher).ShouldEnable, result:  &{[0] [[0]] [[1]]}
finish analysis for: (*internal/bisect.Matcher).stack, result:  &{[0] [[0]] [[1]]}
finish analysis for: (*internal/bisect.Matcher).Stack, result:  &{[0] [[0]] [[1]]}
finish analysis for: (*internal/godebug.Setting).Value, result:  &{[0] [[]] []}
finish analysis for: (*internal/godebug.Setting).String, result:  &{[0] [[0]] []}
finish analysis for: (*internal/poll.FD).Write, result:  &{[0] [[] []] [[1]]}
finish analysis for: runtime.bytes, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.printstring, result:  &{[] [] [[0]]}
finish analysis for: runtime.printbool, result:  &{[] [] [[0]]}
end analysis for: slices.rotateOrdered , result:  &{[] [] [[0] [1] [2] [3]]}
end analysis for: runtime.syscall , result:  &{[] [] []}
finish analysis for: (*runtime.heapStatsDelta).merge, result:  &{[0 1] [] [[1]]}
finish analysis for: (*runtime.consistentHeapStats).unsafeRead, result:  &{[0] [] [[0 1]]}
finish analysis for: runtime.readmemstats_m, result:  &{[] [] [[0]]}
finish analysis for: (internal/reflectlite.rtype).uncommon, result:  &{[0] [[0]] []}
finish analysis for: (*internal/reflectlite.rtype).uncommon, result:  &{[0] [[]] []}
end analysis for: syscall.libc_getcwd_trampoline , result:  &{[] [] []}
finish analysis for: (time.Duration).Nanoseconds, result:  &{[0] [[0]] []}
finish analysis for: (*time.Duration).Nanoseconds, result:  &{[0] [[]] []}
end analysis for: syscall.libc_utimes_trampoline , result:  &{[] [] []}
finish analysis for: fmt.notSpace, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.inheap, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.cgoCheckUnknownPointer, result:  &{[] [[0] []] [[0] [1]]}
finish analysis for: (*internal/abi.ChanType).Size, result:  &{[0] [[0]] []}
finish analysis for: (*reflect.Value).MapRange, result:  &{[0] [[]] []}
finish analysis for: time.lessThanHalf, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (time.Time).Round, result:  &{[0 1] [[0 1]] [[1]]}
finish analysis for: (*time.Time).Round, result:  &{[0] [[1]] [[1]]}
finish analysis for: runtime.roundupsize, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: runtime.rawruneslice, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.stringtoslicerune, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*fmt.pp).doPrintln, result:  &{[0 1] [] [[1]]}
finish analysis for: (*fmt.pp).free, result:  &{[0] [] []}
finish analysis for: fmt.Appendln, result:  &{[] [[0 1]] [[0 1] [1]]}
finish analysis for: (*reflect.ptrType).ChanDir, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.markBits).setMarked, result:  &{[0] [] []}
finish analysis for: runtime.reflect_memclrNoHeapPointers, result:  &{[] [] [[0] [1]]}
end analysis for: syscall.syscall6X , result:  &{[] [[] [] []] [[0] [1] [2] [3] [4] [5] [6]]}
finish analysis for: math.Erfinv, result:  &{[] [[0]] [[0]]}
finish analysis for: math.Erfcinv, result:  &{[] [[0]] [[0]]}
finish analysis for: (*syscall.Timeval).Nano, result:  &{[0] [[0]] []}
finish analysis for: (*os.ProcessState).userTime, result:  &{[0] [[0]] []}
finish analysis for: (*os.ProcessState).UserTime, result:  &{[0] [[0]] []}
finish analysis for: runtime.racefini, result:  &{[] [] []}
end analysis for: syscall.libc_rmdir_trampoline , result:  &{[] [] []}
finish analysis for: (*reflect.Value).TryRecv, result:  &{[0] [[] []] []}
end analysis for: internal/syscall/unix.RecvmsgInet4 , result:  &{[] [[] [] [] []] [[0] [1] [2] [3] [4]]}
end analysis for: runtime.panicSlice3Alen , result:  &{[] [] [[0] [1]]}
finish analysis for: (*runtime.addrRanges).contains, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (*internal/abi.Name).IsExported, result:  &{[0] [[]] []}
finish analysis for: (*io/fs.PathError).Unwrap, result:  &{[0] [[0]] []}
end analysis for: runtime.syscallPtr , result:  &{[] [] []}
end analysis for: sync/atomic.SwapInt64 , result:  &{[] [[]] [[0] [1]]}
end analysis for: runtime.call262144 , result:  &{[] [] [[0] [1] [2] [3] [4] [5] [6]]}
end analysis for: slices.Replace , result:  &{[] [[]] [[0] [1] [2] [3]]}
finish analysis for: (runtime.traceLocker).GoSysCall, result:  &{[0] [] []}
finish analysis for: runtime.reentersyscall$2, result:  &{[] [] []}
finish analysis for: time.NewTicker, result:  &{[] [[0]] [[0]]}
finish analysis for: time.Tick, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.memhash_varlen, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*reflect.Value).SetBool, result:  &{[0] [] [[1]]}
finish analysis for: (context.deadlineExceededError).Timeout, result:  &{[0] [[]] []}
finish analysis for: (*context.deadlineExceededError).Timeout, result:  &{[0] [[]] []}
finish analysis for: io.ReadAtLeast, result:  &{[] [[] []] [[0] [1] [2]]}
finish analysis for: io.ReadFull, result:  &{[] [[] []] [[0] [1]]}
finish analysis for: (*fmt.readRune).readByte, result:  &{[0] [[0] []] []}
finish analysis for: runtime.convT32, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.itoa, result:  &{[] [[0 1]] [[0 1] [1]]}
finish analysis for: runtime.appendIntStr, result:  &{[] [[0 1]] [[0] [1] [2]]}
finish analysis for: (runtime.boundsError).Error, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.boundsError).Error, result:  &{[0] [[]] []}
finish analysis for: (*fmt.ss).doScan, result:  &{[0] [[] []] [[1]]}
finish analysis for: fmt.Fscanln, result:  &{[] [[] []] [[0] [1]]}
finish analysis for: bytes.IndexByte, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*bytes.Buffer).readSlice, result:  &{[0] [[0] []] [[1]]}
finish analysis for: (*bytes.Buffer).ReadBytes, result:  &{[0] [[0] []] [[1]]}
finish analysis for: (*internal/abi.MapType).ReflexiveKey, result:  &{[0] [[0]] []}
finish analysis for: runtime.runtime_expandFinalInlineFrame, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.printCgoTraceback$1, result:  &{[] [[] []] []}
finish analysis for: (*io.multiReader).writeToWithBuffer, result:  &{[0] [[] [1 2]] [[1 2] [2]]}
finish analysis for: (*io.multiReader).WriteTo, result:  &{[0] [[] [1]] [[1]]}
finish analysis for: (runtime.statDepSet).difference, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (*runtime.statDepSet).empty, result:  &{[0] [[]] []}
finish analysis for: (runtime.statDepSet).union, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (*runtime.statDepSet).has, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (*runtime.gcStatsAggregate).compute, result:  &{[0] [] []}
finish analysis for: (*runtime.cpuStatsAggregate).compute, result:  &{[0] [] []}
finish analysis for: (*runtime.sysStatsAggregate).compute, result:  &{[0] [] []}
finish analysis for: (*runtime.consistentHeapStats).read, result:  &{[0] [] [[0 1]]}
finish analysis for: (*runtime.heapStatsAggregate).compute, result:  &{[0] [] []}
finish analysis for: (*runtime.statAggregate).ensure, result:  &{[0 1] [] [[1]]}
finish analysis for: math.archTan, result:  &{[] [[]] [[0]]}
finish analysis for: context.Background, result:  &{[] [[]] []}
end analysis for: syscall.libc_fpathconf_trampoline , result:  &{[] [] []}
finish analysis for: runtime.ReadMemStats$1, result:  &{[] [] []}
finish analysis for: (*sync.entry).tryCompareAndSwap, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: (*runtime.rwmutex).lock, result:  &{[0] [] []}
end analysis for: (*runtime/internal/atomic.Pointer[runtime._defer]).Load[runtime._defer] , result:  &{[0] [[]] []}
finish analysis for: reflect.makeComplex, result:  &{[] [[0 1 2]] [[0] [1] [2]]}
finish analysis for: reflect.cvtComplex, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*os.ProcessState).sysUsage, result:  &{[0] [[0]] []}
finish analysis for: (*os/exec.ExitError).sysUsage, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.FuncType).Uncommon, result:  &{[0] [[0]] []}
end analysis for: runtime.asyncPreempt , result:  &{[] [] []}
finish analysis for: math.archRemainder, result:  &{[] [[]] [[0] [1]]}
end analysis for: slices.Grow , result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*runtime/internal/atomic.UnsafePointer).Store, result:  &{[0] [] [[1]]}
finish analysis for: os/exec.interfaceEqual$1, result:  &{[] [] []}
finish analysis for: (*internal/abi.Type).IsDirectIface, result:  &{[0] [[0]] []}
finish analysis for: (internal/reflectlite.rtype).IsDirectIface, result:  &{[0] [[0]] []}
finish analysis for: runtime.traceThreadDestroy$1, result:  &{[] [] []}
finish analysis for: runtime.bswapIfBigEndian, result:  &{[] [[0]] [[0]]}
finish analysis for: (runtime.writeUserArenaHeapBits).flush, result:  &{[0 1 2 3] [] [[1] [2] [3]]}
finish analysis for: runtime.sigNotOnStack, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: (*internal/abi.PtrType).MapType, result:  &{[0] [[0]] []}
finish analysis for: (*strings.stringFinder).next, result:  &{[0] [[]] [[1]]}
finish analysis for: (*strings.singleStringReplacer).WriteString, result:  &{[0] [[] []] [[1] [2]]}
finish analysis for: (*strings.Replacer).WriteString, result:  &{[0] [[] []] [[1] [2]]}
finish analysis for: runtime._LostExternalCode, result:  &{[] [] []}
finish analysis for: runtime.nextMarkBitArenaEpoch, result:  &{[] [] []}
finish analysis for: strconv.FormatFloat, result:  &{[] [[0 1 2]] [[0] [1] [2] [3]]}
finish analysis for: strconv.FormatComplex, result:  &{[] [[1 2]] [[0] [1] [2] [3]]}
finish analysis for: math.mod, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: math.archMod, result:  &{[] [[]] [[0] [1]]}
finish analysis for: math.Mod, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*internal/abi.SliceType).GcSlice, result:  &{[0] [[]] [[1] [2]]}
end analysis for: runtime.publicationBarrier , result:  &{[] [] []}
end analysis for: internal/syscall/unix.libc_freeaddrinfo_trampoline , result:  &{[] [] []}
finish analysis for: runtime.stkobjinit, result:  &{[] [] []}
finish analysis for: (reflect.Value).Close, result:  &{[0] [] []}
finish analysis for: (time.Duration).Milliseconds, result:  &{[0] [[0]] []}
finish analysis for: syscall.direntNamlen, result:  &{[] [[0] []] [[0]]}
finish analysis for: (*internal/abi.MapType).IndirectKey, result:  &{[0] [[0]] []}
finish analysis for: runtime.isDirectIface, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.efaceeq, result:  &{[] [[1 2]] [[0] [1] [2]]}
finish analysis for: runtime.nilinterequal, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.bucketMask, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.tophash, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.mapaccessK, result:  &{[] [[0 1 2] [0 1 2]] [[0] [1] [2]]}
finish analysis for: runtime.mapiternext, result:  &{[] [] [[0]]}
finish analysis for: runtime.reflect_mapiternext, result:  &{[] [] [[0]]}
finish analysis for: syscall.Readlink, result:  &{[] [[] []] [[0] [1]]}
finish analysis for: os.fixCount, result:  &{[] [[0] [1]] [[0] [1]]}
finish analysis for: os.readlink, result:  &{[] [[] [0]] [[0]]}
finish analysis for: os.Readlink, result:  &{[] [[] [0]] [[0]]}
finish analysis for: path/filepath.walkSymlinks, result:  &{[] [[0] [0]] [[0]]}
finish analysis for: runtime.funpack32, result:  &{[] [[0] [0] [0] [] []] [[0]]}
finish analysis for: runtime.fpack64, result:  &{[] [[0 1 2]] [[0] [1] [2] [3]]}
finish analysis for: runtime.f32to64, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.funpack64, result:  &{[] [[0] [0] [0] [] []] [[0]]}
finish analysis for: runtime.fcmp64, result:  &{[] [[] []] [[0] [1]]}
finish analysis for: runtime.fgt32, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.printScavTrace, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: (*runtime.mheap).scavengeAll, result:  &{[0] [] []}
finish analysis for: runtime.mspinning, result:  &{[] [] []}
finish analysis for: runtime.trace_userTaskEnd, result:  &{[] [] [[0]]}
finish analysis for: (*os.File).read, result:  &{[0] [[] []] [[1]]}
finish analysis for: (*os.fileWithoutReadFrom).read, result:  &{[0] [[] []] [[1]]}
finish analysis for: (*strings.trieNode).add, result:  &{[0 1 2 3] [] [[1] [2] [3] [4]]}
finish analysis for: (*runtime.scavengerState).park, result:  &{[0] [] []}
finish analysis for: runtime.panicnildottype, result:  &{[] [] [[0]]}
finish analysis for: runtime.runtime_pprof_runtime_cyclesPerSecond, result:  &{[] [[]] []}
end analysis for: syscall.libc_open_trampoline , result:  &{[] [] []}
finish analysis for: syscall.exit, result:  &{[] [[]] [[0]]}
finish analysis for: syscall.setsockopt, result:  &{[] [[]] [[0] [1] [2] [3] [4]]}
finish analysis for: syscall.SetsockoptIPMreq, result:  &{[] [[]] [[0] [1] [2] [3]]}
finish analysis for: syscall.SetsockoptInt, result:  &{[] [[]] [[0] [1] [2] [3]]}
finish analysis for: (*internal/poll.FD).SetsockoptInt, result:  &{[0] [[]] [[1] [2] [3]]}
finish analysis for: syscall.faketimeWrite, result:  &{[] [[]] [[0] [1]]}
finish analysis for: syscall.Write, result:  &{[] [[] []] [[0] [1]]}
finish analysis for: runtime.sysctlbyname, result:  &{[] [[]] [[0] [1] [2] [3] [4]]}
finish analysis for: runtime.sysctlbynameInt32, result:  &{[] [[] []] [[0]]}
finish analysis for: (sort.IntSlice).Len, result:  &{[0] [[]] []}
finish analysis for: (internal/abi.Kind).String, result:  &{[0] [[]] []}
finish analysis for: (*internal/reflectlite.ValueError).Error, result:  &{[0] [[0]] []}
finish analysis for: reflect.makeFloat, result:  &{[] [[0 1 2]] [[0] [1] [2]]}
finish analysis for: reflect.cvtIntFloat, result:  &{[] [[0 1]] [[0] [1]]}
end analysis for: runtime/internal/atomic.Xchgint32 , result:  &{[] [[]] [[0] [1]]}
end analysis for: runtime.syscallX , result:  &{[] [] []}
finish analysis for: (time.Time).Unix, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.StructType).ExportedMethods, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.MapType).HashMightPanic, result:  &{[0] [[0]] []}
finish analysis for: (internal/abi.Name).IsBlank, result:  &{[0] [[0]] []}
finish analysis for: runtime.mapKeyError2, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.mapKeyError, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (io.discard).Write, result:  &{[0] [[] []] [[1]]}
finish analysis for: (*io.discard).Write, result:  &{[0] [[] []] [[1]]}
finish analysis for: bytes.FieldsFunc, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: bytes.Fields, result:  &{[] [[0]] [[0]]}
end analysis for: slices.swapRangeCmpFunc , result:  &{[] [] [[0] [1] [2] [3] [4]]}
finish analysis for: (reflect.Value).MapIndex, result:  &{[0] [[0]] [[0 1]]}
finish analysis for: runtime.cstring, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.unsetenv_c, result:  &{[] [] [[0]]}
finish analysis for: runtime.reparsedebugvars, result:  &{[] [] [[0]]}
finish analysis for: runtime.godebugNotify, result:  &{[] [] [[0]]}
finish analysis for: runtime.syscall_runtimeUnsetenv, result:  &{[] [] [[0]]}
finish analysis for: (sort.IntSlice).Less, result:  &{[0] [[0]] [[1] [2]]}
end analysis for: reflect.typedarrayclear , result:  &{[] [] [[0] [1] [2]]}
finish analysis for: (reflect.Value).SetBytes, result:  &{[0 1] [] [[1]]}
end analysis for: syscall.libc_lstat_trampoline , result:  &{[] [] []}
finish analysis for: (*io/fs.FileMode).Type, result:  &{[0] [[]] []}
finish analysis for: syscall.parseLinkLayerAddr, result:  &{[] [[0] [0] []] [[0]]}
finish analysis for: runtime.prepGoExitFrame, result:  &{[] [] [[0]]}
finish analysis for: (runtime.liveUserArenaChunk).newPinnerBits, result:  &{[0] [[]] []}
finish analysis for: runtime.procPin, result:  &{[] [[]] []}
finish analysis for: runtime.sync_runtime_procPin, result:  &{[] [[]] []}
finish analysis for: (*sync.entry).trySwap, result:  &{[0] [[] []] [[1]]}
finish analysis for: (*os.File).Read, result:  &{[0] [[] [0]] [[1]]}
finish analysis for: (os.fileWithoutReadFrom).Read, result:  &{[0] [[] [0]] [[1]]}
finish analysis for: (*os.File).write, result:  &{[0] [[] []] [[1]]}
finish analysis for: os.epipecheck, result:  &{[] [] [[0] [1]]}
finish analysis for: (*os.File).Write, result:  &{[0] [[] [0]] [[1]]}
finish analysis for: (*os.File).WriteString, result:  &{[0] [[] [0]] [[1]]}
finish analysis for: (os.fileWithoutReadFrom).WriteString, result:  &{[0] [[] [0]] [[1]]}
finish analysis for: (*internal/abi.MapType).Kind, result:  &{[0] [[0]] []}
finish analysis for: (*os.File).Readdir, result:  &{[0] [[0] [0]] [[1]]}
finish analysis for: (*os.fileWithoutReadFrom).Readdir, result:  &{[0] [[0] [0]] [[1]]}
finish analysis for: runtime.sync_runtime_doSpin, result:  &{[] [] []}
finish analysis for: (*reflect.ptrType).HasName, result:  &{[0] [[0]] []}
end analysis for: syscall.libc_kqueue_trampoline , result:  &{[] [] []}
finish analysis for: runtime.unminit, result:  &{[] [] []}
end analysis for: sync/atomic.CompareAndSwapUint32 , result:  &{[] [[]] [[0] [1] [2]]}
end analysis for: sync/atomic.LoadUint32 , result:  &{[] [[]] [[0]]}
finish analysis for: (*internal/abi.Type).FieldAlign, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.ArrayType).FieldAlign, result:  &{[0] [[0]] []}
finish analysis for: (*fmt.pp).doPrint, result:  &{[0 1] [] [[1]]}
finish analysis for: fmt.Fprint, result:  &{[] [[] []] [[0 1] [1]]}
finish analysis for: fmt.Print, result:  &{[] [[] []] [[0]]}
finish analysis for: runtime.divlu, result:  &{[] [[0 1 2] [0 1 2]] [[0] [1] [2]]}
finish analysis for: runtime.fdiv64, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.fpack32, result:  &{[] [[0 1 2]] [[0] [1] [2] [3]]}
finish analysis for: runtime.f64to32, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.fdiv32, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.reentersyscall$1, result:  &{[] [] []}
finish analysis for: (*sync.entry).swapLocked, result:  &{[0] [[]] [[1]]}
finish analysis for: (*sync.Map).Swap, result:  &{[0] [[] []] [[1] [2]]}
finish analysis for: (*sync.Map).Store, result:  &{[0] [] [[1] [2]]}
finish analysis for: reflect.FuncOf$1, result:  &{[] [[0]] [[0]]}
finish analysis for: (*context.cancelCtx).propagateCancel, result:  &{[0 1] [] [[1] [1 2]]}
finish analysis for: (*context.timerCtx).propagateCancel, result:  &{[0 1] [] [[1] [1 2]]}
finish analysis for: (*runtime.rwmutex).unlock, result:  &{[0] [] []}
finish analysis for: runtime.syscall_runtime_AfterExec, result:  &{[] [] []}
finish analysis for: (*internal/abi.FuncType).Kind, result:  &{[0] [[0]] []}
finish analysis for: internal/godebug.newIncNonDefault, result:  &{[] [[]] [[0]]}
finish analysis for: (*runtime.StackRecord).Stack, result:  &{[0] [[0]] []}
finish analysis for: (os/exec.wrappedError).Unwrap, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.mspan).layout, result:  &{[0] [[0] [0] [0]] []}
finish analysis for: (*runtime.liveUserArenaChunk).layout, result:  &{[0] [[0] [0] [0]] []}
finish analysis for: sort.float64sImpl, result:  &{[] [] [[0]]}
finish analysis for: runtime.panicdottypeI, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: runtime.fillAligned$1, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.fillAligned, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*runtime.pallocData).findScavengeCandidate, result:  &{[0] [[0 1 2] [0 1 2]] [[1] [2] [3]]}
finish analysis for: (*runtime.scavengeIndex).setEmpty, result:  &{[0] [] [[1]]}
finish analysis for: runtime.pageTraceScav, result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: runtime.sysUnused, result:  &{[] [] [[0] [1]]}
finish analysis for: (*runtime.pageAlloc).scavengeOne, result:  &{[0 1 2] [[0 2]] [[1] [2] [3]]}
finish analysis for: (*runtime.pageAlloc).scavenge$1, result:  &{[] [] []}
finish analysis for: (*runtime.stkframe).argBytes, result:  &{[0] [[0]] []}
end analysis for: runtime.write_trampoline , result:  &{[] [] []}
end analysis for: runtime.fmax , result:  &{[] [[]] [[0] [1]]}
end analysis for: slices.partitionEqualOrdered , result:  &{[] [[]] [[0] [1] [2] [3]]}
finish analysis for: internal/reflectlite.Swapper$5, result:  &{[] [] [[0] [1]]}
end analysis for: internal/bytealg.IndexString , result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*io/fs.subFS).shorten, result:  &{[0] [[1] []] [[1]]}
finish analysis for: runtime.pinnerGetPtr, result:  &{[] [[0]] [[0]]}
finish analysis for: os.Getpagesize, result:  &{[] [[]] []}
finish analysis for: runtime.goready$1, result:  &{[] [] []}
finish analysis for: runtime.goPanicSliceB, result:  &{[] [] [[0] [1]]}
finish analysis for: (*io.SectionReader).Size, result:  &{[0] [[0]] []}
finish analysis for: reflect.funcLayout$1, result:  &{[] [[]] []}
finish analysis for: (*internal/abi.ChanType).HasName, result:  &{[0] [[0]] []}
finish analysis for: (*os.ProcessState).sys, result:  &{[0] [[0]] []}
finish analysis for: runtime.gfget$2, result:  &{[] [] []}
finish analysis for: (*time.dataIO).rest, result:  &{[0] [[0]] []}
finish analysis for: runtime.debug_modinfo, result:  &{[] [[]] []}
finish analysis for: (*strings.byteReplacer).WriteString, result:  &{[0] [[] []] [[0 1] [2]]}
finish analysis for: runtime.initMetrics$43, result:  &{[] [] [[0] [0 1]]}
finish analysis for: (*io.multiReader).Read, result:  &{[0] [[] []] [[1]]}
finish analysis for: runtime.readGOGC, result:  &{[] [[]] []}
finish analysis for: runtime.parseByteCount, result:  &{[] [[0] []] [[0]]}
finish analysis for: runtime.readGOMEMLIMIT, result:  &{[] [[]] []}
finish analysis for: runtime.gcinit, result:  &{[] [] []}
finish analysis for: runtime.coroswitch, result:  &{[] [] [[0]]}
end analysis for: syscall.libc_getegid_trampoline , result:  &{[] [] []}
finish analysis for: (os.fileWithoutWriteTo).Chown, result:  &{[0] [[0]] [[1] [2]]}
finish analysis for: (*internal/reflectlite.rtype).common, result:  &{[0] [[]] []}
end analysis for: runtime/internal/atomic.StorepNoWB , result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.castogscanstatus, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: runtime.casGFromPreempted, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: runtime.suspendG, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.resumeG, result:  &{[] [] [[0]]}
finish analysis for: runtime.traceAdvance$1$1, result:  &{[] [] []}
finish analysis for: internal/syscall/unix.Fstatat, result:  &{[] [[]] [[0] [1] [2] [3]]}
end analysis for: (*sync/atomic.Pointer[syscall.Rlimit]).Store[syscall.Rlimit] , result:  &{[0] [] [[1]]}
finish analysis for: syscall.futimes, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*strings.Builder).Len, result:  &{[0] [[]] []}
finish analysis for: path.IsAbs, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.badmorestackgsignal, result:  &{[] [] []}
finish analysis for: (*reflect.Value).Int, result:  &{[0] [[]] []}
finish analysis for: (*reflect.rtype).Out, result:  &{[0] [[0]] [[1]]}
finish analysis for: (reflect.Method).IsExported, result:  &{[0] [[0]] []}
finish analysis for: (*reflect.Method).IsExported, result:  &{[0] [[]] []}
finish analysis for: runtime.full, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.chansend, result:  &{[] [[]] [[0 1] [1] [2] [3]]}
finish analysis for: runtime.selectnbsend, result:  &{[] [[]] [[0 1] [1]]}
finish analysis for: runtime.legacy_fastrand, result:  &{[] [[]] []}
finish analysis for: syscall.pread, result:  &{[] [[] []] [[0] [1] [2]]}
finish analysis for: internal/race.WriteRange, result:  &{[] [] [[0] [1]]}
finish analysis for: syscall.msanWrite, result:  &{[] [] [[0] [1]]}
finish analysis for: syscall.asanWrite, result:  &{[] [] [[0] [1]]}
finish analysis for: syscall.Pread, result:  &{[] [[] []] [[0] [1] [2]]}
finish analysis for: (*internal/poll.FD).Pread, result:  &{[0] [[] []] [[1] [2]]}
finish analysis for: (*os.File).pread, result:  &{[0] [[] []] [[1] [2]]}
finish analysis for: (*os.File).ReadAt, result:  &{[0] [[] [0]] [[1] [2]]}
finish analysis for: (*os.fileWithoutReadFrom).ReadAt, result:  &{[0] [[] [0]] [[1] [2]]}
finish analysis for: runtime.traceProcFree, result:  &{[] [] [[0]]}
end analysis for: syscall.libc_revoke_trampoline , result:  &{[] [] []}
finish analysis for: (runtime.writeUserArenaHeapBits).write, result:  &{[0 2 3] [[0 2 3]] [[1] [2] [3]]}
finish analysis for: (*runtime.mspan).decPinCounter, result:  &{[0] [[]] [[1]]}
finish analysis for: (*runtime.pinState).isMultiPinned, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.pinState).set, result:  &{[0] [] [[1] [2]]}
finish analysis for: (*runtime.pinState).setPinned, result:  &{[0] [] [[1]]}
finish analysis for: (*runtime.pinState).setMultiPinned, result:  &{[0] [] [[1]]}
finish analysis for: runtime.setPinned, result:  &{[] [[]] [[0] [1]]}
finish analysis for: syscall.SetsockoptByte, result:  &{[] [[]] [[0] [1] [2] [3]]}
finish analysis for: (*internal/poll.FD).SetsockoptByte, result:  &{[0] [[]] [[1] [2] [3]]}
finish analysis for: runtime.throw$1, result:  &{[] [] []}
finish analysis for: (*runtime.liveUserArenaChunk).setUserArenaChunkToFault, result:  &{[0] [] []}
end analysis for: syscall.libc_getuid_trampoline , result:  &{[] [] []}
finish analysis for: (*internal/abi.PtrType).GcSlice, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: (*strings.Reader).Len, result:  &{[0] [[0]] []}
finish analysis for: (syscall.Errno).Timeout, result:  &{[0] [[0]] []}
finish analysis for: bytes.ToLowerSpecial, result:  &{[] [[1]] [[0] [1]]}
finish analysis for: runtime.signame, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.dopanic_m, result:  &{[] [[]] [[0] [0 1] [0 2]]}
finish analysis for: runtime.fatalpanic$1, result:  &{[] [] []}
finish analysis for: runtime.goroutineProfileWithLabelsConcurrent, result:  &{[] [[] []] [[0] [1]]}
finish analysis for: runtime.goroutineProfileWithLabels, result:  &{[] [[] []] [[0] [1]]}
finish analysis for: runtime.GoroutineProfile, result:  &{[] [[] []] [[0]]}
finish analysis for: runtime.readTrace0$1, result:  &{[] [] []}
finish analysis for: context.WithoutCancel, result:  &{[] [[0]] [[0]]}
finish analysis for: time.fmtFrac, result:  &{[] [[] [1]] [[0 1] [1] [2]]}
finish analysis for: (time.Duration).format, result:  &{[0] [[]] [[0 1]]}
finish analysis for: (time.Duration).String, result:  &{[0] [[0]] []}
finish analysis for: (*internal/poll.FD).SetReadDeadline, result:  &{[0] [[]] [[1]]}
finish analysis for: (*runtime.addrRanges).cloneInto, result:  &{[0] [] [[0 1]]}
finish analysis for: (*runtime.pageAlloc).enableChunkHugePages, result:  &{[0] [] []}
finish analysis for: (*runtime.mheap).enableMetadataHugePages, result:  &{[0] [] []}
finish analysis for: runtime.gcMarkTermination$5, result:  &{[] [] []}
end analysis for: math.archModf , result:  &{[] [[] []] [[0]]}
finish analysis for: (*runtime.traceMap).stealID, result:  &{[0] [[]] []}
finish analysis for: (*runtime.scavengerState).init$2, result:  &{[] [[] []] [[0]]}
finish analysis for: (*runtime.scavengerState).run, result:  &{[0] [[] []] []}
finish analysis for: (*reflect.rtype).Align, result:  &{[0] [[0]] []}
finish analysis for: runtime.stringDataOnStack, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.rawstringtmp, result:  &{[] [[] [0]] [[0] [1]]}
finish analysis for: runtime.concatstrings, result:  &{[] [[1]] [[0] [1]]}
finish analysis for: runtime.concatstring3, result:  &{[] [[1 2 3]] [[0] [1] [2] [3]]}
finish analysis for: (*runtime.traceStringTable).emit, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: (runtime.traceLocker).uniqueString, result:  &{[0] [[]] [[1]]}
finish analysis for: runtime.trace_userLog, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: runtime.gcMarkTermination$4, result:  &{[] [] [[0]]}
finish analysis for: (*internal/abi.StructType).Uncommon, result:  &{[0] [[0]] []}
finish analysis for: (*os.ProcessState).systemTime, result:  &{[0] [[0]] []}
finish analysis for: (*os.ProcessState).SystemTime, result:  &{[0] [[0]] []}
finish analysis for: (*os/exec.ExitError).SystemTime, result:  &{[0] [[0]] []}
finish analysis for: runtime.fadd64, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.fadd32, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*strings.Builder).Write, result:  &{[0 1] [[] []] [[0 1]]}
finish analysis for: syscall.SetsockoptICMPv6Filter, result:  &{[] [[]] [[0] [1] [2] [3]]}
finish analysis for: syscall.getsockopt, result:  &{[] [[]] [[0] [1] [2] [3] [4]]}
finish analysis for: syscall.GetsockoptByte, result:  &{[] [[] []] [[0] [1] [2]]}
finish analysis for: bytes.indexFunc, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: bytes.IndexFunc, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*runtime/internal/atomic.Int32).Swap, result:  &{[0] [[]] [[1]]}
finish analysis for: syscall.Exchangedata, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: fmt.Fprintf, result:  &{[] [[] []] [[0 1 2] [1 2] [2]]}
finish analysis for: (runtime.errorAddressString).RuntimeError, result:  &{[0] [] []}
finish analysis for: (*runtime.pTraceState).acquireStatus, result:  &{[0] [[]] [[1]]}
finish analysis for: runtime.sysctl, result:  &{[] [[]] [[0] [1] [2] [3] [4] [5]]}
end analysis for: reflect.chanlen , result:  &{[] [[]] [[0]]}
finish analysis for: context.withCancel, result:  &{[] [[0]] [[0]]}
finish analysis for: context.WithCancel, result:  &{[] [[0] []] [[0]]}
finish analysis for: syscall.kevent, result:  &{[] [[] []] [[0] [1] [2] [3] [4] [5]]}
finish analysis for: syscall.Kevent, result:  &{[] [[] []] [[0] [1] [2] [3]]}
finish analysis for: (*runtime.addrRange).subtract, result:  &{[0] [[1]] [[1]]}
finish analysis for: runtime.gcd, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*runtime.randomOrder).reset, result:  &{[0 1] [] [[1]]}
finish analysis for: math/bits.ReverseBytes64, result:  &{[] [[0]] [[0]]}
finish analysis for: math/bits.Reverse64, result:  &{[] [[0]] [[0]]}
finish analysis for: math/bits.ReverseBytes32, result:  &{[] [[0]] [[0]]}
finish analysis for: math/bits.Reverse32, result:  &{[] [[0]] [[0]]}
finish analysis for: math/bits.Reverse, result:  &{[] [[0]] [[0]]}
finish analysis for: (*internal/abi.Name).IsBlank, result:  &{[0] [[]] []}
finish analysis for: math/bits.Div64, result:  &{[] [[0 1 2] [0 1 2]] [[0] [1] [2]]}
finish analysis for: math/bits.Rem64, result:  &{[] [[0 1 2]] [[0] [1] [2]]}
finish analysis for: (*internal/reflectlite.rtype).IfaceIndir, result:  &{[0] [[0]] []}
end analysis for: slices.medianOrdered , result:  &{[] [[]] [[0] [1] [2] [3] [4]]}
finish analysis for: reflect.makeInt, result:  &{[] [[0 1 2]] [[0] [1] [2]]}
finish analysis for: reflect.cvtFloatInt, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (reflect.Value).Convert, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: syscall.recvmsgRaw, result:  &{[] [[] [1 2 4] [1 2 4] []] [[0] [1] [2] [3] [4]]}
finish analysis for: syscall.anyToSockaddr, result:  &{[] [[0] []] [[0]]}
finish analysis for: syscall.Recvmsg, result:  &{[] [[] [1 2] [1 2] [] []] [[0] [1] [2] [3]]}
finish analysis for: (*internal/poll.FD).ReadMsg, result:  &{[0] [[] [1 2] [1 2] [] []] [[1] [2] [3]]}
finish analysis for: reflect.NewAt, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (runtime.liveUserArenaChunk).setPinnerBits, result:  &{[0] [] [[1]]}
finish analysis for: (reflect.StructField).IsExported, result:  &{[0] [[0]] []}
finish analysis for: (*reflect.StructField).IsExported, result:  &{[0] [[]] []}
finish analysis for: math/bits.Div32, result:  &{[] [[0 1 2] [0 1 2]] [[0] [1] [2]]}
finish analysis for: syscall.Getuid, result:  &{[] [[]] []}
finish analysis for: os.Getuid, result:  &{[] [[]] []}
end analysis for: (*runtime/internal/atomic.Pointer[runtime._defer]).Store[runtime._defer] , result:  &{[0] [] [[1]]}
finish analysis for: context.WithCancel$1, result:  &{[] [] []}
finish analysis for: sort.Search, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: sort.SearchInts, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (sort.IntSlice).Search, result:  &{[0] [[]] [[1]]}
finish analysis for: (*sort.IntSlice).Search, result:  &{[0] [[]] [[1]]}
finish analysis for: (*reflect.rtype).NumField, result:  &{[0] [[]] []}
finish analysis for: runtime.CPUProfile, result:  &{[] [[]] []}
finish analysis for: math.floor, result:  &{[] [[0]] [[0]]}
finish analysis for: math.Floor, result:  &{[] [[0]] [[0]]}
finish analysis for: math.ceil, result:  &{[] [[0]] [[0]]}
finish analysis for: math.Ceil, result:  &{[] [[0]] [[0]]}
finish analysis for: strings.ToValidUTF8, result:  &{[] [[0 1]] [[0] [0 1]]}
finish analysis for: syscall.SetsockoptInet4Addr, result:  &{[] [[]] [[0] [1] [2] [3]]}
finish analysis for: runtime.getempty$1, result:  &{[] [] []}
end analysis for: runtime.sync_atomic_SwapUintptr , result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*runtime.typePointers).fastForward, result:  &{[0] [[1 2]] [[1] [2]]}
finish analysis for: (syscall.WaitStatus).Signal, result:  &{[0] [[0]] []}
finish analysis for: runtime.osSetupTLS, result:  &{[] [] [[0]]}
finish analysis for: runtime.reflect_resolveTextOff, result:  &{[] [[1]] [[0] [1]]}
finish analysis for: (*runtime.scavChunkData).setNonEmpty, result:  &{[0] [] []}
finish analysis for: internal/fmtsort.isNaN, result:  &{[] [[0]] [[0]]}
finish analysis for: internal/fmtsort.floatCompare, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*sync.noCopy).Unlock, result:  &{[0] [] []}
finish analysis for: (*runtime.pallocData).findSmallN, result:  &{[0] [[0 2] [2]] [[1] [2]]}
finish analysis for: (context.valueCtx).Done, result:  &{[0] [[]] []}
finish analysis for: fmt.Fscan, result:  &{[] [[] []] [[0] [1]]}
finish analysis for: fmt.Sscan, result:  &{[] [[] []] [[0] [1]]}
finish analysis for: (*reflect.rtype).NumIn, result:  &{[0] [[0]] []}
finish analysis for: syscall.recvfrom, result:  &{[] [[] []] [[0] [1] [2] [3] [4]]}
finish analysis for: syscall.recvfromInet6, result:  &{[] [[] []] [[0] [1] [2] [3]]}
finish analysis for: runtime.selectsetpc, result:  &{[] [] [[0]]}
finish analysis for: runtime.exitThread, result:  &{[] [] [[0]]}
finish analysis for: math/bits.LeadingZeros, result:  &{[] [[0]] [[0]]}
finish analysis for: math.archErf, result:  &{[] [[]] [[0]]}
finish analysis for: syscall.Dup2, result:  &{[] [[]] [[0] [1]]}
finish analysis for: context.AfterFunc$1$1, result:  &{[] [] []}
finish analysis for: runtime.shade, result:  &{[] [] [[0]]}
finish analysis for: math.erf, result:  &{[] [[0]] [[0]]}
finish analysis for: math.Erf, result:  &{[] [[0]] [[0]]}
finish analysis for: math/bits.Len8, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.printuint, result:  &{[] [] [[0]]}
finish analysis for: runtime.printint, result:  &{[] [] [[0]]}
end analysis for: runtime.call16777216 , result:  &{[] [] [[0] [1] [2] [3] [4] [5] [6]]}
end analysis for: sync.runtime_procPin , result:  &{[] [[]] []}
finish analysis for: runtime.sigNoteSetup, result:  &{[] [] [[0]]}
finish analysis for: runtime.mayMoreStackMove, result:  &{[] [] []}
finish analysis for: runtime.internal_syscall_gostring, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.makeheapobjbv, result:  &{[] [[0 1]] [[0 1] [0 1]]}
finish analysis for: runtime.dumpmemrange, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.dumpbv, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.dumpfields, result:  &{[] [] [[0]]}
finish analysis for: runtime.dumpobj, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: runtime.dumpobjs, result:  &{[] [] []}
finish analysis for: (*strings.Builder).Reset, result:  &{[0] [] []}
finish analysis for: (*internal/abi.MapType).IsDirectIface, result:  &{[0] [[0]] []}
finish analysis for: runtime.cgoCheckArg, result:  &{[] [] [[0] [1] [2] [3] [4]]}
finish analysis for: runtime.cgoCheckPointer, result:  &{[] [] [[0] [1]]}
finish analysis for: (*runtime.rwmutex).rlock$1, result:  &{[] [] []}
finish analysis for: math.trigReduce, result:  &{[] [[0] [0]] [[0]]}
finish analysis for: math.Sincos, result:  &{[] [[0] [0]] [[0]]}
finish analysis for: math.cos, result:  &{[] [[0]] [[0]]}
finish analysis for: math.archCos, result:  &{[] [[]] [[0]]}
finish analysis for: math.Cos, result:  &{[] [[0]] [[0]]}
finish analysis for: math.pone, result:  &{[] [[0]] [[0]]}
finish analysis for: math.qone, result:  &{[] [[0]] [[0]]}
finish analysis for: math.J1, result:  &{[] [[0]] [[0]]}
end analysis for: internal/godebug.write , result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: syscall.SetBpfInterface, result:  &{[] [[]] [[0] [1]]}
finish analysis for: syscall.StringByteSlice, result:  &{[] [[0]] [[0]]}
finish analysis for: syscall.StringBytePtr, result:  &{[] [[0]] [[0]]}
finish analysis for: syscall.StringSlicePtr, result:  &{[] [[0]] [[0]]}
end analysis for: reflect.mapclear , result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.sync_atomic_runtime_procPin, result:  &{[] [[]] []}
end analysis for: reflect.memmove , result:  &{[] [] [[0] [1] [2]]}
finish analysis for: (*runtime.traceBufQueue).empty, result:  &{[0] [[0]] []}
finish analysis for: runtime.readTrace0, result:  &{[] [[] []] []}
finish analysis for: runtime.ReadTrace$1, result:  &{[] [] []}
end analysis for: runtime.debugCallPanicked , result:  &{[] [] [[0]]}
finish analysis for: strconv.convErr, result:  &{[] [[0] [0 1]] [[0] [1]]}
finish analysis for: strconv.ParseComplex, result:  &{[] [[] [0]] [[0] [1]]}
finish analysis for: runtime.gfget, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.gostartcall, result:  &{[] [] [[0 1 2] [1] [2]]}
finish analysis for: runtime.gostartcallfn, result:  &{[] [] [[0 1] [1]]}
finish analysis for: runtime.saveAncestors, result:  &{[] [[0]] [[0]]}
finish analysis for: (*runtime.gTraceState).reset, result:  &{[0] [] []}
finish analysis for: (*runtime.traceSchedResourceState).setStatusTraced, result:  &{[0] [] [[1]]}
finish analysis for: runtime.startPCForTrace, result:  &{[] [[0]] [[0]]}
finish analysis for: (runtime.traceLocker).startPC, result:  &{[0] [[]] [[1]]}
finish analysis for: (runtime.traceLocker).GoCreate, result:  &{[0] [] [[1] [2]]}
finish analysis for: runtime.racereleasemergeg, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.newproc1, result:  &{[] [[0 1 2]] [[0] [1] [2]]}
finish analysis for: runtime.newcoro$1, result:  &{[] [] []}
finish analysis for: (*os/exec.ExitError).sys, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.liveUserArenaChunk).divideByElemSize, result:  &{[0] [[0 1]] [[1]]}
end analysis for: syscall.libc_setegid_trampoline , result:  &{[] [] []}
finish analysis for: runtime.gcDrainN, result:  &{[] [[0]] [[0] [1]]}
end analysis for: syscall.libc_fstatfs_trampoline , result:  &{[] [] []}
finish analysis for: syscall.Getpid, result:  &{[] [[]] []}
finish analysis for: os.Getpid, result:  &{[] [[]] []}
finish analysis for: runtime.init#4, result:  &{[] [] []}
finish analysis for: (*reflect.structType).ArrayType, result:  &{[0] [[0]] []}
finish analysis for: internal/syscall/unix.GoString, result:  &{[] [[]] [[0]]}
finish analysis for: internal/syscall/unix.GaiStrerror, result:  &{[] [[]] [[0]]}
end analysis for: (*sync/atomic.Pointer[any]).Swap[any] , result:  &{[0] [[]] [[1]]}
finish analysis for: syscall.fstatat, result:  &{[] [[]] [[0] [1] [2] [3]]}
finish analysis for: runtime.moveTimers, result:  &{[] [] [[0 1] [0 1]]}
end analysis for: internal/syscall/unix.libc_getgrgid_r_trampoline , result:  &{[] [] []}
finish analysis for: internal/syscall/unix.Getpwuid, result:  &{[] [[]] [[0] [1] [2] [3] [4]]}
finish analysis for: runtime.copyValues, result:  &{[] [] [[0 3] [1] [2] [3] [4]]}
finish analysis for: runtime.values, result:  &{[] [] [[0] [1]]}
finish analysis for: internal/abi.UncommonSize, result:  &{[] [[]] []}
finish analysis for: (runtime.metricReader).compute, result:  &{[0] [] [[1] [2]]}
end analysis for: sync.runtime_randn , result:  &{[] [[]] [[0]]}
end analysis for: syscall.libc_pwrite_trampoline , result:  &{[] [] []}
finish analysis for: runtime.poll_runtime_pollServerInit, result:  &{[] [] []}
finish analysis for: (*os.File).Name, result:  &{[0] [[0]] []}
finish analysis for: (*os.fileWithoutWriteTo).Name, result:  &{[0] [[0]] []}
finish analysis for: runtime.fintto64, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.syscall_cgocaller, result:  &{[] [[1]] [[0] [1]]}
end analysis for: syscall.libc_recvfrom_trampoline , result:  &{[] [] []}
end analysis for: reflect.mapiterkey , result:  &{[] [[]] [[0]]}
finish analysis for: (context.backgroundCtx).String, result:  &{[0] [[]] []}
finish analysis for: (*context.backgroundCtx).String, result:  &{[0] [[]] []}
finish analysis for: (*reflect.flag).mustBeAssignableSlow, result:  &{[0] [] []}
finish analysis for: (*bytes.Buffer).String, result:  &{[0] [[0]] []}
finish analysis for: runtime.ReadMemStats, result:  &{[] [] [[0]]}
finish analysis for: sort.breakPatterns, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: io/fs.cleanGlobPath, result:  &{[] [[0]] [[0]]}
finish analysis for: path/filepath.unixIsLocal, result:  &{[] [[]] [[0]]}
finish analysis for: path/filepath.isLocal, result:  &{[] [[]] [[0]]}
finish analysis for: (*runtime.gcControllerState).resetLive, result:  &{[0 1] [] [[1]]}
finish analysis for: runtime.setitimer, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: sort.medianAdjacent, result:  &{[] [[1]] [[0] [1] [2]]}
finish analysis for: sort.choosePivot, result:  &{[] [[1 2] []] [[0] [1] [2]]}
finish analysis for: sort.reverseRange, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: sort.partialInsertionSort, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: sort.partitionEqual, result:  &{[] [[1]] [[0] [1] [2] [3]]}
finish analysis for: sort.partition, result:  &{[] [[2] []] [[0] [1] [2] [3]]}
finish analysis for: sort.heapSort, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: sort.pdqsort, result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: sort.Sort, result:  &{[] [] [[0]]}
finish analysis for: (sort.Float64Slice).Sort, result:  &{[0] [] []}
finish analysis for: (context.emptyCtx).Deadline, result:  &{[0] [[] []] []}
finish analysis for: (context.backgroundCtx).Deadline, result:  &{[0] [[] []] []}
finish analysis for: runtime.sigInitIgnored, result:  &{[] [] [[0]]}
end analysis for: runtime.call16 , result:  &{[] [] [[0] [1] [2] [3] [4] [5] [6]]}
finish analysis for: syscall.SetBpfHeadercmpl, result:  &{[] [[]] [[0] [1]]}
finish analysis for: syscall.GetsockoptIPv6MTUInfo, result:  &{[] [[] []] [[0] [1] [2]]}
end analysis for: runtime/internal/atomic.Xadduintptr , result:  &{[] [[]] [[0] [1]]}
finish analysis for: io/fs.hasMeta, result:  &{[] [[]] [[0]]}
end analysis for: cmp.Or , result:  &{[] [[]] [[0]]}
finish analysis for: (*os.file).close$thunk, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.FuncForPC, result:  &{[] [[]] [[0]]}
finish analysis for: internal/reflectlite.methodName, result:  &{[] [[]] []}
finish analysis for: (internal/reflectlite.flag).mustBeAssignable, result:  &{[0] [] []}
finish analysis for: time.get2, result:  &{[] [[0]] [[0]]}
finish analysis for: (*runtime.traceRegionAlloc).drop, result:  &{[0] [] []}
end analysis for: internal/syscall/unix.libresolv_res_9_nsearch_trampoline , result:  &{[] [] []}
finish analysis for: (*internal/poll.FD).Fchmod, result:  &{[0] [[]] [[1]]}
finish analysis for: (*internal/poll.FD).Ftruncate, result:  &{[0] [[]] [[1]]}
finish analysis for: (*os.File).Truncate, result:  &{[0] [[0]] [[1]]}
finish analysis for: (os.fileWithoutReadFrom).Truncate, result:  &{[0] [[0]] [[1]]}
finish analysis for: runtime.fint64to64, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.fuint64to64, result:  &{[] [[0]] [[0]]}
end analysis for: runtime.panicIndexU , result:  &{[] [] [[0] [1]]}
end analysis for: slices.Concat , result:  &{[] [[]] [[0]]}
end analysis for: runtime/internal/atomic.Or64 , result:  &{[] [[]] [[0] [1]]}
finish analysis for: syscall.BpfHeadercmpl, result:  &{[] [[] []] [[0]]}
finish analysis for: (time.Time).UnixMilli, result:  &{[0] [[0]] []}
finish analysis for: runtime.traceLockInit, result:  &{[] [] []}
finish analysis for: runtime.raceinit, result:  &{[] [[] []] []}
finish analysis for: runtime.moduledataverify1, result:  &{[] [] [[0]]}
finish analysis for: runtime.moduledataverify, result:  &{[] [] []}
finish analysis for: runtime.stackinit, result:  &{[] [] []}
finish analysis for: runtime.sbrk0, result:  &{[] [[]] []}
finish analysis for: runtime.mallocinit, result:  &{[] [] []}
finish analysis for: runtime.getGodebugEarly, result:  &{[] [[]] []}
finish analysis for: runtime.initPageTrace, result:  &{[] [] [[0]]}
finish analysis for: internal/cpu.sysctlEnabled, result:  &{[] [[]] [[0]]}
finish analysis for: internal/cpu.osInit, result:  &{[] [] []}
finish analysis for: internal/cpu.doinit, result:  &{[] [] []}
finish analysis for: internal/cpu.indexByte, result:  &{[] [[]] [[0] [1]]}
finish analysis for: internal/cpu.processOptions, result:  &{[] [] [[0]]}
finish analysis for: internal/cpu.Initialize, result:  &{[] [] [[0]]}
finish analysis for: runtime.cpuinit, result:  &{[] [] [[0]]}
finish analysis for: runtime.open, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: runtime.closefd, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.readRandom, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.readTimeRandom, result:  &{[] [] [[0]]}
finish analysis for: runtime.randinit, result:  &{[] [] []}
finish analysis for: runtime.initAlgAES, result:  &{[] [] []}
finish analysis for: runtime.alginit, result:  &{[] [] []}
finish analysis for: runtime.progToPointerMask, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: (*runtime.gcControllerState).addGlobals, result:  &{[0] [] [[1]]}
finish analysis for: runtime.modulesinit, result:  &{[] [] []}
finish analysis for: runtime.typelinksinit, result:  &{[] [] []}
finish analysis for: runtime.itabsinit, result:  &{[] [] []}
finish analysis for: runtime.goargs, result:  &{[] [] []}
finish analysis for: runtime.goenvs_unix, result:  &{[] [] []}
finish analysis for: runtime.goenvs, result:  &{[] [] []}
finish analysis for: runtime.issetugid, result:  &{[] [[]] []}
finish analysis for: runtime.initSecureMode, result:  &{[] [] []}
finish analysis for: runtime.secureEnv, result:  &{[] [] []}
finish analysis for: runtime.secure, result:  &{[] [] []}
finish analysis for: runtime.checkfds, result:  &{[] [] []}
finish analysis for: (*runtime.gcCPULimiterState).resetCapacity, result:  &{[0 1 2] [] [[1] [2]]}
finish analysis for: (*runtime.gQueue).push, result:  &{[0 1] [] [[0 1]]}
finish analysis for: runtime.globrunqputhead, result:  &{[] [] [[0]]}
finish analysis for: (*runtime.gcWork).putBatch, result:  &{[0] [] [[1]]}
finish analysis for: runtime.wbBufFlush1, result:  &{[] [] [[0]]}
finish analysis for: (*runtime.gcWork).dispose, result:  &{[0] [] []}
finish analysis for: runtime.freemcache, result:  &{[] [] [[0]]}
finish analysis for: (*runtime.gList).pushAll, result:  &{[0 1] [] [[1]]}
finish analysis for: runtime.gfpurge, result:  &{[] [] [[0]]}
finish analysis for: runtime.racectxend, result:  &{[] [] [[0]]}
finish analysis for: runtime.raceprocdestroy, result:  &{[] [] [[0]]}
finish analysis for: (*runtime.p).destroy, result:  &{[0] [] []}
finish analysis for: runtime.procresize, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.schedinit, result:  &{[] [] []}
finish analysis for: (*runtime.mLockProfile).captureStack$1, result:  &{[] [] []}
finish analysis for: math/bits.RotateLeft16, result:  &{[] [[0 1]] [[0] [1]]}
end analysis for: reflect.mapdelete_faststr , result:  &{[] [] [[0] [1] [2]]}
end analysis for: syscall.RawSyscall , result:  &{[] [[] [] []] [[0] [1] [2] [3]]}
finish analysis for: (reflect.Kind).String, result:  &{[0] [[0]] []}
finish analysis for: reflect.makeFloat32, result:  &{[] [[0 1 2]] [[0] [1] [2]]}
finish analysis for: (*internal/abi.SliceType).Kind, result:  &{[0] [[0]] []}
finish analysis for: (*os.File).setReadDeadline, result:  &{[0] [[]] [[1]]}
finish analysis for: (*os.File).SetReadDeadline, result:  &{[0] [[]] [[1]]}
finish analysis for: (*os.fileWithoutWriteTo).SetReadDeadline, result:  &{[0] [[]] [[1]]}
finish analysis for: runtime.convTslice, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.sysHugePageCollapseOS, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.sysHugePageCollapse, result:  &{[] [] [[0] [1]]}
finish analysis for: (*runtime.timeHistogram).write, result:  &{[0] [] [[1]]}
finish analysis for: runtime.initMetrics$33, result:  &{[] [] [[0] [1]]}
finish analysis for: math.log1p, result:  &{[] [[0]] [[0]]}
finish analysis for: math.archLog1p, result:  &{[] [[]] [[0]]}
finish analysis for: math.Log1p, result:  &{[] [[0]] [[0]]}
finish analysis for: math.asinh, result:  &{[] [[0]] [[0]]}
finish analysis for: (*reflect.flag).mustBe, result:  &{[0] [] [[1]]}
end analysis for: slices.Sort[[]string string] , result:  &{[] [] [[0]]}
finish analysis for: syscall.Stat, result:  &{[] [[]] [[0] [1]]}
finish analysis for: os.statNolog$1, result:  &{[] [[]] []}
finish analysis for: (*io.pipe).closeWrite$1, result:  &{[] [] []}
finish analysis for: (*fmt.wrapErrors).Error, result:  &{[0] [[0]] []}
finish analysis for: runtime.initMetrics$49, result:  &{[] [] [[0] [1]]}
finish analysis for: (*internal/reflectlite.rtype).MapType, result:  &{[0] [[0]] []}
finish analysis for: runtime.copyKeys, result:  &{[] [] [[0 3] [1] [2] [3] [4]]}
finish analysis for: (os.fileWithoutWriteTo).pwrite, result:  &{[0] [[] []] [[1] [2]]}
finish analysis for: (runtime.plainError).Error, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.plainError).Error, result:  &{[0] [[]] []}
end analysis for: cmp.Compare , result:  &{[] [[]] [[0] [1]]}
finish analysis for: path/filepath.evalSymlinks, result:  &{[] [[0] [0]] [[0]]}
finish analysis for: path/filepath.EvalSymlinks, result:  &{[] [[0] [0]] [[0]]}
finish analysis for: (*runtime.MemProfileRecord).InUseBytes, result:  &{[0] [[0]] []}
finish analysis for: runtime.initMetrics$30, result:  &{[] [] [[0] [0 1]]}
finish analysis for: (io.discard).ReadFrom, result:  &{[0] [[] []] [[1]]}
end analysis for: reflect.mapassign0 , result:  &{[] [] [[0] [1] [2] [3]]}
end analysis for: syscall.libc_listen_trampoline , result:  &{[] [] []}
finish analysis for: time.open, result:  &{[] [[] []] [[0]]}
finish analysis for: syscall.Read, result:  &{[] [[] []] [[0] [1]]}
finish analysis for: time.read, result:  &{[] [[] []] [[0] [1]]}
finish analysis for: time.readFile, result:  &{[] [[] [0]] [[0]]}
finish analysis for: time.preadn, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: time.get4, result:  &{[] [[0]] [[0]]}
finish analysis for: time.loadTzinfoFromZip, result:  &{[] [[] [0 1]] [[0] [1]]}
finish analysis for: time.loadTzinfoFromDirOrZip, result:  &{[] [[] [0 1]] [[0] [1]]}
finish analysis for: strings.Compare, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.encoderune, result:  &{[] [[]] [[0 1] [1]]}
finish analysis for: runtime.slicerunetostring, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*internal/abi.PtrType).ChanDir, result:  &{[0] [[0]] []}
finish analysis for: (*reflect.Value).extendSlice, result:  &{[0] [[1]] [[1]]}
finish analysis for: (os.dirFS).Stat, result:  &{[0] [[0 1] [0 1]] [[1]]}
finish analysis for: runtime.preprintpanics$1, result:  &{[] [] []}
finish analysis for: (internal/reflectlite.flag).mustBeExported, result:  &{[0] [] []}
finish analysis for: (internal/reflectlite.Value).IsNil, result:  &{[0] [[0]] []}
finish analysis for: internal/reflectlite.packEface, result:  &{[] [[0]] [[0]]}
finish analysis for: (internal/reflectlite.Value).numMethod, result:  &{[0] [[]] []}
finish analysis for: internal/reflectlite.valueInterface, result:  &{[] [[0]] [[0]]}
finish analysis for: (internal/reflectlite.flag).ro, result:  &{[0] [[]] []}
finish analysis for: (internal/reflectlite.Value).assignTo, result:  &{[0] [[0 2 3]] [[1] [2] [3]]}
finish analysis for: (internal/reflectlite.Value).Set, result:  &{[0 1] [] [[0 1]]}
finish analysis for: (*bytes.Reader).Seek, result:  &{[0 1] [[0 1] []] [[1] [2]]}
end analysis for: runtime/internal/atomic.StoreReluintptr , result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.newProfBuf, result:  &{[] [[0]] [[0] [1] [2]]}
finish analysis for: runtime.traceInitReadCPU, result:  &{[] [] []}
finish analysis for: (runtime.traceLocker).HeapGoal, result:  &{[0] [] []}
finish analysis for: runtime.newWakeableSleep, result:  &{[] [[]] []}
finish analysis for: runtime.traceStartReadCPU, result:  &{[] [] []}
finish analysis for: (*runtime.traceAdvancerState).start, result:  &{[0] [] []}
finish analysis for: runtime.StartTrace, result:  &{[] [[]] []}
finish analysis for: unicode/utf8.RuneStart, result:  &{[] [[0]] [[0]]}
finish analysis for: unicode/utf8.DecodeLastRune, result:  &{[] [[0] []] [[0]]}
finish analysis for: (*reflect.structType).ExportedMethods, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.spanClass).noscan, result:  &{[0] [[]] []}
finish analysis for: (reflect.StructTag).Lookup, result:  &{[0] [[0] []] [[1]]}
finish analysis for: runtime.overLoadFactor, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.newarray, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.makeBucketArray, result:  &{[] [[0 1 2] [0 1 2]] [[0] [1] [0 1 2]]}
finish analysis for: runtime.makemap, result:  &{[] [[0 2]] [[0] [1] [2]]}
finish analysis for: runtime.reflect_makemap, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: (*os.fileStat).Size, result:  &{[0] [[0]] []}
finish analysis for: os.ReadFile, result:  &{[] [[] [0]] [[0]]}
finish analysis for: (*reflect.ptrType).Kind, result:  &{[0] [[0]] []}
end analysis for: syscall.libc_seteuid_trampoline , result:  &{[] [] []}
finish analysis for: unicode.IsDigit, result:  &{[] [[0]] [[0]]}
finish analysis for: unicode.IsSpace, result:  &{[] [[0]] [[0]]}
finish analysis for: strings.isSeparator, result:  &{[] [[0]] [[0]]}
finish analysis for: strings.Title$1, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.dwritebyte, result:  &{[] [] [[0]]}
finish analysis for: runtime.dumpstr, result:  &{[] [] [[0]]}
finish analysis for: runtime.dumpbool, result:  &{[] [] [[0]]}
finish analysis for: runtime.dumptype, result:  &{[] [] [[0]]}
finish analysis for: (*internal/reflectlite.Value).Type, result:  &{[0] [[]] []}
finish analysis for: runtime.pthread_create, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: runtime.parkunlock_c, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*internal/abi.PtrType).Len, result:  &{[0] [[0]] []}
finish analysis for: (*sync/atomic.Int32).Swap, result:  &{[0] [[]] [[1]]}
finish analysis for: runtime.int32Hash, result:  &{[] [[]] [[0] [1]]}
finish analysis for: fmt.Errorf, result:  &{[] [[0 1]] [[0 1] [1]]}
finish analysis for: (*os.fileWithoutWriteTo).ReadAt, result:  &{[0] [[] [0]] [[1] [2]]}
finish analysis for: runtime.sigInstallGoHandler, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.NumCPU, result:  &{[] [[]] []}
end analysis for: internal/bytealg.IndexRabinKarp , result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*internal/abi.Type).FuncType, result:  &{[0] [[0]] []}
finish analysis for: (internal/reflectlite.rtype).NumIn, result:  &{[0] [[0]] []}
finish analysis for: runtime.resetForSleep, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.assertE2I, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.reflectlite_ifaceE2I, result:  &{[] [] [[0] [1] [0 1 2]]}
end analysis for: (*runtime/internal/atomic.Pointer[runtime._defer]).CompareAndSwapNoWB[runtime._defer] , result:  &{[0] [[]] [[1] [2]]}
finish analysis for: (*os.ProcessState).SysUsage, result:  &{[0] [[0]] []}
finish analysis for: (os/exec.ExitError).SysUsage, result:  &{[0] [[0]] []}
finish analysis for: (*reflect.Value).Elem, result:  &{[0] [[]] []}
finish analysis for: (io.nopCloser).Close, result:  &{[0] [[]] []}
finish analysis for: (*io.nopCloser).Close, result:  &{[0] [[]] []}
finish analysis for: internal/syscall/unix.Eaccess, result:  &{[] [[]] [[0] [1]]}
finish analysis for: os/exec.findExecutable, result:  &{[] [[0]] [[0]]}
end analysis for: internal/syscall/unix.libc_getpwuid_r_trampoline , result:  &{[] [] []}
finish analysis for: context.contextName, result:  &{[] [[]] [[0]]}
finish analysis for: strconv.quoteRuneWith, result:  &{[] [[0 1]] [[0] [1] [2] [3]]}
finish analysis for: strconv.QuoteRuneToASCII, result:  &{[] [[0]] [[0]]}
finish analysis for: time.Since, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.sigfwdgo, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: runtime.badsystemstack, result:  &{[] [] []}
finish analysis for: runtime.heapObjectsCanMove, result:  &{[] [[]] []}
finish analysis for: (*time.Ticker).Stop, result:  &{[0] [] []}
finish analysis for: runtime.flush, result:  &{[] [] []}
end analysis for: runtime.memequal_varlen , result:  &{[] [[]] [[0] [1]]}
finish analysis for: internal/bisect.printFileLine, result:  &{[] [[]] [[0 1 2 3] [1] [1 2] [3]]}
finish analysis for: (*internal/bisect.Matcher).fileLine, result:  &{[0] [[0]] [[1 2 3] [2 3] [3]]}
finish analysis for: (*time.Time).IsZero, result:  &{[0] [[]] []}
end analysis for: internal/syscall/unix.libresolv_res_9_nclose_trampoline , result:  &{[] [] []}
finish analysis for: runtime/internal/math.Add64, result:  &{[] [[0 1 2] [0 1 2]] [[0] [1] [2]]}
finish analysis for: (*reflect.ptrType).Common, result:  &{[0] [[0]] []}
end analysis for: runtime/internal/atomic.Load , result:  &{[] [[]] [[0]]}
end analysis for: runtime.rt0_go , result:  &{[] [] []}
finish analysis for: unicode.IsSymbol, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.goyield_m, result:  &{[] [] [[0]]}
finish analysis for: syscall.fcntlPtr, result:  &{[] [[] []] [[0] [1] [2]]}
finish analysis for: syscall.FcntlFlock, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: (os/exec.ExitError).userTime, result:  &{[0] [[0]] []}
finish analysis for: runtime.ReadTrace, result:  &{[] [[]] []}
finish analysis for: (reflect.Value).Recv, result:  &{[0] [[0] []] []}
finish analysis for: (*reflect.Value).Recv, result:  &{[0] [[] []] []}
finish analysis for: internal/cpu.Name, result:  &{[] [[]] []}
finish analysis for: (*context.cancelCtx).String, result:  &{[0] [[]] []}
finish analysis for: (*context.afterFuncCtx).String, result:  &{[0] [[]] []}
finish analysis for: (*bytes.Reader).UnreadByte, result:  &{[0] [[]] []}
finish analysis for: reflect.escapes, result:  &{[] [] [[0]]}
finish analysis for: (reflect.Value).Pointer, result:  &{[0] [[0]] []}
finish analysis for: (reflect.Value).Equal, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (*reflect.Value).Equal, result:  &{[0] [[1]] [[1]]}
finish analysis for: (*syscall.Timespec).Nano, result:  &{[0] [[0]] []}
finish analysis for: (*internal/reflectlite.rtype).FuncType, result:  &{[0] [[0]] []}
finish analysis for: syscall.utimensat, result:  &{[] [[]] [[0] [1] [2] [3]]}
finish analysis for: os.Truncate$1, result:  &{[] [[]] []}
end analysis for: internal/bytealg.IndexByteString , result:  &{[] [[]] [[0] [1]]}
finish analysis for: syscall.Mkfifo, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (runtime.pollInfo).eventErr, result:  &{[0] [[0]] []}
finish analysis for: (internal/poll.errNetClosing).Error, result:  &{[0] [[]] []}
finish analysis for: (*internal/reflectlite.rtype).AssignableTo, result:  &{[0] [[]] [[1]]}
finish analysis for: (*internal/abi.ArrayType).Size, result:  &{[0] [[0]] []}
finish analysis for: runtime.debugCallWrap1$1, result:  &{[] [] [[0]]}
finish analysis for: (*reflect.structType).FieldAlign, result:  &{[0] [[0]] []}
finish analysis for: (*os.fileWithoutReadFrom).Stat, result:  &{[0] [[0] [0]] []}
finish analysis for: io/fs.Stat, result:  &{[] [[0 1] [0 1]] [[0] [1]]}
finish analysis for: io/fs.FileInfoToDirEntry, result:  &{[] [[0]] [[0]]}
finish analysis for: io/fs.WalkDir, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: (*internal/reflectlite.Value).IsNil, result:  &{[0] [[]] []}
finish analysis for: runtime.racewritepc, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: runtime.closechan, result:  &{[] [] [[0]]}
finish analysis for: runtime.gcAssistAlloc1, result:  &{[] [] [[0] [1]]}
finish analysis for: syscall.Fchmod, result:  &{[] [[]] [[0] [1]]}
finish analysis for: internal/syscall/unix.Sysconf, result:  &{[] [[]] [[0]]}
finish analysis for: (*context.afterFuncCtx).propagateCancel, result:  &{[0 1] [] [[1] [1 2]]}
finish analysis for: runtime.traceExitingSyscall, result:  &{[] [] []}
finish analysis for: runtime.traceExitedSyscall, result:  &{[] [] []}
finish analysis for: runtime.exitsyscall0, result:  &{[] [] [[0]]}
finish analysis for: (*runtime.scavChunkData).shouldScavenge, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: reflect.isZero, result:  &{[] [[]] [[0]]}
finish analysis for: (reflect.Value).IsZero, result:  &{[0] [[0]] []}
finish analysis for: (*reflect.Value).IsZero, result:  &{[0] [[]] []}
finish analysis for: strings.HasSuffix, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: strings.CutSuffix, result:  &{[] [[0] []] [[0] [1]]}
end analysis for: internal/bytealg.Count , result:  &{[] [[]] [[0] [1]]}
end analysis for: syscall.libc_utimensat_trampoline , result:  &{[] [] []}
finish analysis for: os.newRawConn, result:  &{[] [[0] []] [[0]]}
finish analysis for: (*os.File).SyscallConn, result:  &{[0] [[0] []] []}
finish analysis for: (*os.fileWithoutWriteTo).SyscallConn, result:  &{[0] [[0] []] []}
finish analysis for: (*internal/abi.StructType).Kind, result:  &{[0] [[0]] []}
finish analysis for: runtime.signalDuringFork, result:  &{[] [] [[0]]}
end analysis for: runtime.gcWriteBarrier4 , result:  &{[] [] []}
finish analysis for: (internal/reflectlite.rtype).InterfaceType, result:  &{[0] [[0]] []}
finish analysis for: (context.valueCtx).Err, result:  &{[0] [[0]] []}
finish analysis for: (*context.afterFuncCtx).cancel$1, result:  &{[] [] []}
finish analysis for: strings.LastIndexByte, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.gcTestPointerClass, result:  &{[] [[]] [[0]]}
end analysis for: runtime.syscall6 , result:  &{[] [] []}
end analysis for: slices.IsSorted , result:  &{[] [[]] [[0]]}
finish analysis for: (*reflect.Value).SetComplex, result:  &{[0] [] [[1]]}
finish analysis for: runtime.freeSomeWbufs, result:  &{[] [[]] [[0]]}
finish analysis for: (time.Time).UTC, result:  &{[0] [[0]] []}
finish analysis for: (*time.Time).UTC, result:  &{[0] [[]] []}
finish analysis for: runtime.badmorestackg0$1, result:  &{[] [] []}
finish analysis for: syscall.SetKevent, result:  &{[] [] [[0 1 2 3] [1] [2] [3]]}
finish analysis for: runtime.initMetrics$46, result:  &{[] [] [[0] [0 1]]}
finish analysis for: internal/syscall/unix.Unlinkat, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: (runtime.liveUserArenaChunk).getPinnerBits, result:  &{[0] [[]] []}
finish analysis for: (reflect.Value).CanUint, result:  &{[0] [[]] []}
finish analysis for: (*reflect.Value).CanUint, result:  &{[0] [[]] []}
finish analysis for: syscall.Link, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (reflect.Value).mustBeAssignable, result:  &{[0] [] []}
finish analysis for: (*runtime.liveUserArenaChunk).isUnusedUserArenaChunk, result:  &{[0] [[0]] []}
end analysis for: reflect.chanrecv , result:  &{[] [[] []] [[0] [1] [2]]}
finish analysis for: internal/syscall/unix.Getgrouplist, result:  &{[] [[]] [[0] [1] [2] [3]]}
finish analysis for: (*internal/abi.FuncType).Common, result:  &{[0] [[0]] []}
end analysis for: syscall.libc_chmod_trampoline , result:  &{[] [] []}
end analysis for: syscall.runtime_AfterFork , result:  &{[] [] []}
end analysis for: syscall.libc_recvmsg_trampoline , result:  &{[] [] []}
end analysis for: runtime.panicSliceBU , result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.makemap_small, result:  &{[] [[]] []}
finish analysis for: (*internal/abi.SliceType).Common, result:  &{[0] [[0]] []}
finish analysis for: reflect.isLetter, result:  &{[] [[0]] [[0]]}
end analysis for: syscall.libc_mprotect_trampoline , result:  &{[] [] []}
finish analysis for: math.archCbrt, result:  &{[] [[]] [[0]]}
end analysis for: runtime.cgoSigtramp , result:  &{[] [] []}
finish analysis for: (*internal/reflectlite.flag).mustBeAssignable, result:  &{[0] [] []}
finish analysis for: runtime.ensureSigM, result:  &{[] [] []}
finish analysis for: runtime.getsig, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.sigenable, result:  &{[] [] [[0]]}
finish analysis for: runtime.signal_enable, result:  &{[] [] [[0]]}
end analysis for: math.archMin , result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*runtime.timeval).set_usec, result:  &{[0 1] [] [[1]]}
finish analysis for: runtime.setProcessCPUProfilerTimer, result:  &{[] [] [[0]]}
finish analysis for: reflect.SliceOf, result:  &{[] [[0]] [[0]]}
finish analysis for: reflect.appendGCProg, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: reflect.appendVarint, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: reflect.ArrayOf, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.panicCheck2, result:  &{[] [] [[0]]}
finish analysis for: runtime.panicdivide, result:  &{[] [] []}
finish analysis for: (*runtime.atomicHeadTailIndex).reset, result:  &{[0] [] []}
finish analysis for: (*runtime.spanSet).reset, result:  &{[0] [] []}
finish analysis for: (*context.todoCtx).Done, result:  &{[0] [[]] []}
finish analysis for: (*internal/poll.FD).RawWrite, result:  &{[0] [[]] [[1]]}
finish analysis for: (*os.rawConn).Write, result:  &{[0] [[]] [[1]]}
finish analysis for: time.loadTzinfo, result:  &{[] [[] [0 1]] [[0] [1]]}
finish analysis for: (*os/exec.Cmd).StdinPipe, result:  &{[0] [[] []] []}
finish analysis for: (*sync.copyChecker).check, result:  &{[0] [] []}
finish analysis for: (*sync.Cond).Wait, result:  &{[0] [] []}
finish analysis for: (runtime.liveUserArenaChunk).refillAllocCache, result:  &{[0 1] [] [[1]]}
end analysis for: runtime.exit_trampoline , result:  &{[] [] []}
finish analysis for: (runtime.addrRange).removeGreaterEqual, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (*runtime.addrRange).removeGreaterEqual, result:  &{[0] [[1]] [[1]]}
finish analysis for: (*reflect.structType).Uncommon, result:  &{[0] [[0]] []}
finish analysis for: bytes.TrimLeftFunc, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: bytes.lastIndexFunc, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: bytes.TrimRightFunc, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: bytes.TrimFunc, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: bytes.TrimSpace, result:  &{[] [[0]] [[0]]}
finish analysis for: (reflect.Value).MapKeys, result:  &{[0] [[0]] []}
end analysis for: syscall.libc_munmap_trampoline , result:  &{[] [] []}
finish analysis for: internal/chacha8rand.setup, result:  &{[] [] [[0] [0 1 2] [2]]}
finish analysis for: (runtime.plainError).RuntimeError, result:  &{[0] [] []}
finish analysis for: (context.withoutCancelCtx).String, result:  &{[0] [[]] []}
finish analysis for: (*context.withoutCancelCtx).String, result:  &{[0] [[]] []}
finish analysis for: runtime.initMetrics$26, result:  &{[] [] [[0] [0 1]]}
finish analysis for: (*os.fileWithoutReadFrom).readdir, result:  &{[0] [[] [0] [0] [0]] [[1] [2]]}
finish analysis for: (*reflect.Value).Interface, result:  &{[0] [[]] []}
finish analysis for: (*os.Process).done, result:  &{[0] [[]] []}
finish analysis for: syscall.kill, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: syscall.Kill, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*os.Process).signal, result:  &{[0] [[]] [[1]]}
finish analysis for: (*os.Process).Signal, result:  &{[0] [[]] [[1]]}
finish analysis for: (*os.Process).kill, result:  &{[0] [[]] []}
finish analysis for: (*os.Process).Kill, result:  &{[0] [[]] []}
finish analysis for: (*os/exec.Cmd).watchCtx, result:  &{[0] [] [[0 1]]}
finish analysis for: (*runtime.gTraceState).nextSeq, result:  &{[0] [[0]] [[1]]}
finish analysis for: internal/chacha8rand.qr, result:  &{[] [[0 1 2 3] [0 1 2 3] [0 1 2 3] [0 1 2 3]] [[0] [1] [2] [3]]}
finish analysis for: (*runtime.traceStringTable).emit$1, result:  &{[] [] []}
finish analysis for: runtime.mullu, result:  &{[] [[0 1] [0 1]] [[0] [1]]}
finish analysis for: runtime.fmul64, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.fmul32, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*internal/abi.Name).DataChecked, result:  &{[0] [[1]] [[1] [2]]}
finish analysis for: (runtime.liveUserArenaChunk).typePointersOf, result:  &{[0 1 2] [[0 1 2]] [[1] [2]]}
finish analysis for: (internal/reflectlite.rtype).In, result:  &{[0] [[0]] [[1]]}
finish analysis for: syscall.setTimeval, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: syscall.NsecToTimeval, result:  &{[] [[0]] [[0]]}
finish analysis for: (runtime.liveUserArenaChunk).typePointersOfUnchecked, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: runtime.legacy_fastrand64, result:  &{[] [[]] []}
finish analysis for: (*internal/chacha8rand.errUnmarshalChaCha8).Error, result:  &{[0] [[]] []}
finish analysis for: strconv.IsGraphic, result:  &{[] [[0]] [[0]]}
finish analysis for: (*reflect.ptrType).InterfaceType, result:  &{[0] [[0]] []}
finish analysis for: (reflect.Value).SetLen, result:  &{[0 1] [] [[1]]}
end analysis for: internal/poll.runtime_pollReset , result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.evacuate_faststr, result:  &{[] [] [[0 1 2] [0 1 2] [2]]}
finish analysis for: (*internal/abi.MapType).GcSlice, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: syscall.Listen, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.pluginftabverify, result:  &{[] [] [[0]]}
finish analysis for: (*reflect.Value).Kind, result:  &{[0] [[]] []}
finish analysis for: (*syscall.SockaddrDatalink).sockaddr, result:  &{[0] [[0] [] []] []}
finish analysis for: runtime.memequal16, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.markrootFreeGStacks, result:  &{[] [] []}
finish analysis for: math.archExpm1, result:  &{[] [[]] [[0]]}
end analysis for: syscall.libc_select_trampoline , result:  &{[] [] []}
finish analysis for: (*os.fileWithoutReadFrom).Chdir, result:  &{[0] [[0]] []}
finish analysis for: runtime.sigblock, result:  &{[] [] [[0]]}
finish analysis for: runtime.callbackUpdateSystemStack, result:  &{[] [] [[0 1] [1] [2]]}
finish analysis for: runtime.setGsignalStack, result:  &{[] [] [[0] [0 1]]}
finish analysis for: runtime.setSignalstackSP, result:  &{[] [] [[0 1] [1]]}
finish analysis for: runtime.signalstack, result:  &{[] [] [[0]]}
finish analysis for: runtime.minitSignalStack, result:  &{[] [] []}
finish analysis for: runtime.minitSignalMask, result:  &{[] [] []}
finish analysis for: runtime.pthread_self, result:  &{[] [[]] []}
finish analysis for: runtime.minit, result:  &{[] [] []}
finish analysis for: (runtime.traceLocker).GoCreateSyscall, result:  &{[0] [] [[1]]}
finish analysis for: runtime.needm, result:  &{[] [] [[0]]}
finish analysis for: runtime.noSignalStack, result:  &{[] [] [[0]]}
finish analysis for: (runtime.traceLocker).GoDestroySyscall, result:  &{[0] [] []}
finish analysis for: runtime.putExtraM, result:  &{[] [] [[0]]}
finish analysis for: runtime.dropm, result:  &{[] [] []}
finish analysis for: runtime.adjustSignalStack, result:  &{[] [[]] [[0] [1] [1 2]]}
end analysis for: runtime/internal/atomic.And , result:  &{[] [] [[0] [1]]}
finish analysis for: (*sync.entry).delete, result:  &{[0] [[] []] []}
finish analysis for: (*sync.Map).LoadAndDelete, result:  &{[0] [[] []] [[1]]}
finish analysis for: (*sync.Map).Delete, result:  &{[0] [] [[1]]}
finish analysis for: bytes.Runes, result:  &{[] [[0]] [[0]]}
end analysis for: reflect.mapiternext , result:  &{[] [] [[0]]}
finish analysis for: math/bits.RotateLeft64, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: math/bits.RotateLeft32, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: math/bits.RotateLeft, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.fintto32, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.fint32to32, result:  &{[] [[0]] [[0]]}
end analysis for: runtime/internal/atomic.Loadint64 , result:  &{[] [[]] [[0]]}
finish analysis for: (*io.onceError).Store, result:  &{[0 1] [] [[1]]}
finish analysis for: (*reflect.ptrType).Uncommon, result:  &{[0] [[0]] []}
finish analysis for: runtime.signalWaitUntilIdle, result:  &{[] [] []}
finish analysis for: runtime.gosched_m, result:  &{[] [] [[0]]}
finish analysis for: (*internal/abi.ChanType).Pointers, result:  &{[0] [[0]] []}
end analysis for: internal/cpu.getMIDR , result:  &{[] [[]] []}
finish analysis for: runtime.assertRankHeld, result:  &{[] [] [[0]]}
finish analysis for: runtime.setenv_c, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.syscall_runtimeSetenv, result:  &{[] [] [[0] [1]]}
finish analysis for: (*runtime.addrRange).takeFromBack, result:  &{[0 1 2] [[0 1 2] []] [[1] [2]]}
finish analysis for: (*runtime.mspan).writeUserArenaHeapBits, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (runtime.writeUserArenaHeapBits).pad, result:  &{[0 2] [[0 2]] [[0 1 2] [2]]}
finish analysis for: runtime.userArenaHeapBitsSetType, result:  &{[] [] [[0 1 2] [0 1 2] [0 1 2]]}
finish analysis for: runtime.userArenaHeapBitsSetSliceType, result:  &{[] [] [[0 2 3] [1] [2] [0 2 3]]}
finish analysis for: (*runtime.mspan).userArenaNextFree, result:  &{[0 1 2] [[0 1 2]] [[0 1 2] [2]]}
finish analysis for: (*runtime.userArena).alloc, result:  &{[0] [[0 1 2]] [[0 1 2] [2]]}
finish analysis for: (*runtime.userArena).slice, result:  &{[0] [] [[1] [2]]}
finish analysis for: math.atanh, result:  &{[] [[0]] [[0]]}
finish analysis for: math.archAtanh, result:  &{[] [[]] [[0]]}
finish analysis for: math.Atanh, result:  &{[] [[0]] [[0]]}
finish analysis for: math.hypot, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: syscall.Getsid, result:  &{[] [[] []] [[0]]}
finish analysis for: math/bits.OnesCount16, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.empty, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.chanrecv, result:  &{[] [[] [0 1]] [[0 1] [0 1] [2]]}
finish analysis for: runtime.chanrecv2, result:  &{[] [[0 1]] [[0 1] [0 1]]}
finish analysis for: syscall.SendmsgN, result:  &{[] [[] []] [[0] [1] [2] [3] [4]]}
finish analysis for: (*internal/poll.FD).WriteMsg, result:  &{[0] [[] [] []] [[1] [2] [3]]}
finish analysis for: (*os.ProcessState).Pid, result:  &{[0] [[0]] []}
finish analysis for: (*os/exec.ExitError).Pid, result:  &{[0] [[0]] []}
end analysis for: syscall.Syscall , result:  &{[] [[] [] []] [[0] [1] [2] [3]]}
finish analysis for: runtime.panicunsafeslicelen1, result:  &{[] [] [[0]]}
finish analysis for: syscall.Mlockall, result:  &{[] [[]] [[0]]}
finish analysis for: (runtime.lockRank).String, result:  &{[0] [[]] []}
finish analysis for: internal/fmtsort.nilCompare, result:  &{[] [[] []] [[0] [1]]}
finish analysis for: syscall.GetsockoptInt, result:  &{[] [[] []] [[0] [1] [2]]}
finish analysis for: (*os.fileWithoutWriteTo).setReadDeadline, result:  &{[0] [[]] [[1]]}
finish analysis for: (*reflect.Value).Field, result:  &{[0] [[]] [[1]]}
end analysis for: cmp.Less , result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*reflect.ptrType).FieldAlign, result:  &{[0] [[0]] []}
finish analysis for: math.min, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: math.Min, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: internal/syscall/unix.Openat, result:  &{[] [[] []] [[0] [1] [2] [3]]}
finish analysis for: os.openFdAt, result:  &{[] [[1] []] [[0] [1]]}
finish analysis for: (os.fileWithoutWriteTo).close, result:  &{[0] [[0]] []}
finish analysis for: reflect.contentEscapes, result:  &{[] [] [[0]]}
finish analysis for: reflect.chansend, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: syscall.Chdir, result:  &{[] [[]] [[0]]}
end analysis for: runtime.gcWriteBarrier3 , result:  &{[] [] []}
finish analysis for: runtime.badDefer, result:  &{[] [[]] []}
end analysis for: syscall.libc_getrlimit_trampoline , result:  &{[] [] []}
finish analysis for: (os.fileWithoutWriteTo).Close, result:  &{[0] [[0]] []}
finish analysis for: runtime.nilinterhash, result:  &{[] [[1]] [[0] [1]]}
finish analysis for: runtime.f64hash, result:  &{[] [[1]] [[0] [1]]}
finish analysis for: runtime.c128hash, result:  &{[] [[1]] [[0] [1]]}
finish analysis for: runtime.f32hash, result:  &{[] [[1]] [[0] [1]]}
finish analysis for: runtime.c64hash, result:  &{[] [[1]] [[0] [1]]}
finish analysis for: runtime.typehash, result:  &{[] [[2]] [[0] [1] [2]]}
finish analysis for: runtime.interhash, result:  &{[] [[1]] [[0] [1]]}
finish analysis for: runtime.ifaceHash, result:  &{[] [[1]] [[0] [1]]}
finish analysis for: math.log10, result:  &{[] [[0]] [[0]]}
end analysis for: math.archTrunc , result:  &{[] [[]] [[0]]}
finish analysis for: syscall.Mlock, result:  &{[] [[]] [[0]]}
finish analysis for: (*internal/abi.FuncType).HasName, result:  &{[0] [[0]] []}
finish analysis for: (*os.fileWithoutReadFrom).Readdirnames, result:  &{[0] [[] [0]] [[1]]}
finish analysis for: runtime.procUnpin, result:  &{[] [] []}
finish analysis for: syscall.Chmod, result:  &{[] [[]] [[0] [1]]}
finish analysis for: os.chmod$1, result:  &{[] [[]] []}
finish analysis for: runtime.syscall_syscall6, result:  &{[] [[0 1 2 3 4 5 6] [0 1 2 3 4 5 6] [0 1 2 3 4 5 6]] [[0] [1] [2] [3] [4] [5] [6]]}
finish analysis for: runtime.syscall_runtime_envs, result:  &{[] [[]] []}
finish analysis for: syscall.Setuid, result:  &{[] [[]] [[0]]}
end analysis for: runtime.systemstack_switch , result:  &{[] [] []}
finish analysis for: runtime.gcDrainMarkWorkerIdle, result:  &{[] [] [[0]]}
finish analysis for: runtime.gcDrainMarkWorkerDedicated, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.runqdrain, result:  &{[] [[0] []] [[0]]}
finish analysis for: runtime.gcBgMarkWorker$2, result:  &{[] [] []}
finish analysis for: (*reflect.rtype).NumOut, result:  &{[0] [[0]] []}
end analysis for: (*runtime/internal/atomic.Pointer[runtime.g]).Load[runtime.g] , result:  &{[0] [[]] []}
finish analysis for: (*time.Time).Before, result:  &{[0] [[1]] [[1]]}
finish analysis for: (*internal/abi.FuncType).Align, result:  &{[0] [[0]] []}
finish analysis for: bytes.explode, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: (os.File).close, result:  &{[0] [[0]] []}
finish analysis for: runtime.Stack, result:  &{[] [[]] [[0] [1]]}
finish analysis for: bytes.Equal, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: bytes.Index, result:  &{[] [[]] [[0] [1]]}
finish analysis for: path/filepath.VolumeName, result:  &{[] [[0]] [[0]]}
finish analysis for: path/filepath.Base, result:  &{[] [[0]] [[0]]}
finish analysis for: strings.explode, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: strings.genSplit, result:  &{[] [[0]] [[0] [1] [2] [3]]}
finish analysis for: strings.Split, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: path/filepath.splitList, result:  &{[] [[0]] [[0]]}
finish analysis for: path/filepath.SplitList, result:  &{[] [[0]] [[0]]}
finish analysis for: (*internal/godebug.Setting).IncNonDefault, result:  &{[0] [] []}
finish analysis for: os/exec.LookPath, result:  &{[] [[0] [0]] [[0]]}
finish analysis for: os/exec.Command, result:  &{[] [[0 1]] [[0] [0 1]]}
finish analysis for: os/exec.CommandContext, result:  &{[] [[0 1 2]] [[0] [0 1 2] [0 1 2]]}
end analysis for: os.readdir_r , result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: syscall.Revoke, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.exitsyscallfast_reacquired$1, result:  &{[] [] []}
end analysis for: reflect.typedslicecopy , result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: (*internal/abi.FuncType).InterfaceType, result:  &{[0] [[0]] []}
finish analysis for: runtime.inRange, result:  &{[] [[1 3]] [[0] [1] [2] [3]]}
end analysis for: syscall.libc_setlogin_trampoline , result:  &{[] [] []}
finish analysis for: (*internal/abi.ChanType).Key, result:  &{[0] [[0]] []}
finish analysis for: (os.fileWithoutReadFrom).Name, result:  &{[0] [[0]] []}
end analysis for: slices.heapSortOrdered , result:  &{[] [] [[0] [1] [2]]}
end analysis for: sync/atomic.StoreUint64 , result:  &{[] [] [[0] [1]]}
finish analysis for: (*context.afterFuncCtx).cancel, result:  &{[0 2 3] [] [[1] [2] [3]]}
finish analysis for: context.AfterFunc$1, result:  &{[] [[]] []}
finish analysis for: (*internal/poll.FD).RawControl, result:  &{[0] [[]] [[1]]}
finish analysis for: (*os.rawConn).Control, result:  &{[0] [[]] [[1]]}
end analysis for: (*runtime/internal/atomic.Pointer[func(string, string)]).Load[func(string, string)] , result:  &{[0] [[]] []}
finish analysis for: (*io.SectionReader).Seek, result:  &{[0 1] [[0 1] []] [[1] [2]]}
finish analysis for: (*internal/reflectlite.Value).assignTo, result:  &{[0] [[2 3]] [[1] [2] [3]]}
finish analysis for: syscall.RouteRIB, result:  &{[] [[] []] [[0] [1]]}
finish analysis for: internal/poll.newIovecWithBase, result:  &{[] [[0]] [[0]]}
finish analysis for: internal/poll.init$1, result:  &{[] [] [[0]]}
finish analysis for: internal/poll.consume, result:  &{[] [] [[0] [1]]}
finish analysis for: (*internal/poll.FD).Writev, result:  &{[0 1] [[] []] [[1]]}
finish analysis for: (*runtime._panic).nextFrame, result:  &{[0] [[]] []}
finish analysis for: (*runtime._panic).start, result:  &{[0 1 2] [] [[1] [2]]}
finish analysis for: runtime/internal/sys.Len8, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime/internal/sys.LeadingZeros8, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.freedeferfn, result:  &{[] [] []}
finish analysis for: runtime.freedefer, result:  &{[] [] [[0]]}
finish analysis for: runtime.deferconvert, result:  &{[] [[0]] [[0]]}
finish analysis for: (*runtime._panic).nextDefer, result:  &{[0] [[0] []] []}
finish analysis for: runtime.racegoend, result:  &{[] [] []}
finish analysis for: (runtime.traceLocker).GoEnd, result:  &{[0] [] []}
finish analysis for: runtime.goexit1, result:  &{[] [] []}
finish analysis for: runtime.Goexit, result:  &{[] [] []}
finish analysis for: runtime.nilfunc, result:  &{[] [] []}
finish analysis for: (*syscall.anyMessage).toRoutingMessage, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: syscall.ParseRoutingMessage, result:  &{[] [[0] []] [[0]]}
finish analysis for: reflect.deepValueEqual$1, result:  &{[] [[1]] [[0] [1]]}
finish analysis for: reflect.deepValueEqual$2, result:  &{[] [[0]] [[0]]}
finish analysis for: internal/bytealg.Equal, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: reflect.deepValueEqual, result:  &{[] [[0 1]] [[0] [1] [0 1 2]]}
finish analysis for: syscall.Clearenv, result:  &{[] [] []}
finish analysis for: os.LookupEnv, result:  &{[] [[] []] [[0]]}
end analysis for: reflect.chanclose , result:  &{[] [] [[0]]}
finish analysis for: math/bits.Len16, result:  &{[] [[0]] [[0]]}
finish analysis for: (*bytes.asciiSet).contains, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (*internal/abi.Type).StructType, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.StructType).StructType, result:  &{[0] [[0]] []}
end analysis for: runtime.usleep_trampoline , result:  &{[] [] []}
finish analysis for: bytes.isSeparator, result:  &{[] [[0]] [[0]]}
finish analysis for: bytes.Title$1, result:  &{[] [[0]] [[0]]}
finish analysis for: (*runtime.guintptr).ptr, result:  &{[0] [[]] []}
finish analysis for: runtime.UnlockOSThread, result:  &{[] [] []}
finish analysis for: syscall.BpfJump, result:  &{[] [[0 1 2 3]] [[0] [1] [2] [3]]}
finish analysis for: (*runtime.lockRank).String, result:  &{[0] [[]] []}
finish analysis for: os.lstatNolog$1, result:  &{[] [[]] []}
finish analysis for: math.split, result:  &{[] [[0] [0] [0]] [[0]]}
finish analysis for: math.shl, result:  &{[] [[0 1 2] [1 2]] [[0] [1] [2]]}
finish analysis for: math.shr, result:  &{[] [[0 2] [0 1 2]] [[0] [1] [2]]}
finish analysis for: math.nonzero, result:  &{[] [[]] [[0]]}
finish analysis for: math.shrcompress, result:  &{[] [[0 2] [0 1 2]] [[0] [1] [2]]}
finish analysis for: math/bits.Sub64, result:  &{[] [[0 1 2] [0 1 2]] [[0] [1] [2]]}
finish analysis for: math.lz, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: math.zero, result:  &{[] [[]] [[0]]}
finish analysis for: math.FMA, result:  &{[] [[0 1 2]] [[0] [1] [2]]}
finish analysis for: (runtime.errorAddressString).Addr, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.PtrType).Pointers, result:  &{[0] [[0]] []}
finish analysis for: runtime.totalMutexWaitTimeNanos, result:  &{[] [[]] []}
end analysis for: slices.Insert , result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: runtime.dumpms, result:  &{[] [] []}
finish analysis for: runtime.traceAdvance$3, result:  &{[] [] []}
finish analysis for: runtime.debugCallCheck, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.notifyListNotifyOne, result:  &{[] [] [[0]]}
finish analysis for: runtime.addspecial, result:  &{[] [[]] [[0] [0 1]]}
finish analysis for: runtime.addfinalizer, result:  &{[] [[]] [[0] [1] [2] [3] [4]]}
finish analysis for: runtime.SetFinalizer$2, result:  &{[] [] []}
finish analysis for: math.tanh, result:  &{[] [[0]] [[0]]}
finish analysis for: (*internal/abi.PtrType).IsDirectIface, result:  &{[0] [[0]] []}
finish analysis for: runtime.newdefer, result:  &{[] [[]] []}
finish analysis for: runtime.deferrangefunc, result:  &{[] [[]] []}
finish analysis for: math/bits.Reverse16, result:  &{[] [[0]] [[0]]}
end analysis for: syscall.libc_geteuid_trampoline , result:  &{[] [] []}
end analysis for: runtime.syscall6X , result:  &{[] [] []}
finish analysis for: runtime.racefingo, result:  &{[] [] []}
finish analysis for: (*os.LinkError).Error, result:  &{[0] [[0]] []}
finish analysis for: (*io.pipe).writeCloseError, result:  &{[0] [[0]] []}
finish analysis for: runtime.mapaccess1, result:  &{[] [[0 1 2]] [[0] [1] [2]]}
finish analysis for: (*runtime.gTraceState).readyNextGen, result:  &{[0] [] [[1]]}
finish analysis for: (*reflect.Value).Set, result:  &{[0] [] [[1]]}
finish analysis for: (internal/reflectlite.rtype).HasName, result:  &{[0] [[0]] []}
finish analysis for: (context.todoCtx).String, result:  &{[0] [[]] []}
end analysis for: internal/syscall/unix.syscall_syscall6X , result:  &{[] [[] [] []] [[0] [1] [2] [3] [4] [5] [6]]}
finish analysis for: (*os.File).chmod, result:  &{[0] [[0]] [[1]]}
end analysis for: runtime.call67108864 , result:  &{[] [] [[0] [1] [2] [3] [4] [5] [6]]}
finish analysis for: (*os.fileWithoutWriteTo).Fd, result:  &{[0] [[0]] []}
finish analysis for: (time.Duration).Microseconds, result:  &{[0] [[0]] []}
finish analysis for: (*time.Duration).Microseconds, result:  &{[0] [[]] []}
end analysis for: internal/bytealg.LastIndexRabinKarp[[]byte] , result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.syscall_Getpagesize, result:  &{[] [[]] []}
finish analysis for: (internal/reflectlite.rtype).PkgPath, result:  &{[0] [[]] []}
finish analysis for: (context.cancelCtx).Deadline, result:  &{[0] [[] []] []}
finish analysis for: runtime.main$2, result:  &{[] [] []}
finish analysis for: (*reflect.ptrType).Pointers, result:  &{[0] [[0]] []}
finish analysis for: (*internal/reflectlite.rtype).typeOff, result:  &{[0] [[]] [[1]]}
finish analysis for: (*io/fs.subFS).fullName, result:  &{[0] [[0 2] [1 2]] [[1] [2]]}
finish analysis for: (*io/fs.subFS).Sub, result:  &{[0] [[0 1] [1]] [[1]]}
finish analysis for: io/fs.Sub, result:  &{[] [[0 1] [1]] [[0] [1]]}
finish analysis for: bytes.Clone, result:  &{[] [[0]] [[0]]}
end analysis for: internal/poll.runtime_pollClose , result:  &{[] [] [[0]]}
finish analysis for: syscall.BpfStats, result:  &{[] [[] []] [[0]]}
finish analysis for: runtime.panicunsafestringlen, result:  &{[] [] []}
finish analysis for: runtime.panicunsafestringnilptr, result:  &{[] [] []}
finish analysis for: runtime.unsafestring, result:  &{[] [] [[0] [1]]}
finish analysis for: (*reflect.structType).Common, result:  &{[0] [[0]] []}
finish analysis for: (runtime.offAddr).sub, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (*runtime.addrRanges).removeLast, result:  &{[0 1] [[0 1]] [[0 1]]}
finish analysis for: (*internal/abi.SliceType).IsDirectIface, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.InterfaceType).GcSlice, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: reflect.DeepEqual, result:  &{[] [[0 1]] [[0] [1]]}
end analysis for: runtime/internal/atomic.LoadAcquintptr , result:  &{[] [[]] [[0]]}
finish analysis for: io.MultiWriter, result:  &{[] [[0]] [[0]]}
end analysis for: slices.Reverse , result:  &{[] [] [[0]]}
finish analysis for: runtime.canpanic, result:  &{[] [[]] []}
end analysis for: syscall.Syscall9 , result:  &{[] [[] [] []] [[0] [1] [2] [3] [4] [5] [6] [7] [8] [9]]}
finish analysis for: (reflect.Value).mustBeAssignableSlow, result:  &{[0] [] []}
finish analysis for: reflect.resolveReflectText, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.fatal$1, result:  &{[] [] []}
finish analysis for: (*time.dataIO).read, result:  &{[0] [[0]] [[1]]}
finish analysis for: (*time.dataIO).big4, result:  &{[0] [[0] []] []}
finish analysis for: (*time.dataIO).big8, result:  &{[0] [[0] []] []}
finish analysis for: (*strings.Replacer).Replace, result:  &{[0] [[]] [[1]]}
finish analysis for: runtime.fatalthrow$1, result:  &{[] [] []}
end analysis for: runtime/internal/atomic.Storeint64 , result:  &{[] [] [[0] [1]]}
finish analysis for: (*runtime/internal/atomic.Uint64).StoreRelease, result:  &{[0] [] [[1]]}
end analysis for: runtime.switchToCrashStack0 , result:  &{[] [] [[0]]}
finish analysis for: math.pzero, result:  &{[] [[0]] [[0]]}
finish analysis for: math.qzero, result:  &{[] [[0]] [[0]]}
finish analysis for: math.J0, result:  &{[] [[0]] [[0]]}
finish analysis for: (*internal/abi.MapType).Uncommon, result:  &{[0] [[0]] []}
finish analysis for: (syscall.WaitStatus).Signaled, result:  &{[0] [[0]] []}
finish analysis for: (syscall.WaitStatus).CoreDump, result:  &{[0] [[0]] []}
finish analysis for: (*syscall.WaitStatus).CoreDump, result:  &{[0] [[]] []}
finish analysis for: (*time.Time).appendStrictRFC3339, result:  &{[0] [[1] []] [[1]]}
finish analysis for: reflect.New, result:  &{[] [[0]] [[0]]}
finish analysis for: reflect.makeString, result:  &{[] [[0 1 2]] [[0] [1] [2]]}
finish analysis for: reflect.cvtBytesString, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.setsigsegv, result:  &{[] [] [[0]]}
finish analysis for: runtime.initMetrics$5, result:  &{[] [] [[0] [0 1]]}
finish analysis for: (*internal/abi.MapType).FieldAlign, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.MapType).Size, result:  &{[0] [[0]] []}
end analysis for: runtime.syscall9 , result:  &{[] [] []}
finish analysis for: runtime.casgcopystack, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.reflectcallmove, result:  &{[] [] [[0] [1 3] [2] [1 3] [4]]}
finish analysis for: runtime.os_beforeExit, result:  &{[] [] [[0]]}
finish analysis for: (*context.cancelCtx).propagateCancel$1, result:  &{[] [] []}
finish analysis for: bytes.Count, result:  &{[] [[]] [[0] [1]]}
finish analysis for: bytes.genSplit, result:  &{[] [[0]] [[0] [1] [2] [3]]}
finish analysis for: bytes.Split, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: runtime.sync_runtime_registerPoolCleanup, result:  &{[] [] [[0]]}
end analysis for: runtime.call1048576 , result:  &{[] [] [[0] [1] [2] [3] [4] [5] [6]]}
finish analysis for: (*reflect.ptrType).Align, result:  &{[0] [[0]] []}
finish analysis for: runtime.forEachPInternal, result:  &{[] [] [[0]]}
finish analysis for: runtime.forEachP$1, result:  &{[] [] []}
finish analysis for: (reflect.Value).SetIterValue, result:  &{[0] [] [[1]]}
finish analysis for: (*reflect.Value).SetIterValue, result:  &{[0] [] [[1]]}
finish analysis for: runtime.panicmakeslicelen, result:  &{[] [] []}
finish analysis for: runtime.init#1, result:  &{[] [] []}
finish analysis for: runtime.debugCallWrap2$1, result:  &{[] [] []}
finish analysis for: runtime.sigignore, result:  &{[] [] [[0]]}
end analysis for: slices.Contains , result:  &{[] [[]] [[0] [1]]}
end analysis for: sync/atomic.runtime_procUnpin , result:  &{[] [] []}
end analysis for: cmp.isNaN , result:  &{[] [[]] [[0]]}
finish analysis for: bytes.ContainsFunc, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*reflect.Value).Type, result:  &{[0] [[]] []}
end analysis for: runtime/internal/atomic.Load8 , result:  &{[] [[]] [[0]]}
finish analysis for: strings.ToTitleSpecial, result:  &{[] [[1]] [[0] [1]]}
end analysis for: runtime.mcall , result:  &{[] [] [[0]]}
end analysis for: time.isDigit[string] , result:  &{[] [[]] [[0] [1]]}
finish analysis for: (runtime.liveUserArenaChunk).initHeapBits, result:  &{[0] [] [[1]]}
end analysis for: runtime.pthread_cond_init_trampoline , result:  &{[] [] []}
finish analysis for: reflect.PointerTo, result:  &{[] [[0]] [[0]]}
finish analysis for: os.wrapSyscallError, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*internal/abi.MapType).InterfaceType, result:  &{[0] [[0]] []}
finish analysis for: (reflect.Value).CanComplex, result:  &{[0] [[]] []}
finish analysis for: (*runtime.liveUserArenaChunk).decPinCounter, result:  &{[0] [[]] [[1]]}
finish analysis for: (*reflect.visibleFieldsWalker).walk, result:  &{[0 1] [] [[1]]}
finish analysis for: reflect.VisibleFields, result:  &{[] [[0]] [[0]]}
end analysis for: syscall.libc_socketpair_trampoline , result:  &{[] [] []}
end analysis for: sync.runtime_SemacquireRWMutexR , result:  &{[] [] [[0] [1] [2]]}
end analysis for: syscall.libc_sync_trampoline , result:  &{[] [] []}
finish analysis for: syscall.Setsid, result:  &{[] [[] []] []}
finish analysis for: runtime.badmcall, result:  &{[] [] [[0]]}
finish analysis for: runtime.sigpipe, result:  &{[] [] []}
finish analysis for: reflect.moveMakeFuncArgPtrs, result:  &{[] [] [[0] [1]]}
finish analysis for: syscall.ForkExec, result:  &{[] [[] []] [[0] [1] [2]]}
finish analysis for: (*runtime.liveUserArenaChunk).getPinnerBits, result:  &{[0] [[]] []}
finish analysis for: runtime.printfloat, result:  &{[] [] [[0]]}
finish analysis for: syscall.SetBpfBuflen, result:  &{[] [[1] []] [[0] [1]]}
finish analysis for: fmt.Append, result:  &{[] [[0 1]] [[0 1] [1]]}
finish analysis for: (time.Time).ISOWeek, result:  &{[0] [[0] [0]] []}
finish analysis for: (*time.Time).ISOWeek, result:  &{[0] [[] []] []}
finish analysis for: (*runtime.liveUserArenaChunk).newPinnerBits, result:  &{[0] [[]] []}
finish analysis for: (*runtime.traceRegionAlloc).alloc, result:  &{[0 1] [[0 1]] [[1]]}
finish analysis for: (*runtime.traceMap).newTraceMapNode, result:  &{[0 2] [[0 2 3 4]] [[1] [2] [3] [4]]}
finish analysis for: math.archAsinh, result:  &{[] [[]] [[0]]}
finish analysis for: math.Asinh, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.lockOSThread, result:  &{[] [] []}
finish analysis for: runtime.cgocallbackg1, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: runtime.cgocallbackg, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: (*internal/bisect.parseError).Error, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.funcInfo).entry, result:  &{[0] [[]] []}
finish analysis for: runtime.printiface, result:  &{[] [] [[0]]}
finish analysis for: (*internal/reflectlite.rtype).nameOff, result:  &{[0] [[]] [[1]]}
end analysis for: runtime.panicSlice3Acap , result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.badmcall2, result:  &{[] [] [[0]]}
finish analysis for: reflect.mapassign, result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: reflect.mapassign_faststr, result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: (reflect.Value).SetMapIndex, result:  &{[0] [] [[0 1] [0 2]]}
finish analysis for: (*reflect.Value).SetMapIndex, result:  &{[0] [] [[1] [2]]}
finish analysis for: (os.fileWithoutWriteTo).pread, result:  &{[0] [[] []] [[1] [2]]}
end analysis for: internal/syscall/unix.fcntl , result:  &{[] [[] []] [[0] [1] [2]]}
finish analysis for: (reflect.Value).runes, result:  &{[0] [[0]] []}
finish analysis for: reflect.cvtRunesString, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: math.expm1, result:  &{[] [[0]] [[0]]}
finish analysis for: math.Expm1, result:  &{[] [[0]] [[0]]}
end analysis for: (*runtime/internal/atomic.Pointer[func()]).CompareAndSwap[func()] , result:  &{[0] [[]] [[1] [2]]}
finish analysis for: runtime.minitSignals, result:  &{[] [] []}
finish analysis for: (*internal/godebug.Setting).IncNonDefault$bound, result:  &{[] [] []}
finish analysis for: syscall.Setgroups, result:  &{[] [[]] [[0]]}
finish analysis for: (internal/reflectlite.rtype).exportedMethods, result:  &{[0] [[0]] []}
finish analysis for: bytes.SplitAfter, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: strings.Clone, result:  &{[] [[]] [[0]]}
finish analysis for: (*reflect.Value).CanInterface, result:  &{[0] [[]] []}
finish analysis for: internal/reflectlite.Swapper$7, result:  &{[] [] [[0] [1]]}
finish analysis for: math.Y0, result:  &{[] [[0]] [[0]]}
finish analysis for: math.Y1, result:  &{[] [[0]] [[0]]}
finish analysis for: math.Yn, result:  &{[] [[1]] [[0] [1]]}
finish analysis for: os.removeAllFrom$2, result:  &{[] [[]] []}
finish analysis for: (*internal/abi.FuncType).IfaceIndir, result:  &{[0] [[0]] []}
finish analysis for: runtime.initMetrics$45, result:  &{[] [] [[0] [0 1]]}
finish analysis for: math/bits.TrailingZeros16, result:  &{[] [[]] [[0]]}
finish analysis for: (internal/reflectlite.rtype).NumField, result:  &{[0] [[]] []}
finish analysis for: (*internal/reflectlite.rtype).NumField, result:  &{[0] [[]] []}
finish analysis for: (os.fileWithoutWriteTo).Name, result:  &{[0] [[0]] []}
finish analysis for: runtime.initMetrics$51, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.goPanicSlice3Alen, result:  &{[] [] [[0] [1]]}
end analysis for: sync/atomic.runtime_procPin , result:  &{[] [[]] []}
finish analysis for: runtime.debugCallWrap, result:  &{[] [] [[0]]}
finish analysis for: syscall.Fsync, result:  &{[] [[]] [[0]]}
finish analysis for: (os.fileWithoutWriteTo).ReadFrom, result:  &{[0] [[] [0]] [[1]]}
finish analysis for: runtime.reflect_typedarrayclear, result:  &{[] [] [[0 1 2] [0 1 2] [2]]}
finish analysis for: (*reflect.ptrType).FuncType, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.gcControllerState).markWorkerStop, result:  &{[0] [] [[1] [2]]}
finish analysis for: runtime.gcBgMarkWorker, result:  &{[] [] []}
finish analysis for: runtime.debugCallWrap2, result:  &{[] [] [[0]]}
finish analysis for: runtime.debugCallWrap1, result:  &{[] [] []}
finish analysis for: (*os.fileWithoutWriteTo).Chown, result:  &{[0] [[0]] [[1] [2]]}
finish analysis for: (*reflect.structType).IsDirectIface, result:  &{[0] [[0]] []}
end analysis for: runtime.goexit , result:  &{[] [] [[0]]}
finish analysis for: (time.Duration).Seconds, result:  &{[0] [[0]] []}
finish analysis for: (*internal/reflectlite.Value).pointer, result:  &{[0] [[]] []}
finish analysis for: path.Ext, result:  &{[] [[0]] [[0]]}
end analysis for: syscall.libc_mlockall_trampoline , result:  &{[] [] []}
finish analysis for: syscall.cmsgAlignOf, result:  &{[] [[0]] [[0]]}
finish analysis for: syscall.CmsgSpace, result:  &{[] [[0]] [[0]]}
finish analysis for: syscall.CmsgLen, result:  &{[] [[0]] [[0]]}
finish analysis for: (*syscall.Cmsghdr).SetLen, result:  &{[0 1] [] [[1]]}
finish analysis for: (*syscall.Cmsghdr).data, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: syscall.UnixRights, result:  &{[] [[]] [[0]]}
finish analysis for: strings.trimLeftByte, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: (*internal/abi.SliceType).HasName, result:  &{[0] [[0]] []}
finish analysis for: (*time.Time).Location, result:  &{[0] [[]] []}
finish analysis for: runtime.checkptrBase, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.checkptrArithmetic, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.fatalpanic$2, result:  &{[] [] []}
finish analysis for: runtime.switchToCrashStack, result:  &{[] [] [[0]]}
finish analysis for: runtime.proc_regionfilename, result:  &{[] [[]] [[0] [1] [2] [3]]}
finish analysis for: runtime.reflect_makechan, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: math.atan2, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.evacuate, result:  &{[] [] [[0 1 2] [0 1 2] [2]]}
finish analysis for: runtime.growWork, result:  &{[] [] [[0 1 2] [0 1 2] [2]]}
finish analysis for: (*internal/abi.MapType).NeedKeyUpdate, result:  &{[0] [[0]] []}
finish analysis for: runtime.tooManyOverflowBuckets, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.hashGrow, result:  &{[] [] [[0] [0 1]]}
finish analysis for: runtime.mapassign, result:  &{[] [[0 1 2]] [[0 1 2] [0 1 2] [2]]}
finish analysis for: (syscall.WaitStatus).Stopped, result:  &{[0] [[0]] []}
finish analysis for: (syscall.WaitStatus).StopSignal, result:  &{[0] [[0]] []}
finish analysis for: syscall.socketControlMessageHeaderAndData, result:  &{[] [[0] [0] []] [[0]]}
finish analysis for: syscall.ParseSocketControlMessage, result:  &{[] [[0] []] [[0]]}
finish analysis for: runtime.panicwrap, result:  &{[] [] []}
end analysis for: runtime.getcallerpc , result:  &{[] [[]] []}
finish analysis for: syscall.direntReclen, result:  &{[] [[0] []] [[0]]}
finish analysis for: syscall.direntIno, result:  &{[] [[0] []] [[0]]}
finish analysis for: syscall.ParseDirent, result:  &{[] [[] [] [0 2]] [[0] [1] [2]]}
finish analysis for: internal/abi.CommonSize, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.fmax64, result:  &{[] [[]] [[0] [1]]}
finish analysis for: os.net_newUnixFile, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (reflect.Value).send, result:  &{[0] [[]] [[0 1] [2]]}
finish analysis for: (*reflect.Value).send, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: (*runtime.pinner).unpin, result:  &{[0] [] []}
finish analysis for: runtime.init$1, result:  &{[] [] []}
finish analysis for: (*runtime.Pinner).Pin$1, result:  &{[] [] [[0]]}
end analysis for: syscall.libc_rename_trampoline , result:  &{[] [] []}
finish analysis for: bytes.NewBuffer, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.checkdead$1, result:  &{[] [] [[0]]}
finish analysis for: fmt.init$2, result:  &{[] [[]] []}
end analysis for: (*runtime/internal/atomic.Pointer[func()]).Load[func()] , result:  &{[0] [[]] []}
finish analysis for: (*io/fs.FileMode).IsDir, result:  &{[0] [[]] []}
finish analysis for: runtime.dumpslice, result:  &{[] [] [[0]]}
finish analysis for: runtime.dumpmemprof_callback, result:  &{[] [] [[0] [1] [2] [3] [4] [5]]}
finish analysis for: (unicode.SpecialCase).ToLower, result:  &{[0] [[0 1]] [[1]]}
end analysis for: internal/syscall/unix.libc_getpwnam_r_trampoline , result:  &{[] [] []}
end analysis for: runtime.pthread_attr_setdetachstate_trampoline , result:  &{[] [] []}
finish analysis for: runtime.runqputbatch$1, result:  &{[] [[0]] [[0]]}
finish analysis for: unicode/utf8.Valid, result:  &{[] [[]] [[0]]}
finish analysis for: (*sync.poolChainElt).popHead, result:  &{[0] [[0] []] []}
end analysis for: runtime.gcWriteBarrier1 , result:  &{[] [] []}
finish analysis for: runtime.clearSignalHandlers, result:  &{[] [] []}
finish analysis for: runtime.syscall_runtime_AfterForkInChild, result:  &{[] [] []}
finish analysis for: (io/fs.FileMode).String, result:  &{[0] [[]] []}
finish analysis for: (*io/fs.FileMode).String, result:  &{[0] [[]] []}
finish analysis for: (*runtime.bmap).keys, result:  &{[0] [[0]] []}
finish analysis for: runtime.mapaccess2_fast64, result:  &{[] [[0 1 2] []] [[0] [1] [2]]}
finish analysis for: (os.fileWithoutReadFrom).ReadAt, result:  &{[0] [[] [0]] [[1] [2]]}
finish analysis for: runtime.reflectlite_maplen, result:  &{[] [[0]] [[0]]}
finish analysis for: (internal/reflectlite.Value).ro, result:  &{[0] [[]] []}
finish analysis for: runtime.mapclear, result:  &{[] [] [[0] [0 1]]}
finish analysis for: runtime.reflect_mapclear, result:  &{[] [] [[0] [0 1]]}
finish analysis for: strconv.QuotedPrefix, result:  &{[] [[0] []] [[0]]}
finish analysis for: sort.SearchStrings, result:  &{[] [[]] [[0] [1]]}
end analysis for: slices.ContainsFunc , result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*runtime.MemProfileRecord).Stack, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.pallocSum).start, result:  &{[0] [[]] []}
finish analysis for: strings.makeGenericReplacer, result:  &{[] [[0]] [[0]]}
finish analysis for: (*strings.Replacer).build, result:  &{[0] [[0]] []}
finish analysis for: (*strings.Replacer).buildOnce, result:  &{[0] [] []}
finish analysis for: (*reflect.Value).SetLen, result:  &{[0] [] [[1]]}
finish analysis for: runtime.arenaBase, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.dumpparams, result:  &{[] [] []}
finish analysis for: runtime.rawbyteslice, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.stringtoslicebyte, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*internal/reflectlite.rtype).InterfaceType, result:  &{[0] [[0]] []}
finish analysis for: bytes.HasPrefix, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: bytes.CutPrefix, result:  &{[] [[0] []] [[0] [1]]}
finish analysis for: (io/fs.dirInfo).Type, result:  &{[0] [[0]] []}
finish analysis for: (*io/fs.dirInfo).Type, result:  &{[0] [[]] []}
finish analysis for: io/fs.FormatDirEntry, result:  &{[] [[0]] [[0]]}
finish analysis for: (io/fs.dirInfo).String, result:  &{[0] [[0]] []}
finish analysis for: (os.fileWithoutReadFrom).Seek, result:  &{[0] [[] [0]] [[1] [2]]}
end analysis for: runtime/internal/atomic.LoadAcq , result:  &{[] [[]] [[0]]}
finish analysis for: internal/chacha8rand.beUint64, result:  &{[] [[0]] [[0]]}
finish analysis for: internal/chacha8rand.Unmarshal, result:  &{[] [[]] [[0 1] [1]]}
finish analysis for: (os.fileWithoutWriteTo).Truncate, result:  &{[0] [[0]] [[1]]}
end analysis for: sync/atomic.SwapPointer , result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*strings.genericReplacer).Replace, result:  &{[0] [[]] [[1]]}
finish analysis for: (*strings.asciiSet).contains, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (*reflect.Value).CanSet, result:  &{[0] [[]] []}
finish analysis for: (*reflect.Value).grow, result:  &{[0] [] [[1]]}
end analysis for: runtime/internal/atomic.Store8 , result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.mapdelete_fast64, result:  &{[] [] [[0 1 2] [0 1 2] [2]]}
finish analysis for: (*os/exec.Cmd).StdoutPipe, result:  &{[0] [[] []] []}
end analysis for: runtime.call134217728 , result:  &{[] [] [[0] [1] [2] [3] [4] [5] [6]]}
finish analysis for: runtime.modTimer, result:  &{[] [] [[0 1 2 3 4 5] [1] [2] [3] [4] [5]]}
finish analysis for: (*runtime.pollCache).alloc, result:  &{[0] [[0]] []}
finish analysis for: runtime.netpollopen, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*runtime.pollCache).free, result:  &{[0 1] [] [[0 1]]}
finish analysis for: runtime.poll_runtime_pollOpen, result:  &{[] [[0] []] [[0]]}
finish analysis for: (*internal/reflectlite.rtype).ChanDir, result:  &{[0] [[0]] []}
finish analysis for: syscall.munmap, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*reflect.structType).GcSlice, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: sort.stable_func, result:  &{[] [] [[0] [1]]}
finish analysis for: syscall.Statfs, result:  &{[] [[]] [[0] [1]]}
end analysis for: (*sync/atomic.Pointer[internal/godebug.value]).CompareAndSwap[internal/godebug.value] , result:  &{[0] [[]] [[1] [2]]}
finish analysis for: os.Create, result:  &{[] [[0] [0]] [[0]]}
finish analysis for: (*runtime.stackObject).setRecord, result:  &{[0 1] [] [[1]]}
finish analysis for: (*runtime.stackScanState).addObject, result:  &{[0] [] [[1] [2]]}
finish analysis for: (time.Time).date, result:  &{[0] [[0] [0] [0] [0]] [[1]]}
finish analysis for: (time.Time).Year, result:  &{[0] [[0]] []}
finish analysis for: (*time.Time).Year, result:  &{[0] [[]] []}
end analysis for: sync.runtime_LoadAcquintptr , result:  &{[] [[]] [[0]]}
finish analysis for: (*context.todoCtx).String, result:  &{[0] [[]] []}
finish analysis for: (time.Time).Second, result:  &{[0] [[0]] []}
finish analysis for: (*reflect.Value).CallSlice, result:  &{[0] [[1]] [[1]]}
finish analysis for: runtime.userArenaChunkReserveBytes, result:  &{[] [[]] []}
finish analysis for: (*runtime.mSpanList).insertBack, result:  &{[0 1] [] [[0 1]]}
finish analysis for: (*runtime.mheap).allocUserArenaChunk, result:  &{[0] [[0]] []}
finish analysis for: runtime.blockUntilEmptyFinalizerQueue, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.gcPaceScavenger, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: (*reflect.structType).Pointers, result:  &{[0] [[0]] []}
finish analysis for: runtime.gcResetMarkState$1, result:  &{[] [] [[0]]}
finish analysis for: (*syscall.WaitStatus).ExitStatus, result:  &{[0] [[]] []}
finish analysis for: (context.emptyCtx).Err, result:  &{[0] [[]] []}
finish analysis for: (*context.todoCtx).Err, result:  &{[0] [[]] []}
finish analysis for: bytes.makeASCIISet, result:  &{[] [[0] []] [[0]]}
finish analysis for: bytes.containsRune, result:  &{[] [[]] [[0] [1]]}
finish analysis for: bytes.trimLeftUnicode, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: bytes.trimLeftASCII, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: bytes.trimLeftByte, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: bytes.TrimLeft, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: runtime.mapaccess1_fast64, result:  &{[] [[0 1 2]] [[0] [1] [2]]}
end analysis for: runtime.systemstack , result:  &{[] [] [[0]]}
finish analysis for: runtime.less, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (io/fs.FileMode).IsRegular, result:  &{[0] [[0]] []}
finish analysis for: (*io/fs.FileMode).IsRegular, result:  &{[0] [[]] []}
finish analysis for: runtime.exitsyscall$2, result:  &{[] [] []}
finish analysis for: (*time.Time).appendFormatRFC3339, result:  &{[0] [[1]] [[1] [2]]}
finish analysis for: (*runtime.stackScanState).getPtr, result:  &{[0] [[0] [0]] []}
finish analysis for: math.exp2, result:  &{[] [[0]] [[0]]}
finish analysis for: math.Exp2, result:  &{[] [[0]] [[0]]}
finish analysis for: (*os.fileWithoutWriteTo).Readdirnames, result:  &{[0] [[] [0]] [[1]]}
finish analysis for: bytes.Compare, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.memhash16, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.panicfloat, result:  &{[] [] []}
end analysis for: syscall.libc_mmap_trampoline , result:  &{[] [] []}
finish analysis for: runtime.saveg, result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: runtime.goroutineProfileWithLabelsSync$4$1, result:  &{[] [] []}
finish analysis for: syscall.Mkdir, result:  &{[] [[]] [[0] [1]]}
finish analysis for: os.Mkdir$1, result:  &{[] [[]] []}
finish analysis for: (*internal/abi.FuncType).FuncType, result:  &{[0] [[0]] []}
end analysis for: runtime.pipe_trampoline , result:  &{[] [] []}
finish analysis for: runtime.isPowerOfTwo, result:  &{[] [[0]] [[0]]}
finish analysis for: (time.Time).UnixMicro, result:  &{[0] [[0]] []}
finish analysis for: (*time.Time).UnixMicro, result:  &{[0] [[]] []}
finish analysis for: internal/syscall/unix.ResNsearch, result:  &{[] [[] []] [[0] [1] [2] [3] [4] [5]]}
finish analysis for: runtime.racewriterangepc, result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: runtime.record, result:  &{[] [] [[0 1] [1]]}
finish analysis for: runtime.MemProfile, result:  &{[] [[] []] [[0] [1]]}
finish analysis for: runtime.getgcmask, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.reflect_gcbits, result:  &{[] [[0]] [[0]]}
finish analysis for: (context.withoutCancelCtx).Deadline, result:  &{[0] [[] []] []}
finish analysis for: (*context.withoutCancelCtx).Deadline, result:  &{[0] [[] []] []}
finish analysis for: (*os/exec.Cmd).Start$2, result:  &{[] [] [[0]]}
end analysis for: syscall.libc_setsockopt_trampoline , result:  &{[] [] []}
finish analysis for: path/filepath.HasPrefix, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: unicode/utf8.FullRuneInString, result:  &{[] [[]] [[0]]}
finish analysis for: (reflect.Value).OverflowUint, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (*reflect.Value).OverflowUint, result:  &{[0] [[1]] [[1]]}
end analysis for: syscall.libc_readdir_r_trampoline , result:  &{[] [] []}
finish analysis for: (*runtime.typePointers).nextFast, result:  &{[0] [[] []] []}
finish analysis for: (*os/exec.ExitError).UserTime, result:  &{[0] [[0]] []}
end analysis for: runtime/internal/atomic.Storeint32 , result:  &{[] [] [[0] [1]]}
finish analysis for: math/bits.Sub32, result:  &{[] [[0 1 2] [0 1 2]] [[0] [1] [2]]}
finish analysis for: math/bits.Sub, result:  &{[] [[0 1 2] [0 1 2]] [[0] [1] [2]]}
finish analysis for: (*runtime.pallocData).freeAll, result:  &{[0] [] []}
finish analysis for: reflect.StructOf$1, result:  &{[] [[0]] [[0]]}
finish analysis for: (*fmt.stringReader).Read, result:  &{[0] [[] []] [[0 1]]}
finish analysis for: runtime.initMetrics$27, result:  &{[] [] [[0] [1]]}
end analysis for: runtime.gcWriteBarrier8 , result:  &{[] [] []}
finish analysis for: (*sync/atomic.Bool).Swap, result:  &{[0] [[]] [[1]]}
end analysis for: runtime/internal/atomic.Loaduint , result:  &{[] [[]] [[0]]}
finish analysis for: syscall.sendfile, result:  &{[] [[3] []] [[0] [1] [2] [3]]}
finish analysis for: runtime.heapSetType$1, result:  &{[] [] []}
finish analysis for: syscall.Setlogin, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.Breakpoint, result:  &{[] [] []}
finish analysis for: runtime.tracefree$1, result:  &{[] [] []}
finish analysis for: math.trunc, result:  &{[] [[0]] [[0]]}
finish analysis for: math.Trunc, result:  &{[] [[0]] [[0]]}
finish analysis for: (*internal/abi.StructType).Size, result:  &{[0] [[0]] []}
finish analysis for: math.isNegInt, result:  &{[] [[0]] [[0]]}
finish analysis for: (*runtime.liveUserArenaChunk).typePointersOfUnchecked, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (reflect.Value).TrySend, result:  &{[0] [[]] [[0 1]]}
finish analysis for: (*internal/abi.InterfaceType).MapType, result:  &{[0] [[0]] []}
finish analysis for: (os/exec.ExitError).sysUsage, result:  &{[0] [[0]] []}
finish analysis for: (*context.afterFuncCtx).Err, result:  &{[0] [[0]] []}
finish analysis for: runtime.strequal, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.decoderune, result:  &{[] [[0] [1]] [[0] [1]]}
end analysis for: syscall.libc_fsync_trampoline , result:  &{[] [] []}
end analysis for: slices.IsSorted[[]float64 float64] , result:  &{[] [[]] [[0]]}
finish analysis for: runtime.notifyListNotifyAll, result:  &{[] [] [[0]]}
finish analysis for: runtime.doRecordGoroutineProfile$1, result:  &{[] [] []}
finish analysis for: runtime.badreflectcall, result:  &{[] [] []}
end analysis for: slices.medianCmpFunc , result:  &{[] [[]] [[0] [1] [2] [3] [4] [5]]}
finish analysis for: os.rename, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: os.Rename, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.coroexit, result:  &{[] [] [[0]]}
finish analysis for: runtime.corostart, result:  &{[] [] []}
finish analysis for: (reflect.Value).UnsafeAddr, result:  &{[0] [[0]] []}
finish analysis for: (*reflect.Value).UnsafeAddr, result:  &{[0] [[]] []}
finish analysis for: runtime.printsp, result:  &{[] [] []}
finish analysis for: runtime.convT, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: runtime._GC, result:  &{[] [] []}
finish analysis for: (*reflect.structType).Align, result:  &{[0] [[0]] []}
finish analysis for: (*os.File).Chmod, result:  &{[0] [[0]] [[1]]}
finish analysis for: (*os.fileWithoutReadFrom).Chmod, result:  &{[0] [[0]] [[1]]}
finish analysis for: (*runtime/internal/atomic.UnsafePointer).CompareAndSwapNoWB, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: runtime.os_runtime_args, result:  &{[] [[]] []}
finish analysis for: runtime.initMetrics$55, result:  &{[] [] [[0] [1]]}
finish analysis for: reflect.funcName, result:  &{[] [[]] [[0]]}
finish analysis for: reflect.callReflect, result:  &{[] [] [[0] [1] [2] [0 3]]}
finish analysis for: (*runtime.godebugInc).IncNonDefault, result:  &{[0] [] []}
finish analysis for: os.executable, result:  &{[] [[] []] []}
finish analysis for: os.Executable, result:  &{[] [[] []] []}
finish analysis for: (sort.StringSlice).Search, result:  &{[0] [[]] [[1]]}
finish analysis for: (*bytes.Buffer).WriteTo, result:  &{[0] [[] []] [[0 1]]}
finish analysis for: runtime.allocmcache$1, result:  &{[] [] []}
finish analysis for: (*runtime.Pinner).unpin, result:  &{[0] [] []}
finish analysis for: (*internal/abi.Name).Name, result:  &{[0] [[]] []}
finish analysis for: runtime.traceFrequency$1, result:  &{[] [] []}
finish analysis for: (*strings.Reader).ReadRune, result:  &{[0] [[0] [] []] []}
end analysis for: runtime.gcWriteBarrier6 , result:  &{[] [] []}
finish analysis for: (runtime.liveUserArenaChunk).heapBitsSmallForAddr, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (*runtime.liveUserArenaChunk).markBitsForBase, result:  &{[0] [[0]] []}
finish analysis for: runtime.panicmem, result:  &{[] [] []}
finish analysis for: runtime.fint32to64, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.reflectlite_chanlen, result:  &{[] [[0]] [[0]]}
finish analysis for: (io.nopCloser).Read, result:  &{[0] [[] []] [[1]]}
finish analysis for: fmt.Sscanln, result:  &{[] [[] []] [[0] [1]]}
end analysis for: internal/reflectlite.ifaceE2I , result:  &{[] [] [[0] [1] [2]]}
finish analysis for: syscall.Setenv, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*io/fs.dirInfo).String, result:  &{[0] [[]] []}
finish analysis for: (io.eofReader).Read, result:  &{[0] [[] []] [[1]]}
finish analysis for: (*internal/abi.InterfaceType).Align, result:  &{[0] [[0]] []}
finish analysis for: syscall.Fstatfs, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*time.Time).mono, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.liveUserArenaChunk).pinnerBitSize, result:  &{[0] [[0]] []}
end analysis for: reflect.typedmemmove , result:  &{[] [] [[0] [1] [2]]}
finish analysis for: runtime.fint64to32, result:  &{[] [[0]] [[0]]}
end analysis for: runtime.fmax[float32] , result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*reflect.interfaceType).Method, result:  &{[0] [[1]] [[1]]}
finish analysis for: (*reflect.interfaceType).MethodByName, result:  &{[0] [[] []] [[1]]}
end analysis for: sync.fatal , result:  &{[] [] [[0]]}
finish analysis for: sort.SearchStrings$1, result:  &{[] [[]] [[0]]}
finish analysis for: (*runtime.userArena).new, result:  &{[0] [[0 1]] [[0 1]]}
finish analysis for: strings.IndexFunc, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: strings.ContainsFunc, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: runtime.panicunsafeslicenilptr1, result:  &{[] [] [[0]]}
finish analysis for: (time.Time).MarshalText, result:  &{[0] [[0] []] []}
finish analysis for: (*time.Time).MarshalText, result:  &{[0] [[] []] []}
finish analysis for: bytes.HasSuffix, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*io.SectionReader).ReadAt, result:  &{[0] [[] [0]] [[1] [2]]}
finish analysis for: (sort.IntSlice).Sort, result:  &{[0] [] []}
finish analysis for: (*sort.IntSlice).Sort, result:  &{[0] [] []}
end analysis for: sync.runtime_notifyListNotifyAll , result:  &{[] [] [[0]]}
finish analysis for: io.WriteString, result:  &{[] [[] []] [[0 1] [1]]}
finish analysis for: (*strings.Reader).WriteTo, result:  &{[0] [[] []] [[0 1]]}
finish analysis for: math.asin, result:  &{[] [[0]] [[0]]}
finish analysis for: math.archAsin, result:  &{[] [[]] [[0]]}
finish analysis for: math.Asin, result:  &{[] [[0]] [[0]]}
finish analysis for: math.acos, result:  &{[] [[0]] [[0]]}
finish analysis for: (*sync/atomic.Uint32).Swap, result:  &{[0] [[]] [[1]]}
finish analysis for: (*runtime.sysStatsAggregate).compute$1, result:  &{[] [] []}
finish analysis for: (time.Duration).Truncate, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (*internal/abi.SliceType).StructType, result:  &{[0] [[0]] []}
finish analysis for: math/bits.Rem32, result:  &{[] [[0 1 2]] [[0] [1] [2]]}
finish analysis for: math/bits.Rem, result:  &{[] [[0 1 2]] [[0] [1] [2]]}
finish analysis for: runtime.deferprocStack, result:  &{[] [] [[0]]}
finish analysis for: (*runtime.PanicNilError).RuntimeError, result:  &{[0] [] []}
finish analysis for: runtime.trace_userRegion, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: (*internal/abi.ChanType).IfaceIndir, result:  &{[0] [[0]] []}
finish analysis for: runtime.osRelax, result:  &{[] [] [[0]]}
finish analysis for: (*sync/atomic.Uintptr).Store, result:  &{[0] [] [[1]]}
end analysis for: runtime.memequal , result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: runtime.syscall_syscallPtr, result:  &{[] [[0 1 2 3] [0 1 2 3] [0 1 2 3]] [[0] [1] [2] [3]]}
finish analysis for: (*os.fileWithoutWriteTo).Seek, result:  &{[0] [[] [0]] [[1] [2]]}
finish analysis for: runtime.wirep$1, result:  &{[] [] []}
finish analysis for: runtime.gcPaceSweeper, result:  &{[] [] [[0]]}
finish analysis for: (*internal/abi.PtrType).ArrayType, result:  &{[0] [[0]] []}
finish analysis for: runtime.newproc$1, result:  &{[] [] []}
end analysis for: runtime.noEscapePtr , result:  &{[] [[]] [[0]]}
finish analysis for: (*internal/abi.ArrayType).Kind, result:  &{[0] [[0]] []}
finish analysis for: (*os/exec.Cmd).CombinedOutput, result:  &{[0] [[] [0]] []}
finish analysis for: syscall.parseSockaddrLink, result:  &{[] [[0] []] [[0]]}
finish analysis for: (*syscall.InterfaceMessage).sockaddr, result:  &{[0] [[0] []] []}
end analysis for: internal/syscall/unix.libc_getaddrinfo_trampoline , result:  &{[] [] []}
finish analysis for: syscall.Unmount, result:  &{[] [[]] [[0] [1]]}
finish analysis for: syscall.SetBpfTimeout, result:  &{[] [[]] [[0] [1]]}
finish analysis for: reflect.resolveReflectType, result:  &{[] [[]] [[0]]}
finish analysis for: reflect.runtimeStructField, result:  &{[] [[0] [0]] [[0]]}
finish analysis for: (runtime.liveUserArenaChunk).ensureSwept, result:  &{[0] [] []}
finish analysis for: fmt.Scanln, result:  &{[] [[] []] [[0]]}
finish analysis for: strings.IndexRune, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: strings.ContainsRune, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: strings.trimLeftUnicode, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: runtime.osinit_hack, result:  &{[] [] []}
end analysis for: runtime.duffcopy , result:  &{[] [] []}
finish analysis for: runtime.testSPWrite, result:  &{[] [] []}
end analysis for: internal/cpu.getisar0 , result:  &{[] [[]] []}
finish analysis for: (runtime.rtype).uncommon, result:  &{[0] [[0]] []}
finish analysis for: (*reflect.Value).IsNil, result:  &{[0] [[]] []}
finish analysis for: (*fmt.pp).Width, result:  &{[0] [[0] [0]] []}
end analysis for: sync.runtime_notifyListNotifyOne , result:  &{[] [] [[0]]}
finish analysis for: (runtime.metricReader).compute$bound, result:  &{[] [] [[0] [1]]}
finish analysis for: (*os.fileWithoutWriteTo).setWriteDeadline, result:  &{[0] [[]] [[1]]}
finish analysis for: syscall.Lchown, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: reflect.cvtDirect, result:  &{[] [[0 1]] [[0] [1]]}
end analysis for: (*sync/atomic.Pointer[sync.readOnly]).Swap[sync.readOnly] , result:  &{[0] [[]] [[1]]}
finish analysis for: runtime.funcpkgpath, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.doInit1, result:  &{[] [] [[0]]}
finish analysis for: runtime.doInit, result:  &{[] [] [[0]]}
finish analysis for: runtime.gcenable, result:  &{[] [] []}
finish analysis for: runtime.main, result:  &{[] [] []}
finish analysis for: (runtime.traceLocker).STWDone, result:  &{[0] [] []}
finish analysis for: runtime.startTheWorldWithSema, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: runtime.gcStart$3, result:  &{[] [] []}
finish analysis for: (runtime.errorAddressString).Error, result:  &{[0] [[0]] []}
finish analysis for: (context.withoutCancelCtx).Value, result:  &{[0] [[0]] [[1]]}
end analysis for: slices.pdqsortCmpFunc , result:  &{[] [] [[0] [1] [2] [3] [4]]}
finish analysis for: internal/syscall/unix.ResNinit, result:  &{[] [[]] [[0]]}
end analysis for: sync.runtime_registerPoolCleanup , result:  &{[] [] [[0]]}
finish analysis for: syscall.Settimeofday, result:  &{[] [[]] [[0]]}
finish analysis for: (*internal/abi.InterfaceType).Uncommon, result:  &{[0] [[0]] []}
end analysis for: syscall.libc_readlink_trampoline , result:  &{[] [] []}
finish analysis for: (sort.reverse).Less, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: (*sort.reverse).Less, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: syscall.writev, result:  &{[] [[] []] [[0] [1]]}
finish analysis for: (*os.unixDirent).Info, result:  &{[0] [[0] [0]] []}
finish analysis for: (*sort.Float64Slice).Sort, result:  &{[0] [] []}
finish analysis for: (syscall.WaitStatus).TrapCause, result:  &{[0] [[]] []}
finish analysis for: path/filepath.ToSlash, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.runtime_goroutineProfileWithLabels, result:  &{[] [[] []] [[0] [1]]}
end analysis for: runtime.checkASM , result:  &{[] [[]] []}
finish analysis for: runtime.testAtomic64, result:  &{[] [] []}
finish analysis for: unicode/utf8.DecodeLastRuneInString, result:  &{[] [[0] []] [[0]]}
finish analysis for: strings.trimRightUnicode, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: (*reflect.Value).SetBytes, result:  &{[0] [] [[1]]}
finish analysis for: (*runtime.itabTableType).add$bound, result:  &{[] [] [[0]]}
finish analysis for: (*internal/abi.SliceType).IfaceIndir, result:  &{[0] [[0]] []}
finish analysis for: runtime.newosproc$1, result:  &{[] [[]] []}
finish analysis for: runtime.entersyscallblock_handoff, result:  &{[] [] []}
finish analysis for: (runtime.liveUserArenaChunk).userArenaNextFree, result:  &{[0 1 2] [[0 1 2]] [[0 1 2] [2]]}
finish analysis for: time.registerLoadFromEmbeddedTZData, result:  &{[] [] [[0]]}
finish analysis for: runtime.iterate_memprof, result:  &{[] [] [[0]]}
finish analysis for: runtime.dumpmemprof, result:  &{[] [] []}
finish analysis for: time.Parse, result:  &{[] [[1] [0 1]] [[0] [1]]}
finish analysis for: (*runtime.traceMap).reset, result:  &{[0] [] []}
finish analysis for: runtime.fpunwindExpand, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.makeTraceFrame, result:  &{[] [[1]] [[0] [1]]}
finish analysis for: runtime.makeTraceFrames, result:  &{[] [[1]] [[0] [1]]}
finish analysis for: (*runtime.traceStackTable).dump, result:  &{[0] [] [[1]]}
finish analysis for: (*runtime.traceStringTable).reset, result:  &{[0] [] [[1]]}
finish analysis for: runtime.traceAdvance$4, result:  &{[] [] []}
finish analysis for: io.NopCloser, result:  &{[] [[0]] [[0]]}
finish analysis for: (sort.StringSlice).Less, result:  &{[0] [[0]] [[1] [2]]}
finish analysis for: syscall.getgroups, result:  &{[] [[] []] [[0] [1]]}
finish analysis for: syscall.Getgroups, result:  &{[] [[] []] []}
finish analysis for: os.Getgroups, result:  &{[] [[] []] []}
finish analysis for: math.cosh, result:  &{[] [[0]] [[0]]}
finish analysis for: math.archCosh, result:  &{[] [[]] [[0]]}
finish analysis for: math.Cosh, result:  &{[] [[0]] [[0]]}
finish analysis for: (internal/reflectlite.Value).Elem, result:  &{[0] [[0]] []}
finish analysis for: errors.as, result:  &{[] [[]] [[0] [1] [2] [3]]}
finish analysis for: math.archLog10, result:  &{[] [[]] [[0]]}
finish analysis for: math.Log10, result:  &{[] [[0]] [[0]]}
finish analysis for: path.Base, result:  &{[] [[0]] [[0]]}
finish analysis for: (*time.Time).UnmarshalBinary, result:  &{[0 1] [[]] [[1]]}
finish analysis for: (*time.Time).GobDecode, result:  &{[0 1] [[]] [[1]]}
finish analysis for: (*strconv.NumError).Error, result:  &{[0] [[0]] []}
finish analysis for: sort.intsAreSortedImpl, result:  &{[] [[]] [[0]]}
finish analysis for: (*os.fileWithoutWriteTo).readFrom, result:  &{[0] [[] [] []] [[1]]}
finish analysis for: (time.Time).GobEncode, result:  &{[0] [[0] []] []}
finish analysis for: (*time.Time).GobEncode, result:  &{[0] [[] []] []}
finish analysis for: syscall.Fchown, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: reflect.ChanOf, result:  &{[] [[0 1]] [[0] [1]]}
end analysis for: sync.runtime_SemacquireRWMutex , result:  &{[] [] [[0] [1] [2]]}
finish analysis for: (os/exec.ExitError).Pid, result:  &{[0] [[0]] []}
finish analysis for: runtime.goroutineReady, result:  &{[] [] [[0] [1]]}
finish analysis for: (*reflect.Value).CanConvert, result:  &{[0] [[]] [[1]]}
finish analysis for: math/bits.Mul32, result:  &{[] [[0 1] [0 1]] [[0] [1]]}
finish analysis for: math/bits.Mul, result:  &{[] [[0 1] [0 1]] [[0] [1]]}
finish analysis for: strings.FieldsFunc, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: (strings.stringWriter).WriteString, result:  &{[0 1] [[] []] [[1]]}
finish analysis for: (*time.Time).locabs, result:  &{[0] [[] [] []] []}
finish analysis for: (*bytes.Reader).WriteTo, result:  &{[0] [[] []] [[0 1]]}
finish analysis for: runtime.setsigstack, result:  &{[] [] [[0]]}
finish analysis for: runtime.pinnerGetPinCounter, result:  &{[] [[]] [[0]]}
finish analysis for: (*time.Time).UnixNano, result:  &{[0] [[]] []}
finish analysis for: (unicode.SpecialCase).ToUpper, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (unicode.SpecialCase).ToUpper$bound, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime._cgo_panic_internal, result:  &{[] [] [[0]]}
end analysis for: runtime.getcallersp , result:  &{[] [[]] []}
finish analysis for: runtime.goPanicIndex, result:  &{[] [] [[0] [1]]}
end analysis for: sync/atomic.SwapUint32 , result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*internal/reflectlite.rtype).Pointers, result:  &{[0] [[0]] []}
finish analysis for: bytes.ToTitleSpecial, result:  &{[] [[1]] [[0] [1]]}
finish analysis for: internal/cpu.extractBits, result:  &{[] [[0 1 2]] [[0] [1] [2]]}
end analysis for: slices.Max , result:  &{[] [[]] [[0]]}
finish analysis for: runtime.initsig, result:  &{[] [] [[0]]}
finish analysis for: runtime.mstartm0, result:  &{[] [] []}
finish analysis for: runtime.mstart1, result:  &{[] [] []}
finish analysis for: runtime.mdestroy, result:  &{[] [] [[0]]}
finish analysis for: runtime.mexit, result:  &{[] [] [[0]]}
finish analysis for: runtime.mstart0, result:  &{[] [] []}
finish analysis for: runtime.freeSomeWbufs$1, result:  &{[] [] []}
finish analysis for: (sort.StringSlice).Sort, result:  &{[0] [] []}
finish analysis for: (*internal/abi.SliceType).Pointers, result:  &{[0] [[0]] []}
finish analysis for: (*os.fileWithoutReadFrom).write, result:  &{[0] [[] []] [[1]]}
end analysis for: syscall.libc_unmount_trampoline , result:  &{[] [] []}
finish analysis for: runtime.goPanicSlice3C, result:  &{[] [] [[0] [1]]}
end analysis for: slices.partitionEqualCmpFunc , result:  &{[] [[]] [[0] [1] [2] [3] [4]]}
end analysis for: slices.pdqsortOrdered , result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: (*io.onceError).TryLock, result:  &{[0] [[]] []}
finish analysis for: os.findProcess, result:  &{[] [[0] []] [[0]]}
finish analysis for: os.FindProcess, result:  &{[] [[0] []] [[0]]}
finish analysis for: context.AfterFunc, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.mapaccess1_faststr, result:  &{[] [[0 1 2]] [[0] [1] [2]]}
finish analysis for: runtime.f64toint, result:  &{[] [[0] []] [[0]]}
finish analysis for: runtime.f64toint64, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.printhex, result:  &{[] [] [[0]]}
finish analysis for: (*runtime.markBits).isMarked, result:  &{[0] [[]] []}
finish analysis for: (*io.pipe).closeRead, result:  &{[0 1] [[]] [[1]]}
finish analysis for: (*io.PipeReader).closeRead, result:  &{[0 1] [[]] [[1]]}
finish analysis for: (*io.PipeReader).writeCloseError, result:  &{[0] [[0]] []}
finish analysis for: strings.lastIndexFunc, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: strings.TrimRightFunc, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: (*os.ProcessState).Sys, result:  &{[0] [[0]] []}
finish analysis for: (os/exec.ExitError).Sys, result:  &{[0] [[0]] []}
end analysis for: runtime.pthread_setspecific_trampoline , result:  &{[] [] []}
finish analysis for: (os.fileWithoutReadFrom).Stat, result:  &{[0] [[0] [0]] []}
finish analysis for: runtime.initMetrics$50, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.fatalpanic, result:  &{[] [] [[0]]}
finish analysis for: unicode.Is, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: unicode.IsOneOf, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (runtime.liveUserArenaChunk).specialFindSplicePoint, result:  &{[0] [[0] []] [[1] [2]]}
finish analysis for: (*sync.poolChainElt).pack, result:  &{[0] [[1 2]] [[1] [2]]}
finish analysis for: runtime.init#5, result:  &{[] [] []}
finish analysis for: (*sync/atomic.Uint64).Swap, result:  &{[0] [[]] [[1]]}
finish analysis for: (*io.pipe).write, result:  &{[0] [[0] [0]] [[1]]}
finish analysis for: (*io.PipeReader).write, result:  &{[0] [[0] [0]] [[1]]}
finish analysis for: runtime.unsafestring64, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.memhash128, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.startCheckmarks, result:  &{[] [] []}
finish analysis for: runtime.gcResetMarkState, result:  &{[] [] []}
finish analysis for: runtime.endCheckmarks, result:  &{[] [] []}
finish analysis for: (*runtime.activeSweep).reset, result:  &{[0] [] []}
finish analysis for: runtime.gcSweep, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.gcMarkTermination$2, result:  &{[] [] []}
end analysis for: runtime.call256 , result:  &{[] [] [[0] [1] [2] [3] [4] [5] [6]]}
finish analysis for: (reflect.Value).Addr, result:  &{[0] [[0]] []}
finish analysis for: reflect.typeptrdata, result:  &{[] [[0]] [[0]]}
finish analysis for: reflect.isValidFieldName, result:  &{[] [[]] [[0]]}
finish analysis for: reflect.StructOf, result:  &{[] [[0]] [[0]]}
finish analysis for: reflect.initFuncTypes, result:  &{[] [[0]] [[0]]}
finish analysis for: reflect.funcStr, result:  &{[] [[]] [[0]]}
finish analysis for: reflect.FuncOf, result:  &{[] [[0 1]] [[0] [1] [2]]}
finish analysis for: (*reflect.rtype).Method, result:  &{[0] [[0 1]] [[0 1]]}
finish analysis for: (*reflect.rtype).MethodByName, result:  &{[0] [[0] []] [[1]]}
finish analysis for: (reflect.Value).Method, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (reflect.Value).MethodByName, result:  &{[0] [[0]] [[1]]}
end analysis for: runtime/internal/atomic.storePointer , result:  &{[] [] [[0] [1]]}
finish analysis for: (time.Time).ZoneBounds, result:  &{[0] [[0] [0]] []}
finish analysis for: (*time.Time).ZoneBounds, result:  &{[0] [[] []] []}
finish analysis for: syscall.Umask, result:  &{[] [[]] [[0]]}
finish analysis for: (*runtime.cpuProfile).addNonGo, result:  &{[0] [] [[1]]}
finish analysis for: runtime.sigprofNonGo, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: runtime.tracegc, result:  &{[] [] []}
finish analysis for: runtime.gcMarkRootCheck, result:  &{[] [] []}
finish analysis for: runtime.gcMark, result:  &{[] [] [[0]]}
finish analysis for: runtime.gcMarkTermination$1, result:  &{[] [] []}
finish analysis for: (*reflect.ptrType).StructType, result:  &{[0] [[0]] []}
end analysis for: internal/syscall/unix.RecvfromInet6 , result:  &{[] [[] []] [[0] [1] [2] [3]]}
finish analysis for: time.parseStrictRFC3339$1, result:  &{[] [[0]] [[0]]}
finish analysis for: time.parseStrictRFC3339, result:  &{[] [[0] [0]] [[0]]}
finish analysis for: (*time.Time).UnmarshalText, result:  &{[0 1] [[1]] [[1]]}
finish analysis for: (*os.fileWithoutWriteTo).Stat, result:  &{[0] [[0] [0]] []}
finish analysis for: (*runtime.scavChunkData).pack, result:  &{[0] [[]] []}
finish analysis for: (*reflect.Value).Len, result:  &{[0] [[]] []}
finish analysis for: runtime.dumpframe, result:  &{[] [] [[0] [0 1]]}
finish analysis for: runtime.dumpgoroutine, result:  &{[] [] [[0]]}
end analysis for: slices.order2CmpFunc , result:  &{[] [[] []] [[0] [1] [2] [3] [4]]}
finish analysis for: os.removeAllFrom$1, result:  &{[] [[]] []}
finish analysis for: runtime.evacuate_fast32, result:  &{[] [] [[0 1 2] [0 1 2] [2]]}
finish analysis for: runtime.growWork_fast32, result:  &{[] [] [[0 1 2] [0 1 2] [2]]}
finish analysis for: (context.todoCtx).Deadline, result:  &{[0] [[] []] []}
finish analysis for: (*time.dataIO).byte, result:  &{[0] [[0] []] []}
finish analysis for: strings.trimLeftASCII, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: (*time.Time).Second, result:  &{[0] [[]] []}
finish analysis for: syscall.Undelete, result:  &{[] [[]] [[0]]}
end analysis for: runtime/internal/atomic.Loadint32 , result:  &{[] [[]] [[0]]}
end analysis for: sync/atomic.LoadInt32 , result:  &{[] [[]] [[0]]}
finish analysis for: math/bits.LeadingZeros32, result:  &{[] [[0]] [[0]]}
finish analysis for: (*sync/atomic.Int64).Load, result:  &{[0] [[]] []}
finish analysis for: (*runtime.pallocSum).unpack, result:  &{[0] [[] [] []] []}
finish analysis for: strconv.AppendBool, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: bytes.TrimPrefix, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: syscall.utimes, result:  &{[] [[]] [[0] [1]]}
finish analysis for: reflect.Swapper$8, result:  &{[] [] [[0] [1]]}
finish analysis for: strings.TrimSuffix, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: runtime.bytesHash, result:  &{[] [[]] [[0] [1]]}
finish analysis for: internal/fmtsort.compare, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*internal/fmtsort.SortedMap).Less, result:  &{[0] [[]] [[1] [2]]}
end analysis for: syscall.Getpagesize , result:  &{[] [[]] []}
end analysis for: syscall.libc_dup2_trampoline , result:  &{[] [] []}
finish analysis for: (*internal/reflectlite.rtype).FieldAlign, result:  &{[0] [[0]] []}
finish analysis for: runtime.sync_atomic_runtime_procUnpin, result:  &{[] [] []}
finish analysis for: (*reflect.rtype).gcSlice, result:  &{[0] [[0]] [[1] [2]]}
finish analysis for: sort.float64sAreSortedImpl, result:  &{[] [[]] [[0]]}
finish analysis for: sort.Float64sAreSorted, result:  &{[] [[]] [[0]]}
finish analysis for: (*runtime.debugLogReader).skip, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.debugLogWriter).ensure, result:  &{[0] [] [[1]]}
finish analysis for: (*runtime.debugLogWriter).writeFrameAt, result:  &{[0 2] [[2]] [[1] [2]]}
finish analysis for: (*runtime.debugLogWriter).bytes, result:  &{[0] [] [[1]]}
finish analysis for: (*runtime.debugLogWriter).writeUint64LE, result:  &{[0] [] [[1]]}
finish analysis for: (*runtime.debugLogWriter).writeSync, result:  &{[0 1 2] [] [[1] [2]]}
end analysis for: internal/godebug.registerMetric , result:  &{[] [] [[0] [1]]}
end analysis for: reflect.ifaceE2I , result:  &{[] [] [[0] [1] [2]]}
finish analysis for: syscall.BpfTimeout, result:  &{[] [[] []] [[0]]}
finish analysis for: bytes.trimRightUnicode, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: bytes.trimRightASCII, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: bytes.TrimRight, result:  &{[] [[0]] [[0] [1]]}
end analysis for: runtime.save_g , result:  &{[] [] []}
finish analysis for: (os.fileWithoutWriteTo).setWriteDeadline, result:  &{[0] [[]] [[1]]}
end analysis for: sync.runtime_doSpin , result:  &{[] [] []}
finish analysis for: runtime.initMetrics$32, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.printeface, result:  &{[] [] [[0]]}
finish analysis for: (internal/reflectlite.Value).mustBeAssignable, result:  &{[0] [] []}
finish analysis for: (*internal/reflectlite.Value).typ, result:  &{[0] [[]] []}
finish analysis for: syscall.sendto, result:  &{[] [[]] [[0] [1] [2] [3] [4]]}
end analysis for: syscall.rawSyscall6 , result:  &{[] [[] [] []] [[0] [1] [2] [3] [4] [5] [6]]}
finish analysis for: strings.trimRightByte, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: (reflect.StructTag).Get, result:  &{[0] [[0]] [[1]]}
finish analysis for: (*reflect.StructTag).Get, result:  &{[0] [[]] [[1]]}
finish analysis for: (*reflect.Value).stringNonString, result:  &{[0] [[]] []}
finish analysis for: (*os.unixDirent).String, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.funcInfo).valid, result:  &{[0] [[]] []}
end analysis for: sync/atomic.SwapUint64 , result:  &{[] [[]] [[0] [1]]}
finish analysis for: internal/race.Errors, result:  &{[] [[]] []}
finish analysis for: io.ReadAll, result:  &{[] [[] []] [[0]]}
finish analysis for: runtime.g0_pthread_setspecific, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.sigdisable, result:  &{[] [] [[0]]}
finish analysis for: runtime.signal_disable, result:  &{[] [] [[0]]}
finish analysis for: unicode.IsTitle, result:  &{[] [[0]] [[0]]}
finish analysis for: (os.dirFS).ReadFile, result:  &{[0] [[] [0 1]] [[1]]}
finish analysis for: (*os.dirFS).ReadFile, result:  &{[0] [[] [1]] [[1]]}
finish analysis for: (*internal/reflectlite.rtype).In, result:  &{[0] [[]] [[1]]}
finish analysis for: runtime.binarySearchTree, result:  &{[] [[] [0] [1]] [[0] [1] [2]]}
finish analysis for: (*runtime.stackScanState).buildIndex, result:  &{[0] [] []}
finish analysis for: (*internal/godebug.Setting).register, result:  &{[0] [] []}
finish analysis for: (*internal/godebug.Setting).register$bound, result:  &{[] [] []}
finish analysis for: (*runtime.notInHeap).add, result:  &{[0] [[0 1]] [[1]]}
end analysis for: slices.swapRangeOrdered , result:  &{[] [] [[0] [1] [2] [3]]}
end analysis for: runtime.strhash , result:  &{[] [[]] [[0] [1]]}
end analysis for: syscall.libc_access_trampoline , result:  &{[] [] []}
finish analysis for: (*os.fileWithoutReadFrom).SetWriteDeadline, result:  &{[0] [[]] [[1]]}
finish analysis for: sync.poolCleanup, result:  &{[] [] []}
end analysis for: (*sync/atomic.Pointer[sync.readOnly]).CompareAndSwap[sync.readOnly] , result:  &{[0] [[]] [[1] [2]]}
finish analysis for: (os.fileWithoutWriteTo).writeTo, result:  &{[0] [[] [] []] [[1]]}
finish analysis for: math.Nextafter, result:  &{[] [[0 1]] [[0] [1]]}
end analysis for: syscall.libc_getsockopt_trampoline , result:  &{[] [] []}
finish analysis for: runtime.selectgo$3, result:  &{[] [] []}
finish analysis for: syscall.Sendto, result:  &{[] [[]] [[0] [1] [2] [3]]}
finish analysis for: (*internal/poll.FD).WriteTo, result:  &{[0] [[] []] [[1] [2]]}
finish analysis for: reflect.callMethod, result:  &{[] [] [[0] [1] [2] [0 1 3]]}
finish analysis for: runtime.syscall_rawSyscall, result:  &{[] [[0 1 2 3] [0 1 2 3] [0 1 2 3]] [[0] [1] [2] [3]]}
finish analysis for: (*sync/atomic.Int64).Swap, result:  &{[0] [[]] [[1]]}
finish analysis for: (*strings.byteStringReplacer).Replace, result:  &{[0] [[1]] [[1]]}
finish analysis for: (os.fileWithoutWriteTo).ReadAt, result:  &{[0] [[] [0]] [[1] [2]]}
finish analysis for: (*runtime.liveUserArenaChunk).objBase, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: path.scanChunk, result:  &{[] [[] [0] [0]] [[0]]}
finish analysis for: path.getEsc, result:  &{[] [[0] [0] []] [[0]]}
finish analysis for: path.matchChunk, result:  &{[] [[1] [] []] [[0] [1]]}
finish analysis for: path.Match, result:  &{[] [[] []] [[0] [1]]}
finish analysis for: path.Split, result:  &{[] [[0] [0]] [[0]]}
finish analysis for: io/fs.glob, result:  &{[] [[1 3] []] [[0] [1] [2] [3]]}
finish analysis for: (*io/fs.subFS).fixErr, result:  &{[0] [[1]] [[1]]}
finish analysis for: (*io/fs.subFS).Glob, result:  &{[0] [[] [0]] [[1]]}
finish analysis for: io/fs.globWithLimit, result:  &{[] [[1] [0]] [[0] [1] [2]]}
finish analysis for: io/fs.Glob, result:  &{[] [[1] [0]] [[0] [1]]}
end analysis for: reflect.unsafe_NewArray , result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.reflect_unsafe_NewArray, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*io.nopCloser).Read, result:  &{[0] [[] []] [[1]]}
end analysis for: (*runtime/internal/atomic.Pointer[runtime.profBuf]).Store[runtime.profBuf] , result:  &{[0] [] [[1]]}
finish analysis for: runtime.countrunes, result:  &{[] [[]] [[0]]}
finish analysis for: sync.OnceFunc, result:  &{[] [[]] [[0]]}
end analysis for: time.Sleep , result:  &{[] [] [[0]]}
finish analysis for: runtime.dumpgs$1, result:  &{[] [] [[0]]}
finish analysis for: math.archAcosh, result:  &{[] [[]] [[0]]}
finish analysis for: (*os.fileStat).Name, result:  &{[0] [[0]] []}
finish analysis for: (io/fs.dirInfo).Name, result:  &{[0] [[0]] []}
finish analysis for: math.archTanh, result:  &{[] [[]] [[0]]}
finish analysis for: math.Tanh, result:  &{[] [[0]] [[0]]}
finish analysis for: path/filepath.Ext, result:  &{[] [[0]] [[0]]}
finish analysis for: (internal/reflectlite.rtype).Align, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.ArrayType).NumMethod, result:  &{[0] [[]] []}
finish analysis for: os.WriteFile, result:  &{[] [[0]] [[0] [1] [2]]}
finish analysis for: runtime.morestackc, result:  &{[] [] []}
finish analysis for: runtime.block, result:  &{[] [] []}
finish analysis for: runtime.reflect_rselect, result:  &{[] [[] []] [[0]]}
finish analysis for: (*time.Location).String, result:  &{[0] [[0]] []}
finish analysis for: syscall.parseNetworkLayerAddr, result:  &{[] [[] []] [[0] [1]]}
finish analysis for: syscall.parseSockaddrInet, result:  &{[] [[0] []] [[0] [1]]}
finish analysis for: (*syscall.InterfaceAddrMessage).sockaddr, result:  &{[0] [[0] []] []}
finish analysis for: (*runtime.pageCache).flush, result:  &{[0] [] [[0 1]]}
finish analysis for: (*runtime.p).destroy$1, result:  &{[] [] []}
end analysis for: syscall.libc_fchmod_trampoline , result:  &{[] [] []}
finish analysis for: (*internal/abi.InterfaceType).FuncType, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.liveUserArenaChunk).base, result:  &{[0] [[0]] []}
finish analysis for: runtime.dumpitabs, result:  &{[] [] []}
finish analysis for: runtime.dumpgs, result:  &{[] [] []}
finish analysis for: runtime.finq_callback, result:  &{[] [] [[0] [1] [2] [3] [4]]}
finish analysis for: runtime.iterate_finq, result:  &{[] [] [[0]]}
finish analysis for: runtime.dumpfinalizer, result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: runtime.dumproots, result:  &{[] [] []}
finish analysis for: runtime.mdump, result:  &{[] [] [[0]]}
finish analysis for: runtime.initMetrics$56, result:  &{[] [] [[0] [1]]}
finish analysis for: (*os.fileWithoutWriteTo).WriteAt, result:  &{[0] [[] [0]] [[1] [2]]}
finish analysis for: strings.Fields, result:  &{[] [[0]] [[0]]}
finish analysis for: (*reflect.structType).FieldByIndex, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (*sync.poolChainElt).pushHead, result:  &{[0 1] [[]] [[1]]}
finish analysis for: runtime.pollWork, result:  &{[] [[]] []}
finish analysis for: syscall.Getpgid, result:  &{[] [[] []] [[0]]}
end analysis for: reflect.mapiterinit , result:  &{[] [] [[0] [1] [2]]}
finish analysis for: runtime.nextslicecap, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.bulkBarrierPreWriteSrcOnly, result:  &{[] [] [[0 2 3] [1] [0 2 3] [0 2 3]]}
finish analysis for: runtime.growslice, result:  &{[] [[1 2 3 4]] [[0] [1] [2] [3] [1 2 3 4]]}
finish analysis for: (*io.discard).ReadFrom, result:  &{[0] [[] []] [[1]]}
finish analysis for: runtime.timediv, result:  &{[] [[]] [[0] [1] [0 1 2]]}
finish analysis for: internal/reflectlite.Swapper$3, result:  &{[] [] [[0] [1]]}
end analysis for: internal/bytealg.abigen_runtime_cmpstring , result:  &{[] [[]] [[0] [1]]}
finish analysis for: (syscall.Signal).String, result:  &{[0] [[0]] []}
finish analysis for: (reflect.Value).Cap, result:  &{[0] [[0]] []}
finish analysis for: (*reflect.Value).Cap, result:  &{[0] [[]] []}
finish analysis for: (*time.Duration).Seconds, result:  &{[0] [[]] []}
finish analysis for: runtime.goschedIfBusy, result:  &{[] [] []}
finish analysis for: runtime.goPanicSlice3Acap, result:  &{[] [] [[0] [1]]}
finish analysis for: strings.SplitN, result:  &{[] [[0]] [[0] [1] [2]]}
finish analysis for: (*internal/abi.InterfaceType).StructType, result:  &{[0] [[0]] []}
finish analysis for: syscall.getpeername, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: syscall.Getpeername, result:  &{[] [[] []] [[0]]}
finish analysis for: (sort.IntSlice).Swap, result:  &{[0] [] [[1] [2]]}
finish analysis for: (*sort.IntSlice).Swap, result:  &{[0] [] [[1] [2]]}
end analysis for: reflect.verifyNotInHeapPtr , result:  &{[] [[]] [[0]]}
finish analysis for: runtime.fneg64, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.fsub64, result:  &{[] [[0 1]] [[0] [1]]}
end analysis for: syscall.libc_close_trampoline , result:  &{[] [] []}
finish analysis for: strconv.QuoteRune, result:  &{[] [[0]] [[0]]}
finish analysis for: (time.Time).Weekday, result:  &{[0] [[0]] []}
finish analysis for: (*time.Time).Weekday, result:  &{[0] [[]] []}
end analysis for: runtime.call536870912 , result:  &{[] [] [[0] [1] [2] [3] [4] [5] [6]]}
finish analysis for: runtime.panicrangeexit, result:  &{[] [] []}
end analysis for: syscall.libc_link_trampoline , result:  &{[] [] []}
finish analysis for: (reflect.Value).mustBe, result:  &{[0] [] [[1]]}
end analysis for: (*runtime/internal/atomic.Pointer[runtime._defer]).StoreNoWB[runtime._defer] , result:  &{[0] [] [[1]]}
finish analysis for: bytes.SplitN, result:  &{[] [[0]] [[0] [1] [2]]}
finish analysis for: runtime.goroutineProfileWithLabelsSync$4, result:  &{[] [] [[0]]}
finish analysis for: (*reflect.StructTag).Lookup, result:  &{[0] [[] []] [[1]]}
end analysis for: internal/syscall/unix.syscall_syscall6 , result:  &{[] [[] [] []] [[0] [1] [2] [3] [4] [5] [6]]}
finish analysis for: (*reflect.structType).InterfaceType, result:  &{[0] [[0]] []}
finish analysis for: (*reflect.MapIter).Reset, result:  &{[0 1] [] [[1]]}
finish analysis for: (*internal/abi.InterfaceType).Len, result:  &{[0] [[0]] []}
finish analysis for: (*reflect.flag).mustBeExported, result:  &{[0] [] []}
finish analysis for: (*os/exec.ExitError).Success, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.liveUserArenaChunk).typePointersOfType, result:  &{[0] [[1 2]] [[1] [2]]}
finish analysis for: runtime.init#7, result:  &{[] [] []}
end analysis for: syscall.libc_fcntl_trampoline , result:  &{[] [] []}
finish analysis for: runtime.initMetrics$9, result:  &{[] [] [[0] [0 1]]}
finish analysis for: (*time.Duration).String, result:  &{[0] [[]] []}
finish analysis for: (os.fileWithoutReadFrom).seek, result:  &{[0] [[] []] [[1] [2]]}
finish analysis for: runtime.startTheWorld$1, result:  &{[] [] []}
end analysis for: runtime.call2048 , result:  &{[] [] [[0] [1] [2] [3] [4] [5] [6]]}
finish analysis for: (*internal/abi.ArrayType).InterfaceType, result:  &{[0] [[0]] []}
finish analysis for: (*os.fileWithoutReadFrom).Fd, result:  &{[0] [[0]] []}
end analysis for: syscall.libc_unlinkat_trampoline , result:  &{[] [] []}
end analysis for: runtime.syscall_x509 , result:  &{[] [] []}
finish analysis for: (*context.backgroundCtx).Err, result:  &{[0] [[]] []}
finish analysis for: runtime._System, result:  &{[] [] []}
finish analysis for: runtime.getPageSize, result:  &{[] [[]] []}
end analysis for: internal/bytealg.MakeNoZero , result:  &{[] [[]] [[0]]}
finish analysis for: runtime.SetMutexProfileFraction, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.raisebadsignal, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.badsignal, result:  &{[] [] [[0] [1]]}
finish analysis for: (*io.PipeReader).Read, result:  &{[0] [[] [0]] [[1]]}
finish analysis for: (*internal/reflectlite.rtype).exportedMethods, result:  &{[0] [[]] []}
finish analysis for: (context.stopCtx).Value, result:  &{[0] [[]] [[1]]}
finish analysis for: (*internal/poll.FD).RawRead, result:  &{[0] [[]] [[1]]}
finish analysis for: (*os.rawConn).Read, result:  &{[0] [[]] [[1]]}
finish analysis for: runtime.sigprofNonGoPC, result:  &{[] [] [[0]]}
finish analysis for: (*sync/atomic.Int32).Load, result:  &{[0] [[]] []}
finish analysis for: sync.syscall_hasWaitingReaders, result:  &{[] [[]] [[0]]}
end analysis for: slices.IsSorted[[]int int] , result:  &{[] [[]] [[0]]}
end analysis for: syscall.libc_chroot_trampoline , result:  &{[] [] []}
finish analysis for: (*reflect.flag).mustBeExportedSlow, result:  &{[0] [] []}
finish analysis for: (*internal/poll.FD).ReadFromInet4, result:  &{[0] [[] []] [[1] [2]]}
finish analysis for: reflect.Append, result:  &{[] [[0]] [[0] [1]]}
end analysis for: slices.CompareFunc , result:  &{[] [[]] [[0] [1] [2]]}
end analysis for: runtime/internal/atomic.Anduintptr , result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*reflect.structType).Key, result:  &{[0] [[0]] []}
end analysis for: internal/bytealg.IndexByte , result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*internal/abi.MapType).FuncType, result:  &{[0] [[0]] []}
finish analysis for: runtime.entersyscall_sysmon, result:  &{[] [] []}
finish analysis for: (os.fileWithoutReadFrom).Write, result:  &{[0] [[] [0]] [[1]]}
finish analysis for: (*internal/reflectlite.rtype).Kind, result:  &{[0] [[0]] []}
finish analysis for: runtime.f32toint32, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.initMetrics$35, result:  &{[] [] [[0] [0 1]]}
finish analysis for: os.Chown, result:  &{[] [[0]] [[0] [1] [2]]}
finish analysis for: runtime.GOROOT, result:  &{[] [[]] []}
finish analysis for: runtime.getCachedDlogger, result:  &{[] [[]] []}
end analysis for: slices.MaxFunc , result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*sync.poolChainElt).popTail, result:  &{[0] [[0] []] []}
finish analysis for: (*syscall.Signal).String, result:  &{[0] [[]] []}
finish analysis for: (*internal/abi.ArrayType).Uncommon, result:  &{[0] [[0]] []}
finish analysis for: strings.makeASCIISet, result:  &{[] [[0] []] [[0]]}
finish analysis for: strings.IndexAny, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: strings.ContainsAny, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: runtime.g0_pthread_key_create, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.moveToBmap, result:  &{[] [[0 1 2 3 4] [3]] [[0 1 2 3 4] [0 1 2 3] [2] [3] [4]]}
finish analysis for: runtime.mapclone2, result:  &{[] [[0 1]] [[0 1] [1]]}
finish analysis for: runtime.casgstatus$1, result:  &{[] [] []}
finish analysis for: (*os.unixDirent).IsDir, result:  &{[0] [[0]] []}
finish analysis for: syscall.Adjtime, result:  &{[] [[]] [[0] [1]]}
end analysis for: runtime.call512 , result:  &{[] [] [[0] [1] [2] [3] [4] [5] [6]]}
end analysis for: time.parseNanoseconds , result:  &{[] [[] [] []] [[0] [1]]}
finish analysis for: (os.fileWithoutReadFrom).Readdirnames, result:  &{[0] [[] [0]] [[1]]}
end analysis for: sync.runtime_procUnpin , result:  &{[] [] []}
finish analysis for: runtime.mapaccess2_fast32, result:  &{[] [[0 1 2] []] [[0] [1] [2]]}
finish analysis for: strings.trimRightASCII, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: strings.TrimRight, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: time.interrupt, result:  &{[] [] []}
finish analysis for: syscall.openat, result:  &{[] [[] []] [[0] [1] [2] [3]]}
finish analysis for: syscall.fdopendir, result:  &{[] [[] []] [[0]]}
finish analysis for: syscall.readdir_r, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: syscall.Getdirentries, result:  &{[] [[] []] [[0] [1] [2]]}
finish analysis for: strings.LastIndexAny, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*internal/abi.StructType).HasName, result:  &{[0] [[0]] []}
finish analysis for: (*sync/atomic.Uintptr).CompareAndSwap, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: (*runtime.spanClass).sizeclass, result:  &{[0] [[]] []}
finish analysis for: runtime.chanrecv$1, result:  &{[] [] []}
end analysis for: slices.rotateLeft , result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.initMetrics$39, result:  &{[] [] [[0] [0 1]]}
finish analysis for: path/filepath.cleanGlobPath, result:  &{[] [[0]] [[0]]}
finish analysis for: (*internal/poll.FD).Fsync, result:  &{[0] [[]] []}
finish analysis for: (*os.File).Sync, result:  &{[0] [[0]] []}
finish analysis for: runtime.wbZero, result:  &{[] [] [[0 1] [0 1]]}
finish analysis for: (*internal/abi.MapType).StructType, result:  &{[0] [[0]] []}
finish analysis for: runtime.gcMarkTermination$4$1, result:  &{[] [] []}
finish analysis for: syscall.Sync, result:  &{[] [[]] []}
end analysis for: internal/syscall/unix.syscall_syscallPtr , result:  &{[] [[] [] []] [[0] [1] [2] [3]]}
finish analysis for: internal/syscall/unix.Grantpt, result:  &{[] [[]] [[0]]}
end analysis for: slices.partialInsertionSortCmpFunc , result:  &{[] [[]] [[0] [1] [2] [3]]}
end analysis for: syscall.runtime_AfterForkInChild , result:  &{[] [] []}
finish analysis for: runtime.traceAdvance$2, result:  &{[] [] []}
end analysis for: (*sync/atomic.Pointer[internal/godebug.value]).Store[internal/godebug.value] , result:  &{[0] [] [[1]]}
finish analysis for: runtime.growWork_faststr, result:  &{[] [] [[0 1 2] [0 1 2] [2]]}
finish analysis for: runtime.mapassign_faststr, result:  &{[] [[0 1 2]] [[0 1 2] [0 1 2] [2]]}
finish analysis for: (os.fileWithoutReadFrom).setDeadline, result:  &{[0] [[]] [[1]]}
finish analysis for: (*os.ProcessState).Exited, result:  &{[0] [[0]] []}
finish analysis for: (*os/exec.wrappedError).Unwrap, result:  &{[0] [[]] []}
finish analysis for: runtime.goroutineProfileWithLabelsConcurrent$2, result:  &{[] [] [[0]]}
finish analysis for: internal/reflectlite.Swapper$6, result:  &{[] [] [[0] [1]]}
end analysis for: sync/atomic.CompareAndSwapInt32 , result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: (runtime.liveUserArenaChunk).divideByElemSize, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: reflect.Swapper$5, result:  &{[] [] [[0] [1]]}
finish analysis for: syscall.Recvfrom, result:  &{[] [[] [] []] [[0] [1] [2]]}
finish analysis for: (*internal/abi.FuncType).Elem, result:  &{[0] [[0]] []}
finish analysis for: (*os.fileStat).ModTime, result:  &{[0] [[0]] []}
finish analysis for: (*reflect.structType).FieldByNameFunc, result:  &{[0] [[0] []] [[1]]}
finish analysis for: (*reflect.rtype).FieldByNameFunc, result:  &{[0] [[0] []] [[1]]}
finish analysis for: (reflect.Value).FieldByIndex, result:  &{[0] [[0]] [[1]]}
finish analysis for: (reflect.Value).FieldByNameFunc, result:  &{[0] [[0]] [[1]]}
finish analysis for: (*reflect.Value).FieldByNameFunc, result:  &{[0] [[]] [[1]]}
finish analysis for: runtime.runtime_FrameStartLine, result:  &{[] [[0]] [[0]]}
end analysis for: sync/atomic.AddUint32 , result:  &{[] [[]] [[0] [1]]}
finish analysis for: syscall.sendtoInet4, result:  &{[] [[]] [[0] [1] [2] [3]]}
finish analysis for: (*runtime.errorAddressString).Error, result:  &{[0] [[]] []}
finish analysis for: (*sync/atomic.Bool).CompareAndSwap, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: (*internal/abi.PtrType).ExportedMethods, result:  &{[0] [[0]] []}
finish analysis for: (*internal/poll.FD).WriteToInet6, result:  &{[0] [[] []] [[1] [2]]}
finish analysis for: (runtime.Pinner).unpin, result:  &{[0] [] []}
finish analysis for: (*reflect.structType).MapType, result:  &{[0] [[0]] []}
finish analysis for: runtime.setPinned$1, result:  &{[] [] []}
finish analysis for: io.NewSectionReader, result:  &{[] [[0 1 2]] [[0] [1] [2]]}
finish analysis for: runtime.reflect_resolveTypeOff, result:  &{[] [[1]] [[0] [1]]}
finish analysis for: bytes.indexBytePortable, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*errors.errorString).Error, result:  &{[0] [[0]] []}
finish analysis for: (*syscall.SockaddrUnix).sockaddr, result:  &{[0] [[0] [0] []] []}
finish analysis for: runtime.initMetrics$14, result:  &{[] [] [[0] [0 1]]}
finish analysis for: (time.Time).Month, result:  &{[0] [[0]] []}
finish analysis for: (*time.Time).Month, result:  &{[0] [[]] []}
finish analysis for: math.cbrt, result:  &{[] [[0]] [[0]]}
finish analysis for: math.Cbrt, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.initMetrics$40, result:  &{[] [] [[0] [0 1]]}
end analysis for: runtime.call268435456 , result:  &{[] [] [[0] [1] [2] [3] [4] [5] [6]]}
finish analysis for: runtime.fge32, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.convT64, result:  &{[] [[0]] [[0]]}
finish analysis for: (*time.Duration).format, result:  &{[0] [[]] [[1]]}
finish analysis for: runtime.sync_runtime_canSpin, result:  &{[] [[]] [[0]]}
finish analysis for: (*context.timerCtx).String, result:  &{[0] [[0]] []}
end analysis for: runtime.call32768 , result:  &{[] [] [[0] [1] [2] [3] [4] [5] [6]]}
finish analysis for: runtime.wbMove, result:  &{[] [] [[0 1] [0 1] [2]]}
end analysis for: runtime.gcWriteBarrier2 , result:  &{[] [] []}
end analysis for: slices.DeleteFunc , result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.readGCStats, result:  &{[] [] [[0]]}
finish analysis for: runtime.init#3, result:  &{[] [] []}
finish analysis for: internal/reflectlite.Swapper$1, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.mapdelete_faststr, result:  &{[] [] [[0 1 2] [0 1 2] [2]]}
finish analysis for: runtime.reflect_mapdelete_faststr, result:  &{[] [] [[0 1 2] [0 1 2] [2]]}
finish analysis for: (*internal/poll.FD).SetsockoptInet4Addr, result:  &{[0] [[]] [[1] [2] [3]]}
finish analysis for: runtime.writeheapdump_m, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.runtime_debug_WriteHeapDump$1, result:  &{[] [] []}
end analysis for: syscall.libc_getdtablesize_trampoline , result:  &{[] [] []}
finish analysis for: fmt.Printf, result:  &{[] [[] []] [[0 1] [1]]}
finish analysis for: (*unicode.SpecialCase).ToTitle, result:  &{[0] [[1]] [[1]]}
finish analysis for: syscall.GetsockoptICMPv6Filter, result:  &{[] [[] []] [[0] [1] [2]]}
finish analysis for: strconv.QuoteToASCII, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.initMetrics$7, result:  &{[] [] [[0] [0 1]]}
finish analysis for: (internal/reflectlite.rtype).NumOut, result:  &{[0] [[0]] []}
finish analysis for: (time.Time).In, result:  &{[0 1] [[0 1]] [[1]]}
finish analysis for: (*io.LimitedReader).Read, result:  &{[0] [[] []] [[1]]}
finish analysis for: runtime.Stack$1, result:  &{[] [] []}
finish analysis for: (*time.Time).MarshalBinary, result:  &{[0] [[] []] []}
end analysis for: internal/cpu.getsysctlbyname , result:  &{[] [[] []] [[0]]}
finish analysis for: runtime.gcTestIsReachable, result:  &{[] [[]] [[0]]}
end analysis for: syscall.libc_bind_trampoline , result:  &{[] [] []}
finish analysis for: (*internal/abi.PtrType).StructType, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.StructType).FuncType, result:  &{[0] [[0]] []}
end analysis for: runtime.gogo , result:  &{[] [] [[0]]}
end analysis for: math.archCeil , result:  &{[] [[]] [[0]]}
end analysis for: runtime/internal/atomic.Xchg64 , result:  &{[] [[]] [[0] [1]]}
end analysis for: syscall.libc_fdopendir_trampoline , result:  &{[] [] []}
finish analysis for: (*internal/poll.FD).WriteMsgInet6, result:  &{[0] [[] [] []] [[1] [2] [3]]}
finish analysis for: (runtime.pollInfo).expiredReadDeadline, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.SliceType).Align, result:  &{[0] [[0]] []}
finish analysis for: path/filepath.walkDir, result:  &{[] [[]] [[0] [1] [2]]}
end analysis for: slices.BinarySearchFunc , result:  &{[] [[] []] [[0] [1] [2]]}
end analysis for: slices.partialInsertionSortOrdered , result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: runtime.tracealloc$1, result:  &{[] [] []}
finish analysis for: (*reflect.ValueError).Error, result:  &{[0] [[0]] []}
finish analysis for: syscall.Flock, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.reflect_typehash, result:  &{[] [[2]] [[0] [1] [2]]}
finish analysis for: (*internal/abi.SliceType).ExportedMethods, result:  &{[0] [[0]] []}
finish analysis for: sort.SearchFloat64s, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (sort.Float64Slice).Search, result:  &{[0] [[]] [[1]]}
finish analysis for: (*sort.Float64Slice).Search, result:  &{[0] [[]] [[1]]}
finish analysis for: (*runtime.Func).FileLine, result:  &{[0] [[0] [0]] [[1]]}
finish analysis for: (*internal/abi.ArrayType).ArrayType, result:  &{[0] [[0]] []}
finish analysis for: reflect.MakeFunc, result:  &{[] [[0 1]] [[0] [1]]}
end analysis for: runtime.fandbits , result:  &{[] [[]] [[0] [1]]}
end analysis for: syscall.libc_fork_trampoline , result:  &{[] [] []}
end analysis for: internal/poll.writev , result:  &{[] [[] []] [[0] [1]]}
finish analysis for: runtime.readvarintUnsafe, result:  &{[] [[0] [0]] [[0]]}
finish analysis for: (*runtime._panic).initOpenCodedDefers, result:  &{[0 1 2] [[]] [[1] [2]]}
finish analysis for: runtime.rand32, result:  &{[] [[]] []}
finish analysis for: (internal/reflectlite.rtype).GcSlice, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: (os.fileWithoutWriteTo).Chdir, result:  &{[0] [[0]] []}
end analysis for: slices.partitionCmpFunc , result:  &{[] [[] []] [[0] [1] [2] [3] [4]]}
end analysis for: internal/syscall/unix.libresolv_res_9_ninit_trampoline , result:  &{[] [] []}
finish analysis for: runtime.notifyListAdd, result:  &{[] [[]] [[0]]}
finish analysis for: internal/syscall/unix.Freeaddrinfo, result:  &{[] [] [[0]]}
finish analysis for: (*reflect.structType).HasName, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.ArrayType).Common, result:  &{[0] [[0]] []}
end analysis for: (*sync/atomic.Pointer[sync.readOnly]).Load[sync.readOnly] , result:  &{[0] [[]] []}
end analysis for: runtime.pthread_cond_timedwait_relative_np_trampoline , result:  &{[] [] []}
finish analysis for: runtime._LostSIGPROFDuringAtomic64, result:  &{[] [] []}
finish analysis for: syscall.Fstat, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*internal/poll.FD).Fstat$1, result:  &{[] [[]] []}
end analysis for: (*runtime/internal/atomic.Pointer[func(string) func()]).Load[func(string) func()] , result:  &{[0] [[]] []}
end analysis for: sync/atomic.AddInt64 , result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.allocm$1, result:  &{[] [] []}
finish analysis for: io.MultiReader, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.printuintptr, result:  &{[] [] [[0]]}
finish analysis for: runtime.mapaccess2_faststr, result:  &{[] [[0 1 2] []] [[0] [1] [2]]}
finish analysis for: runtime.reflect_mapaccess_faststr, result:  &{[] [[0 1 2]] [[0] [1] [2]]}
end analysis for: slices.medianAdjacentCmpFunc , result:  &{[] [[]] [[0] [1] [2] [3]]}
end analysis for: slices.insertionSortCmpFunc , result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: (runtime.liveUserArenaChunk).isUnusedUserArenaChunk, result:  &{[0] [[0]] []}
finish analysis for: (internal/reflectlite.Value).IsValid, result:  &{[0] [[0]] []}
finish analysis for: (*internal/reflectlite.Value).IsValid, result:  &{[0] [[]] []}
end analysis for: runtime/internal/atomic.Casp1 , result:  &{[] [[]] [[0] [1] [2]]}
end analysis for: runtime/internal/atomic.Cas , result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: (*runtime.mheap).freeSpan$1, result:  &{[] [] []}
finish analysis for: (*io.onceError).lockSlow, result:  &{[0] [] []}
finish analysis for: (*context.withoutCancelCtx).Done, result:  &{[0] [[]] []}
finish analysis for: syscall.Ftruncate, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*internal/poll.FD).Ftruncate$1, result:  &{[] [[]] []}
finish analysis for: (*internal/abi.InterfaceType).Pointers, result:  &{[0] [[0]] []}
end analysis for: runtime.panicSliceB , result:  &{[] [] [[0] [1]]}
end analysis for: runtime.getclosureptr , result:  &{[] [[]] []}
finish analysis for: (*sync/atomic.Value).CompareAndSwap, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: runtime.getncpu, result:  &{[] [[]] []}
finish analysis for: runtime.osinit, result:  &{[] [] []}
finish analysis for: runtime.deferprocat, result:  &{[] [] [[0] [1]]}
finish analysis for: (*io.eofReader).Read, result:  &{[0] [[] []] [[1]]}
end analysis for: (*sync/atomic.Pointer[syscall.Rlimit]).Load[syscall.Rlimit] , result:  &{[0] [[]] []}
finish analysis for: (*runtime.mheap).allocSpan$1, result:  &{[] [[]] []}
finish analysis for: runtime.gcControllerCommit, result:  &{[] [] []}
end analysis for: reflect.resolveTypeOff , result:  &{[] [[]] [[0] [1]]}
end analysis for: syscall.libc_setprivexec_trampoline , result:  &{[] [] []}
finish analysis for: syscall.GetsockoptIPv6Mreq, result:  &{[] [[] []] [[0] [1] [2]]}
finish analysis for: (*io.multiWriter).WriteString, result:  &{[0 1] [[] []] [[1]]}
finish analysis for: runtime.malg$1, result:  &{[] [] []}
end analysis for: syscall.libc_setregid_trampoline , result:  &{[] [] []}
end analysis for: slices.IsSortedFunc , result:  &{[] [[]] [[0] [1]]}
end analysis for: slices.BinarySearch , result:  &{[] [[] []] [[0] [1]]}
finish analysis for: (runtime.liveUserArenaChunk).objIndex, result:  &{[0] [[0 1]] [[1]]}
end analysis for: runtime.call33554432 , result:  &{[] [] [[0] [1] [2] [3] [4] [5] [6]]}
finish analysis for: (syscall.WaitStatus).Continued, result:  &{[0] [[0]] []}
finish analysis for: internal/itoa.Uitox, result:  &{[] [[0]] [[0]]}
finish analysis for: (*os.ProcessState).String, result:  &{[0] [[0]] []}
finish analysis for: syscall.Setprivexec, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.initMetrics$12, result:  &{[] [] [[0] [0 1]]}
finish analysis for: time.AfterFunc, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: context.WithDeadlineCause, result:  &{[] [[0 1 2] []] [[0] [1] [2]]}
finish analysis for: context.WithDeadline, result:  &{[] [[0 1] []] [[0] [1]]}
finish analysis for: context.WithTimeout, result:  &{[] [[0 1] []] [[0] [1]]}
finish analysis for: (*context.valueCtx).Done, result:  &{[0] [[]] []}
finish analysis for: (runtime.liveUserArenaChunk).countAlloc, result:  &{[0] [[0]] []}
finish analysis for: (internal/reflectlite.rtype).Implements, result:  &{[0] [[]] [[1]]}
finish analysis for: (*internal/reflectlite.rtype).Implements, result:  &{[0] [[]] [[1]]}
finish analysis for: (*io.PipeReader).readCloseError, result:  &{[0] [[0]] []}
finish analysis for: math.Dim, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.reflectlite_unsafe_New, result:  &{[] [[0]] [[0]]}
finish analysis for: (*time.Duration).Milliseconds, result:  &{[0] [[]] []}
finish analysis for: (*runtime.wbBuf).empty, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.ArrayType).Align, result:  &{[0] [[0]] []}
finish analysis for: internal/abi.TFlagOff, result:  &{[] [[0]] [[0]]}
finish analysis for: (*io/fs.dirInfo).Name, result:  &{[0] [[]] []}
finish analysis for: (*context.stopCtx).Done, result:  &{[0] [[]] []}
finish analysis for: reflect.cvtT2I, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*fmt.pp).WriteString, result:  &{[0 1] [[] []] [[0 1]]}
finish analysis for: (*strings.stringWriter).WriteString, result:  &{[0] [[] []] [[1]]}
finish analysis for: time.LoadLocation$1, result:  &{[] [] []}
finish analysis for: runtime.panicmakeslicecap, result:  &{[] [] []}
finish analysis for: reflect.Indirect, result:  &{[] [[0]] [[0]]}
finish analysis for: (*internal/reflectlite.rtype).Common, result:  &{[0] [[0]] []}
finish analysis for: math.erfc, result:  &{[] [[0]] [[0]]}
finish analysis for: (internal/reflectlite.rtype).Size, result:  &{[0] [[0]] []}
finish analysis for: (os.fileWithoutReadFrom).chmod, result:  &{[0] [[0]] [[1]]}
finish analysis for: runtime.gfput, result:  &{[] [] [[0 1] [0 1]]}
finish analysis for: (*bytes.Reader).Len, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.PtrType).IfaceIndir, result:  &{[0] [[0]] []}
finish analysis for: internal/godebugs.Lookup, result:  &{[] [[]] [[0]]}
finish analysis for: (os/exec.ExitError).sys, result:  &{[0] [[0]] []}
end analysis for: sync.runtime_Semacquire , result:  &{[] [] [[0]]}
end analysis for: (*runtime/internal/atomic.Pointer[string]).Store[string] , result:  &{[0] [] [[1]]}
finish analysis for: unicode.IsNumber, result:  &{[] [[0]] [[0]]}
finish analysis for: syscall.copyenv, result:  &{[] [] []}
end analysis for: syscall.libc_getsockname_trampoline , result:  &{[] [] []}
finish analysis for: (*strings.appendSliceWriter).Write, result:  &{[0 1] [[] []] [[0 1]]}
finish analysis for: runtime.create, result:  &{[] [[]] [[0] [1]]}
end analysis for: runtime.munmap_trampoline , result:  &{[] [] []}
finish analysis for: syscall.SetsockoptString, result:  &{[] [[]] [[0] [1] [2] [3]]}
finish analysis for: (sort.Float64Slice).Len, result:  &{[0] [[]] []}
finish analysis for: (*sort.Float64Slice).Len, result:  &{[0] [[]] []}
finish analysis for: (context.deadlineExceededError).Temporary, result:  &{[0] [[]] []}
finish analysis for: (*context.deadlineExceededError).Temporary, result:  &{[0] [[]] []}
finish analysis for: bytes.SplitAfterN, result:  &{[] [[0]] [[0] [1] [2]]}
finish analysis for: runtime.SetBlockProfileRate, result:  &{[] [] [[0]]}
finish analysis for: (*internal/abi.ChanType).Align, result:  &{[0] [[0]] []}
end analysis for: time.parseRFC3339[string] , result:  &{[] [[] []] [[0] [1]]}
finish analysis for: runtime.mapaccess1_fast32, result:  &{[] [[0 1 2]] [[0] [1] [2]]}
finish analysis for: (*os/exec.Error).Unwrap, result:  &{[0] [[0]] []}
finish analysis for: os.Clearenv, result:  &{[] [] []}
end analysis for: internal/bytealg.HashStrRev[string] , result:  &{[] [[] []] [[0]]}
finish analysis for: runtime.reflect_mapiterkey, result:  &{[] [[0]] [[0]]}
end analysis for: sync/atomic.AddInt32 , result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*reflect.structType).ChanDir, result:  &{[0] [[0]] []}
end analysis for: runtime.panicSlice3AcapU , result:  &{[] [] [[0] [1]]}
end analysis for: runtime/internal/atomic.Loadp , result:  &{[] [[]] [[0]]}
finish analysis for: (reflect.Value).ro, result:  &{[0] [[]] []}
end analysis for: syscall.libc_mknod_trampoline , result:  &{[] [] []}
finish analysis for: runtime.wbBufFlush$1, result:  &{[] [] []}
finish analysis for: internal/race.Write, result:  &{[] [] [[0]]}
finish analysis for: (*sync.WaitGroup).Wait, result:  &{[0] [] []}
finish analysis for: (os/exec.wrappedError).Error, result:  &{[0] [[0]] []}
finish analysis for: (*context.valueCtx).Deadline, result:  &{[0] [[] []] []}
finish analysis for: (*reflect.Value).MapIndex, result:  &{[0] [[]] [[1]]}
finish analysis for: (*internal/abi.ChanType).Len, result:  &{[0] [[0]] []}
finish analysis for: bytes.ToTitle, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.writeHeapBitsForAddr, result:  &{[] [] []}
finish analysis for: (*os/exec.ExitError).userTime, result:  &{[0] [[0]] []}
finish analysis for: (*strings.Reader).ReadByte, result:  &{[0] [[0] []] []}
finish analysis for: runtime.slicebytetostring, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: syscall.SetsockoptLinger, result:  &{[] [[]] [[0] [1] [2] [3]]}
finish analysis for: (*internal/poll.FD).SetsockoptLinger, result:  &{[0] [[]] [[1] [2] [3]]}
finish analysis for: (*reflect.Value).typeSlow, result:  &{[0] [[]] []}
finish analysis for: runtime.initMetrics$38, result:  &{[] [] [[0] [0 1]]}
finish analysis for: context.WithDeadlineCause$2, result:  &{[] [] []}
finish analysis for: (runtime.traceWriter).refill$1, result:  &{[] [] []}
end analysis for: sync/atomic.CompareAndSwapUint64 , result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: (internal/reflectlite.rtype).IfaceIndir, result:  &{[0] [[0]] []}
end analysis for: runtime.pthread_cond_wait_trampoline , result:  &{[] [] []}
finish analysis for: reflect.cvtUint, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: sort.Reverse, result:  &{[] [[0]] [[0]]}
finish analysis for: unicode.IsUpper, result:  &{[] [[0]] [[0]]}
finish analysis for: (*context.backgroundCtx).Value, result:  &{[0] [[]] [[1]]}
end analysis for: reflect.typedmemclrpartial , result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: runtime.BlockProfile, result:  &{[] [[] []] [[0]]}
finish analysis for: runtime._ExternalCode, result:  &{[] [] []}
end analysis for: internal/bytealg.Index , result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.goPanicSliceAlenU, result:  &{[] [] [[0] [1]]}
finish analysis for: (internal/reflectlite.rtype).MapType, result:  &{[0] [[0]] []}
finish analysis for: bytes.IndexRune, result:  &{[] [[]] [[0] [1]]}
finish analysis for: bytes.ContainsRune, result:  &{[] [[]] [[0] [1]]}
finish analysis for: path/filepath.hasMeta, result:  &{[] [[0]] [[0]]}
finish analysis for: path/filepath.Split, result:  &{[] [[0] [0]] [[0]]}
finish analysis for: path/filepath.cleanGlobPathWindows, result:  &{[] [[] [0]] [[0]]}
finish analysis for: path/filepath.globWithLimit, result:  &{[] [[0] []] [[0] [1]]}
finish analysis for: path/filepath.Glob, result:  &{[] [[0] []] [[0]]}
finish analysis for: (*strings.singleStringReplacer).Replace, result:  &{[0 1] [[0 1]] [[0 1]]}
finish analysis for: unicode.IsMark, result:  &{[] [[0]] [[0]]}
finish analysis for: (time.Duration).Hours, result:  &{[0] [[0]] []}
finish analysis for: (os/exec.ExitError).success, result:  &{[0] [[0]] []}
end analysis for: sync/atomic.StorePointer , result:  &{[] [] [[0] [1]]}
finish analysis for: syscall.Getpgrp, result:  &{[] [[]] []}
finish analysis for: runtime.gdestroy, result:  &{[] [] [[0]]}
finish analysis for: runtime.goexit0, result:  &{[] [] [[0]]}
finish analysis for: os.IsPermission, result:  &{[] [[0]] [[0]]}
finish analysis for: strconv.AppendInt, result:  &{[] [[0 1 2]] [[0 1 2] [1] [2]]}
finish analysis for: (os/exec.ExitError).Exited, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.InterfaceType).HasName, result:  &{[0] [[0]] []}
end analysis for: syscall.rawSyscall , result:  &{[] [[] [] []] [[0] [1] [2] [3]]}
finish analysis for: (*runtime.debugLogWriter).uvarint, result:  &{[0 1] [] [[1]]}
finish analysis for: (*runtime.debugLogWriter).varint, result:  &{[0 1] [] [[1]]}
finish analysis for: (os/exec.ExitError).Success, result:  &{[0] [[0]] []}
end analysis for: reflect.unsafe_New , result:  &{[] [[]] [[0]]}
finish analysis for: unicode.In, result:  &{[] [[]] [[0] [1]]}
finish analysis for: unicode.IsGraphic, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.goPanicSlice3AcapU, result:  &{[] [] [[0] [1]]}
finish analysis for: (*os.fileWithoutWriteTo).wrapErr, result:  &{[0] [[0 1 2]] [[1] [2]]}
finish analysis for: (context.stopCtx).Done, result:  &{[0] [[]] []}
end analysis for: syscall.libc_fchflags_trampoline , result:  &{[] [] []}
end analysis for: runtime/internal/atomic.Or8 , result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.initMetrics$28, result:  &{[] [] [[0] [1]]}
finish analysis for: (runtime.liveUserArenaChunk).markBitsForIndex, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (os.fileWithoutReadFrom).Sync, result:  &{[0] [[0]] []}
end analysis for: (*sync/atomic.Pointer[internal/godebug.value]).Swap[internal/godebug.value] , result:  &{[0] [[]] [[1]]}
finish analysis for: (os/exec.ExitError).SystemTime, result:  &{[0] [[0]] []}
end analysis for: internal/reflectlite.unsafe_New , result:  &{[] [[]] [[0]]}
finish analysis for: syscall.Sysctl, result:  &{[] [[] []] [[0]]}
finish analysis for: os.hostname, result:  &{[] [[] []] []}
finish analysis for: os.Hostname, result:  &{[] [[] []] []}
finish analysis for: reflect.cvtInt, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (reflect.Value).Comparable, result:  &{[0] [[0]] []}
finish analysis for: (*reflect.Value).Comparable, result:  &{[0] [[]] []}
end analysis for: runtime/internal/atomic.Casuintptr , result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: runtime.gcAssistAlloc$1, result:  &{[] [] []}
finish analysis for: fmt.errorHandler, result:  &{[] [] [[0]]}
end analysis for: internal/syscall/unix.RecvfromInet4 , result:  &{[] [[] []] [[0] [1] [2] [3]]}
finish analysis for: context.WithTimeoutCause, result:  &{[] [[0 1 2] []] [[0] [1] [2]]}
finish analysis for: (os.fileWithoutWriteTo).readdir, result:  &{[0] [[] [0] [0] [0]] [[1] [2]]}
finish analysis for: syscall.SetBpfImmediate, result:  &{[] [[]] [[0] [1]]}
end analysis for: syscall.libc_setpriority_trampoline , result:  &{[] [] []}
finish analysis for: math.max, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: math.Max, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: reflect.Swapper$7, result:  &{[] [] [[0] [1]]}
end analysis for: runtime.panicSliceAlen , result:  &{[] [] [[0] [1]]}
finish analysis for: (internal/reflectlite.rtype).ExportedMethods, result:  &{[0] [[0]] []}
finish analysis for: syscall.getsockname, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: syscall.Getsockname, result:  &{[] [[] []] [[0]]}
finish analysis for: runtime.f32toint64, result:  &{[] [[0]] [[0]]}
end analysis for: runtime.madvise_trampoline , result:  &{[] [] []}
finish analysis for: math.sin, result:  &{[] [[0]] [[0]]}
finish analysis for: math.archSin, result:  &{[] [[]] [[0]]}
finish analysis for: math.Sin, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.preprintpanics, result:  &{[] [] [[0]]}
finish analysis for: internal/syscall/unix.Getgrnam, result:  &{[] [[]] [[0] [1] [2] [3] [4]]}
finish analysis for: math/bits.TrailingZeros8, result:  &{[] [[0]] [[0]]}
end analysis for: runtime.call16384 , result:  &{[] [] [[0] [1] [2] [3] [4] [5] [6]]}
finish analysis for: internal/chacha8rand.bePutUint64, result:  &{[] [] [[0 1] [1]]}
finish analysis for: internal/chacha8rand.lePutUint64, result:  &{[] [] [[0 1] [1]]}
finish analysis for: internal/chacha8rand.Marshal, result:  &{[] [[0]] [[0]]}
end analysis for: sync.runtime_notifyListAdd , result:  &{[] [[]] [[0]]}
finish analysis for: (*unicode.SpecialCase).ToUpper, result:  &{[0] [[1]] [[1]]}
finish analysis for: (os.fileWithoutReadFrom).Chmod, result:  &{[0] [[0]] [[1]]}
finish analysis for: (*os.fileWithoutReadFrom).chmod, result:  &{[0] [[0]] [[1]]}
finish analysis for: syscall.Utimes, result:  &{[] [[]] [[0] [1]]}
finish analysis for: syscall.Unsetenv, result:  &{[] [[]] [[0]]}
finish analysis for: os.Unsetenv, result:  &{[] [[]] [[0]]}
finish analysis for: (time.Time).YearDay, result:  &{[0] [[0]] []}
finish analysis for: (*time.Time).YearDay, result:  &{[0] [[]] []}
finish analysis for: runtime.fmax32, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*runtime.pollDesc).makeArg, result:  &{[0] [[0]] []}
finish analysis for: runtime.poll_runtime_pollSetDeadline, result:  &{[] [] [[0 1] [1] [2]]}
finish analysis for: (internal/poll.errNetClosing).Timeout, result:  &{[0] [[]] []}
finish analysis for: (*internal/abi.PtrType).NumMethod, result:  &{[0] [[]] []}
finish analysis for: (internal/reflectlite.rtype).FuncType, result:  &{[0] [[0]] []}
finish analysis for: (*reflect.Value).runes, result:  &{[0] [[]] []}
finish analysis for: (*runtime.rwmutex).lock$1, result:  &{[] [] []}
finish analysis for: (*internal/reflectlite.flag).mustBeExported, result:  &{[0] [] []}
finish analysis for: (*internal/reflectlite.Value).Kind, result:  &{[0] [[]] []}
finish analysis for: (os.fileWithoutReadFrom).setReadDeadline, result:  &{[0] [[]] [[1]]}
finish analysis for: (*os/exec.Cmd).awaitGoroutines$1, result:  &{[] [] []}
finish analysis for: runtime/internal/atomic.panicUnaligned, result:  &{[] [] []}
finish analysis for: runtime.keys, result:  &{[] [] [[0] [1]]}
finish analysis for: os.UserCacheDir, result:  &{[] [[] []] []}
finish analysis for: (*runtime.scavengerState).init$4, result:  &{[] [[]] []}
finish analysis for: runtime.scanConservative$1, result:  &{[] [[]] [[0]]}
end analysis for: reflect.maplen , result:  &{[] [[]] [[0]]}
finish analysis for: bytes.Replace, result:  &{[] [[0]] [[0] [1] [2] [3]]}
finish analysis for: bytes.ReplaceAll, result:  &{[] [[0]] [[0] [1] [2]]}
finish analysis for: runtime.unsafeslice, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: runtime.unsafeslice64, result:  &{[] [] [[0] [1] [2]]}
end analysis for: slices.overlaps , result:  &{[] [[]] [[0] [1]]}
finish analysis for: os/exec.CommandContext$1, result:  &{[] [[]] []}
finish analysis for: strings.SplitAfter, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: runtime.init#6, result:  &{[] [] []}
finish analysis for: fmt.Sprintln, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.cgoUse, result:  &{[] [] [[0]]}
finish analysis for: (*reflect.Value).typ, result:  &{[0] [[]] []}
finish analysis for: (*io.PipeReader).CloseWithError, result:  &{[0 1] [[]] [[1]]}
finish analysis for: time.byteString, result:  &{[] [[0]] [[0]]}
finish analysis for: time.LoadLocationFromTZData, result:  &{[] [[0 1] []] [[0] [1]]}
finish analysis for: time.gorootZoneSource, result:  &{[] [[0] []] [[0]]}
finish analysis for: time.loadLocation, result:  &{[] [[0] [0 1]] [[0] [1]]}
finish analysis for: (*os.fileWithoutReadFrom).WriteTo, result:  &{[0] [[] [0 1]] [[1]]}
finish analysis for: syscall.SetsockoptIPv6Mreq, result:  &{[] [[]] [[0] [1] [2] [3]]}
finish analysis for: (*internal/abi.ChanType).ExportedMethods, result:  &{[0] [[0]] []}
finish analysis for: runtime.asyncPreempt2, result:  &{[] [] []}
finish analysis for: (*reflect.Value).CanComplex, result:  &{[0] [[]] []}
end analysis for: syscall.libc_msync_trampoline , result:  &{[] [] []}
finish analysis for: (*reflect.rtype).In, result:  &{[0] [[0]] [[1]]}
finish analysis for: (*os.fileWithoutReadFrom).setDeadline, result:  &{[0] [[]] [[1]]}
finish analysis for: (*strings.Replacer).buildOnce$bound, result:  &{[] [] []}
finish analysis for: os.endsWithDot, result:  &{[] [[]] [[0]]}
finish analysis for: os.removeAllFrom, result:  &{[] [[1]] [[0] [1]]}
finish analysis for: os.removeAll, result:  &{[] [[0]] [[0]]}
finish analysis for: os.RemoveAll, result:  &{[] [[0]] [[0]]}
finish analysis for: math/bits.ReverseBytes, result:  &{[] [[0]] [[0]]}
finish analysis for: (*runtime.liveUserArenaChunk).specialFindSplicePoint, result:  &{[0] [[0] []] [[1] [2]]}
finish analysis for: internal/bisect.New, result:  &{[] [[0] [0]] [[0]]}
finish analysis for: internal/godebug.lookup, result:  &{[] [[]] [[0]]}
finish analysis for: internal/godebug.parse, result:  &{[] [] [[0 1] [1]]}
end analysis for: internal/reflectlite.resolveNameOff , result:  &{[] [[]] [[0] [1]]}
finish analysis for: bytes.NewBufferString, result:  &{[] [[0]] [[0]]}
end analysis for: syscall.libc_getfsstat_trampoline , result:  &{[] [] []}
finish analysis for: (*time.Time).Sub, result:  &{[0] [[1]] [[1]]}
finish analysis for: runtime.concatstring2, result:  &{[] [[1 2]] [[0] [1] [2]]}
finish analysis for: runtime.mapclear$1, result:  &{[] [] [[0] [1]]}
end analysis for: runtime.fcntl_trampoline , result:  &{[] [] []}
end analysis for: syscall.libc_umask_trampoline , result:  &{[] [] []}
end analysis for: runtime.addmoduledata , result:  &{[] [] []}
finish analysis for: (*context.timerCtx).Value, result:  &{[0] [[0]] [[1]]}
finish analysis for: math.remainder, result:  &{[] [[0 1]] [[0] [1]]}
end analysis for: internal/syscall/unix.gostring , result:  &{[] [[]] [[0]]}
finish analysis for: (*sync.RWMutex).TryRLock, result:  &{[0] [[]] []}
finish analysis for: runtime.wirep$2, result:  &{[] [] []}
finish analysis for: syscall.connect, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: syscall.Connect, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*reflect.rtype).FieldAlign, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.pTraceState).statusWasTraced, result:  &{[0] [[]] [[1]]}
finish analysis for: (os.fileWithoutWriteTo).seek, result:  &{[0] [[] []] [[1] [2]]}
end analysis for: syscall.libc_mkdir_trampoline , result:  &{[] [] []}
finish analysis for: runtime.mapdelete, result:  &{[] [] [[0 1 2] [0 1 2] [2]]}
finish analysis for: (*io.pipe).closeWrite, result:  &{[0 1] [[]] [[1]]}
finish analysis for: (*io.PipeWriter).CloseWithError, result:  &{[0 1] [[]] [[1]]}
finish analysis for: (*io.PipeWriter).Close, result:  &{[0] [[]] []}
finish analysis for: runtime.dumpotherroot, result:  &{[] [] [[0] [1]]}
finish analysis for: reflect.Swapper$9, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.gcMarkDone$3, result:  &{[] [] []}
end analysis for: runtime/internal/atomic.Xchguintptr , result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*runtime.liveUserArenaChunk).writeUserArenaHeapBits, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: runtime.efaceHash, result:  &{[] [[1]] [[0] [1]]}
finish analysis for: (*os.LinkError).Unwrap, result:  &{[0] [[0]] []}
finish analysis for: (*internal/reflectlite.Value).numMethod, result:  &{[0] [[]] []}
finish analysis for: math.RoundToEven, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.sync_atomic_SwapPointer, result:  &{[] [[]] [[0] [1]]}
finish analysis for: syscall.Symlink, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.goroutineProfileWithLabelsSync$3, result:  &{[] [] []}
finish analysis for: context.WithDeadlineCause$3, result:  &{[] [] []}
end analysis for: sync/atomic.LoadPointer , result:  &{[] [[]] [[0]]}
finish analysis for: (*os.dirFS).join, result:  &{[0] [[1] []] [[1]]}
finish analysis for: strings.Trim, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: runtime.memequal64, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.setProcessCPUProfiler, result:  &{[] [] [[0]]}
finish analysis for: runtime.setcpuprofilerate, result:  &{[] [] [[0]]}
finish analysis for: syscall.accept, result:  &{[] [[] []] [[0] [1] [2]]}
finish analysis for: runtime.newUserArena, result:  &{[] [[]] []}
finish analysis for: runtime.arena_newArena, result:  &{[] [[]] []}
finish analysis for: internal/syscall/unix.IsNonblock, result:  &{[] [[] []] [[0]]}
finish analysis for: math.archAcos, result:  &{[] [[]] [[0]]}
finish analysis for: math.Acos, result:  &{[] [[0]] [[0]]}
end analysis for: syscall.libc_openat_trampoline , result:  &{[] [] []}
finish analysis for: (*internal/poll.FD).WaitWrite, result:  &{[0] [[]] []}
finish analysis for: (*internal/abi.MapType).Pointers, result:  &{[0] [[0]] []}
end analysis for: runtime.call4194304 , result:  &{[] [] [[0] [1] [2] [3] [4] [5] [6]]}
finish analysis for: syscall.Getfsstat, result:  &{[] [[] []] [[0] [1]]}
finish analysis for: runtime.compute0, result:  &{[] [] [[0] [1]]}
finish analysis for: (*runtime.liveUserArenaChunk).refillAllocCache, result:  &{[0 1] [] [[1]]}
finish analysis for: runtime.mutexContended, result:  &{[] [[]] [[0]]}
finish analysis for: (*reflect.Value).Uint, result:  &{[0] [[]] []}
finish analysis for: (*os.fileWithoutReadFrom).checkValid, result:  &{[0] [[]] [[1]]}
finish analysis for: runtime.buildTypeAssertCache, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: sync.OnceFunc$1, result:  &{[] [] []}
finish analysis for: internal/race.Read, result:  &{[] [] [[0]]}
finish analysis for: runtime.msanmove, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: (*fmt.readRune).UnreadRune, result:  &{[0] [[]] []}
finish analysis for: syscall.Chroot, result:  &{[] [[]] [[0]]}
finish analysis for: (internal/reflectlite.rtype).Uncommon, result:  &{[0] [[0]] []}
end analysis for: slices.Sort[[]int int] , result:  &{[] [] [[0]]}
finish analysis for: (time.Duration).Round, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (*time.Duration).Round, result:  &{[0] [[1]] [[1]]}
finish analysis for: (*time.Duration).Hours, result:  &{[0] [[]] []}
finish analysis for: (runtime.rtype).pkgpath, result:  &{[0] [[]] []}
finish analysis for: (reflect.Value).CanFloat, result:  &{[0] [[]] []}
finish analysis for: reflect.ArrayOf$1, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.initMetrics$53, result:  &{[] [] [[0] [1]]}
finish analysis for: (*os.fileWithoutWriteTo).close, result:  &{[0] [[0]] []}
finish analysis for: reflect.makeBytes, result:  &{[] [[0 1 2]] [[0] [1] [2]]}
finish analysis for: reflect.cvtStringBytes, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: math.sinh, result:  &{[] [[0]] [[0]]}
finish analysis for: math.archSinh, result:  &{[] [[]] [[0]]}
finish analysis for: math.Sinh, result:  &{[] [[0]] [[0]]}
finish analysis for: (*reflect.Value).Method, result:  &{[0] [[1]] [[1]]}
finish analysis for: (*bytes.Reader).Reset, result:  &{[0 1] [] [[1]]}
finish analysis for: runtime.memequal128, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: strings.NewReplacer, result:  &{[] [[0]] [[0]]}
finish analysis for: syscall.Getgid, result:  &{[] [[]] []}
finish analysis for: os.Getgid, result:  &{[] [[]] []}
end analysis for: runtime.pthread_attr_init_trampoline , result:  &{[] [] []}
end analysis for: slices.Clip , result:  &{[] [[]] [[0]]}
finish analysis for: (*io/fs.subFS).Open, result:  &{[0] [[0 1] [0 1]] [[1]]}
end analysis for: reflect.call , result:  &{[] [] [[0] [1] [2] [3] [4] [5] [6]]}
end analysis for: syscall.libc_kevent_trampoline , result:  &{[] [] []}
finish analysis for: reflect.Swapper, result:  &{[] [[]] [[0]]}
end analysis for: runtime.mmap_trampoline , result:  &{[] [] []}
end analysis for: sync.runtime_notifyListCheck , result:  &{[] [] [[0]]}
finish analysis for: (*runtime.markBits).setMarkedNonAtomic, result:  &{[0] [] []}
finish analysis for: (os.fileWithoutWriteTo).read, result:  &{[0] [[] []] [[1]]}
finish analysis for: runtime.reflect_mapdelete, result:  &{[] [] [[0 1 2] [0 1 2] [2]]}
finish analysis for: (*internal/abi.FuncType).MapType, result:  &{[0] [[0]] []}
finish analysis for: (os.fileWithoutReadFrom).Fd, result:  &{[0] [[0]] []}
end analysis for: syscall.libc_writev_trampoline , result:  &{[] [] []}
finish analysis for: (*bytes.Buffer).Available, result:  &{[0] [[]] []}
finish analysis for: (os.fileWithoutWriteTo).ReadDir, result:  &{[0] [[0] [0]] [[1]]}
finish analysis for: (*strings.Reader).Reset, result:  &{[0 1] [] [[1]]}
finish analysis for: (os.fileWithoutWriteTo).SetReadDeadline, result:  &{[0] [[]] [[1]]}
end analysis for: runtime.raise_trampoline , result:  &{[] [] []}
finish analysis for: syscall.TimevalToNsec, result:  &{[] [[0]] [[0]]}
finish analysis for: (*os.Process).Release, result:  &{[0] [[]] []}
finish analysis for: runtime.reflect_addReflectOff, result:  &{[] [[0]] [[0]]}
end analysis for: internal/poll.runtime_pollServerInit , result:  &{[] [] []}
finish analysis for: (*internal/reflectlite.rtype).ExportedMethods, result:  &{[0] [[0]] []}
finish analysis for: (*internal/reflectlite.rtype).StructType, result:  &{[0] [[0]] []}
finish analysis for: (*sync.Map).Range, result:  &{[0] [] [[1]]}
finish analysis for: syscall.Sendfile, result:  &{[] [[3] []] [[0] [1] [2] [3]]}
finish analysis for: internal/poll.SendFile, result:  &{[] [[3] [] []] [[0] [1] [2] [3]]}
finish analysis for: (*reflect.ptrType).IfaceIndir, result:  &{[0] [[0]] []}
finish analysis for: (*reflect.Value).String, result:  &{[0] [[]] []}
end analysis for: internal/reflectlite.chanlen , result:  &{[] [[]] [[0]]}
finish analysis for: runtime.setprofilebucket, result:  &{[] [] [[0] [1]]}
end analysis for: runtime/internal/atomic.Or , result:  &{[] [] [[0] [1]]}
finish analysis for: math/bits.OnesCount64, result:  &{[] [[0]] [[0]]}
finish analysis for: math/bits.OnesCount32, result:  &{[] [[0]] [[0]]}
finish analysis for: math/bits.OnesCount, result:  &{[] [[0]] [[0]]}
finish analysis for: (*runtime.pTraceState).readyNextGen, result:  &{[0] [] [[1]]}
finish analysis for: internal/reflectlite.Swapper$4, result:  &{[] [] [[0] [1]]}
end analysis for: runtime.proc_regionfilename_trampoline , result:  &{[] [] []}
finish analysis for: (*os/exec.wrappedError).Error, result:  &{[0] [[]] []}
finish analysis for: syscall.Rmdir, result:  &{[] [[]] [[0]]}
finish analysis for: fmt.init$1, result:  &{[] [[]] []}
finish analysis for: (*runtime.liveUserArenaChunk).reportZombies, result:  &{[0] [] []}
finish analysis for: io/fs.FormatFileInfo, result:  &{[] [[0]] [[0]]}
finish analysis for: (*io.teeReader).Read, result:  &{[0 1] [[] []] [[1]]}
end analysis for: sync/atomic.AddUintptr , result:  &{[] [[]] [[0] [1]]}
end analysis for: slices.Delete , result:  &{[] [[]] [[0] [1] [2]]}
end analysis for: runtime.nanotime_trampoline , result:  &{[] [] []}
finish analysis for: (*reflect.rtype).ChanDir, result:  &{[0] [[0]] []}
finish analysis for: reflect.MakeChan, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: (*runtime.typePointers).next, result:  &{[0] [[1] [1]] [[1]]}
end analysis for: reflect.resolveNameOff , result:  &{[] [[]] [[0] [1]]}
finish analysis for: os.isShellSpecialVar, result:  &{[] [[]] [[0]]}
finish analysis for: os.isAlphaNum, result:  &{[] [[0]] [[0]]}
finish analysis for: os.getShellName, result:  &{[] [[0] []] [[0]]}
finish analysis for: os.Expand, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: context.TODO, result:  &{[] [[]] []}
finish analysis for: (*reflect.rtype).FieldByIndex, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: runtime.initMetrics$18, result:  &{[] [] [[0] [0 1]]}
finish analysis for: (*internal/abi.ArrayType).MapType, result:  &{[0] [[0]] []}
finish analysis for: bytes.ToValidUTF8, result:  &{[] [[0 1]] [[0] [0 1]]}
finish analysis for: runtime.chanparkcommit, result:  &{[] [[]] [[0] [1]]}
finish analysis for: syscall.recvfromInet4, result:  &{[] [[] []] [[0] [1] [2] [3]]}
finish analysis for: time.FixedZone$1, result:  &{[] [] []}
finish analysis for: (*bytes.Buffer).WriteByte, result:  &{[0 1] [[]] [[1]]}
finish analysis for: syscall.SetBpf, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.initMetrics$47, result:  &{[] [] [[0] [0 1]]}
finish analysis for: (*os.fileWithoutWriteTo).pread, result:  &{[0] [[] []] [[1] [2]]}
finish analysis for: (os.fileWithoutWriteTo).Readdir, result:  &{[0] [[0] [0]] [[1]]}
end analysis for: runtime.setitimer_trampoline , result:  &{[] [] []}
finish analysis for: strconv.ParseBool, result:  &{[] [[] [0]] [[0]]}
finish analysis for: (*internal/abi.MapType).Align, result:  &{[0] [[0]] []}
finish analysis for: (*reflect.flag).mustBeAssignable, result:  &{[0] [] []}
finish analysis for: (*io.PipeReader).closeWrite, result:  &{[0 1] [[]] [[1]]}
finish analysis for: (sort.Float64Slice).Swap, result:  &{[0] [] [[1] [2]]}
finish analysis for: (*sort.Float64Slice).Swap, result:  &{[0] [] [[1] [2]]}
finish analysis for: (*runtime.mspan).inList, result:  &{[0] [[0]] []}
finish analysis for: (runtime.liveUserArenaChunk).inList, result:  &{[0] [[0]] []}
finish analysis for: (*sync/atomic.Int32).Store, result:  &{[0] [] [[1]]}
finish analysis for: (os.fileWithoutWriteTo).chmod, result:  &{[0] [[0]] [[1]]}
finish analysis for: syscall.Socketpair, result:  &{[] [[] []] [[0] [1] [2]]}
finish analysis for: runtime.fpunwindExpand$1, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.reflect_chansend, result:  &{[] [[]] [[0 1] [1] [2]]}
finish analysis for: sort.Float64s, result:  &{[] [] [[0]]}
finish analysis for: (*reflect.structType).IfaceIndir, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.FuncType).Size, result:  &{[0] [[0]] []}
finish analysis for: (os.noReadFrom).ReadFrom, result:  &{[0] [[] []] [[1]]}
finish analysis for: (*os.fileWithoutReadFrom).Seek, result:  &{[0] [[] [0]] [[1] [2]]}
finish analysis for: (*internal/abi.InterfaceType).ChanDir, result:  &{[0] [[0]] []}
finish analysis for: runtime.sync_fatal, result:  &{[] [] [[0]]}
end analysis for: syscall.runtime_BeforeExec , result:  &{[] [] []}
finish analysis for: runtime.syscall_syscall, result:  &{[] [[0 1 2 3] [0 1 2 3] [0 1 2 3]] [[0] [1] [2] [3]]}
finish analysis for: (os.fileWithoutReadFrom).Readdir, result:  &{[0] [[0] [0]] [[1]]}
end analysis for: internal/bytealg.HashStr , result:  &{[] [[] []] [[0]]}
finish analysis for: (*time.Month).String, result:  &{[0] [[]] []}
finish analysis for: runtime.abs, result:  &{[] [[0]] [[0]]}
finish analysis for: (*fmt.pp).Precision, result:  &{[0] [[0] [0]] []}
finish analysis for: (*fmt.pp).Flag, result:  &{[0] [[0]] [[1]]}
finish analysis for: fmt.FormatString, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.intstring, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*reflect.Value).lenNonSlice, result:  &{[0] [[]] []}
finish analysis for: (*context.todoCtx).Value, result:  &{[0] [[]] [[1]]}
end analysis for: reflect.resolveTextOff , result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.runtime_getProfLabel, result:  &{[] [[]] []}
end analysis for: (*sync/atomic.Pointer[sync.readOnly]).Store[sync.readOnly] , result:  &{[0] [] [[1]]}
end analysis for: runtime.pthread_mutex_init_trampoline , result:  &{[] [] []}
end analysis for: syscall.libc_undelete_trampoline , result:  &{[] [] []}
finish analysis for: runtime.reflect_chanclose, result:  &{[] [] [[0]]}
finish analysis for: strings.LastIndex, result:  &{[] [[]] [[0] [1]]}
end analysis for: runtime.asmcgocall , result:  &{[] [[]] [[0] [1]]}
finish analysis for: internal/testlog.SetPanicOnExit0, result:  &{[] [] [[0]]}
finish analysis for: runtime.addCovMeta, result:  &{[] [[]] [[0] [1] [2] [3] [4] [5] [6]]}
finish analysis for: syscall.Access, result:  &{[] [[]] [[0] [1]]}
finish analysis for: context.WithValue, result:  &{[] [[0 1 2]] [[0] [1] [2]]}
finish analysis for: runtime.gcMarkRootCheck$1, result:  &{[] [] [[0]]}
finish analysis for: math/bits.Div, result:  &{[] [[0 1 2] [0 1 2]] [[0] [1] [2]]}
finish analysis for: (*internal/abi.ArrayType).FuncType, result:  &{[0] [[0]] []}
finish analysis for: runtime/internal/sys.PrefetchStreamed, result:  &{[] [] [[0]]}
finish analysis for: runtime.initMetrics$6, result:  &{[] [] [[0] [0 1]]}
finish analysis for: (*fmt.wrapError).Error, result:  &{[0] [[0]] []}
end analysis for: runtime.debugCallV2 , result:  &{[] [] []}
finish analysis for: (*internal/abi.SliceType).Uncommon, result:  &{[0] [[0]] []}
finish analysis for: (*time.Time).UnmarshalJSON, result:  &{[0 1] [[1]] [[1]]}
finish analysis for: runtime.panicoverflow, result:  &{[] [] []}
finish analysis for: runtime.panicmemAddr, result:  &{[] [] [[0]]}
finish analysis for: runtime.sigpanic, result:  &{[] [] []}
finish analysis for: io.LimitReader, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: io.CopyN, result:  &{[] [[2] [0]] [[0] [1] [2]]}
finish analysis for: (*io.onceError).unlockSlow, result:  &{[0] [] [[1]]}
finish analysis for: (*runtime.scavengerState).wake, result:  &{[0] [] []}
end analysis for: time.startTimer , result:  &{[] [] [[0]]}
end analysis for: runtime/internal/atomic.Storeuintptr , result:  &{[] [] [[0] [1]]}
finish analysis for: (*reflect.Value).MethodByName, result:  &{[0] [[]] [[1]]}
finish analysis for: syscall.TimespecToNsec, result:  &{[] [[0]] [[0]]}
end analysis for: runtime.panicSlice3B , result:  &{[] [] [[0] [1]]}
finish analysis for: (os/exec.ExitError).String, result:  &{[0] [[0]] []}
finish analysis for: (reflect.Value).SetPointer, result:  &{[0 1] [] [[1]]}
finish analysis for: syscall.Getrusage, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.ifaceeq, result:  &{[] [[1 2]] [[0] [1] [2]]}
finish analysis for: runtime.interequal, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*sync.Cond).Signal, result:  &{[0] [] []}
finish analysis for: (*internal/reflectlite.rtype).HasName, result:  &{[0] [[0]] []}
finish analysis for: runtime.arena_arena_New, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*runtime/internal/atomic.Uint64).LoadAcquire, result:  &{[0] [[]] []}
finish analysis for: runtime.debugCallWrap$1, result:  &{[] [] []}
finish analysis for: math.acosh, result:  &{[] [[0]] [[0]]}
finish analysis for: math.Acosh, result:  &{[] [[0]] [[0]]}
finish analysis for: syscall.Futimes, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.f64equal, result:  &{[] [[0 1]] [[0] [1]]}
end analysis for: runtime.memclrNoHeapPointers , result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.coroswitch_m, result:  &{[] [] [[0]]}
finish analysis for: runtime.newUserArenaChunk$1, result:  &{[] [] []}
end analysis for: internal/poll.runtime_pollOpen , result:  &{[] [[] []] [[0]]}
finish analysis for: runtime.putCachedDlogger, result:  &{[] [[]] [[0]]}
finish analysis for: (*io.nopCloserWriterTo).WriteTo, result:  &{[0] [[] []] [[1]]}
finish analysis for: runtime.selectnbrecv, result:  &{[] [[] [0 1]] [[0 1] [0 1]]}
finish analysis for: runtime.netpollIsPollDescriptor, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.poll_runtime_isPollServerDescriptor, result:  &{[] [[0]] [[0]]}
finish analysis for: (*internal/abi.StructType).Align, result:  &{[0] [[0]] []}
finish analysis for: runtime.readUnaligned32, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.r4, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.memhashFallback, result:  &{[] [[0 1 2]] [[0] [1] [2]]}
finish analysis for: (*runtime.pageAlloc).tryChunkOf, result:  &{[0] [[0]] [[1]]}
end analysis for: runtime.mapinitnoop , result:  &{[] [] []}
end analysis for: (*runtime/internal/atomic.Pointer[runtime.profBuf]).Load[runtime.profBuf] , result:  &{[0] [[]] []}
finish analysis for: (runtime.pollInfo).closing, result:  &{[0] [[0]] []}
finish analysis for: runtime.netpollcheckerr, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.netpollblock, result:  &{[] [[]] [[0] [1] [2]]}
end analysis for: reflect.growslice , result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: runtime.runtime_debug_freeOSMemory, result:  &{[] [] []}
finish analysis for: runtime.copysign, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.inf2one, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.complex128div, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*reflect.Value).mustBeAssignableSlow, result:  &{[0] [] []}
finish analysis for: (time.Time).Truncate, result:  &{[0 1] [[0 1]] [[1]]}
finish analysis for: (*time.Time).Truncate, result:  &{[0] [[1]] [[1]]}
finish analysis for: (reflect.Value).kind, result:  &{[0] [[0]] []}
end analysis for: runtime.mach_vm_region_trampoline , result:  &{[] [] []}
end analysis for: runtime.panicSliceAlenU , result:  &{[] [] [[0] [1]]}
finish analysis for: (*reflect.structType).FieldByName, result:  &{[0] [[0] []] [[1]]}
finish analysis for: (*runtime.writeUserArenaHeapBits).pad, result:  &{[0] [[2]] [[1 2] [2]]}
finish analysis for: (*runtime.gTraceState).statusWasTraced, result:  &{[0] [[]] [[1]]}
end analysis for: internal/godebug.setNewIncNonDefault , result:  &{[] [] [[0]]}
finish analysis for: runtime.gcStart$1, result:  &{[] [] []}
finish analysis for: (*runtime.offAddr).equal, result:  &{[0] [[1]] [[1]]}
finish analysis for: syscall.Getdtablesize, result:  &{[] [[]] []}
finish analysis for: (*os.fileWithoutWriteTo).pwrite, result:  &{[0] [[] []] [[1] [2]]}
finish analysis for: runtime.goPanicSliceBU, result:  &{[] [] [[0] [1]]}
end analysis for: runtime.pthread_self_trampoline , result:  &{[] [] []}
finish analysis for: (*internal/poll.FD).ReadMsgInet4, result:  &{[0] [[] [] [] []] [[1] [2] [3] [4]]}
finish analysis for: (context.backgroundCtx).Err, result:  &{[0] [[]] []}
finish analysis for: (time.Time).Clock, result:  &{[0] [[0] [0] [0]] []}
finish analysis for: (*time.Time).Clock, result:  &{[0] [[] [] []] []}
finish analysis for: runtime.unreachableMethod, result:  &{[] [] []}
finish analysis for: (*sort.StringSlice).Search, result:  &{[0] [[]] [[1]]}
finish analysis for: (*sort.StringSlice).Sort, result:  &{[0] [] []}
finish analysis for: (*runtime.pallocSum).max, result:  &{[0] [[]] []}
finish analysis for: internal/bytealg.countGenericString, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (runtime.liveUserArenaChunk).decPinCounter, result:  &{[0] [[]] [[1]]}
end analysis for: runtime.panicSliceConvert , result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.retake, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.ReadTrace$2, result:  &{[] [[]] [[0] [1]]}
end analysis for: internal/syscall/unix.libc_unlockpt_trampoline , result:  &{[] [] []}
finish analysis for: syscall.Shutdown, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*internal/poll.FD).Shutdown, result:  &{[0] [[]] [[1]]}
finish analysis for: (*internal/godebug.runtimeStderr).Write, result:  &{[0] [[] []] [[1]]}
finish analysis for: (time.Duration).Abs, result:  &{[0] [[0]] []}
finish analysis for: (syscall.Signal).Signal, result:  &{[0] [] []}
finish analysis for: (*syscall.Signal).Signal, result:  &{[0] [] []}
finish analysis for: runtime.sync_nanotime, result:  &{[] [[]] []}
end analysis for: slices.choosePivotCmpFunc , result:  &{[] [[] []] [[0] [1] [2] [3]]}
finish analysis for: (*runtime.funcInfo).isInlined, result:  &{[0] [[0]] []}
end analysis for: syscall.libc_fstat_trampoline , result:  &{[] [] []}
finish analysis for: runtime.convTstring, result:  &{[] [[0]] [[0]]}
finish analysis for: (*strings.Reader).Size, result:  &{[0] [[]] []}
finish analysis for: (runtime.liveUserArenaChunk).writeHeapBitsSmall, result:  &{[0] [[3]] [[1] [2] [3]]}
end analysis for: runtime.sync_atomic_StoreUintptr , result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.readGCStats_m, result:  &{[] [] [[0]]}
finish analysis for: runtime.readGCStats$1, result:  &{[] [] []}
finish analysis for: (*internal/abi.SliceType).ChanDir, result:  &{[0] [[0]] []}
finish analysis for: runtime.setMemoryLimit$1, result:  &{[] [] []}
finish analysis for: (*runtime.pallocData).free1, result:  &{[0 1] [] [[1]]}
finish analysis for: runtime.netpollDeadline, result:  &{[] [] [[0] [1]]}
finish analysis for: (*internal/abi.ChanType).MapType, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.MapType).IfaceIndir, result:  &{[0] [[0]] []}
finish analysis for: (internal/reflectlite.rtype).Pointers, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.SliceType).NumMethod, result:  &{[0] [[]] []}
finish analysis for: runtime.gcMarkDone$1, result:  &{[] [] [[0]]}
end analysis for: (*runtime/internal/atomic.Pointer[func(string) func()]).Store[func(string) func()] , result:  &{[0] [] [[1]]}
end analysis for: runtime.call1024 , result:  &{[] [] [[0] [1] [2] [3] [4] [5] [6]]}
finish analysis for: (*runtime.addrRanges).removeGreaterEqual, result:  &{[0 1] [] [[0 1]]}
finish analysis for: (*internal/abi.FuncType).GcSlice, result:  &{[0] [[]] [[1] [2]]}
end analysis for: reflect.TypeFor , result:  &{[] [[]] []}
end analysis for: syscall.libc_accept_trampoline , result:  &{[] [] []}
finish analysis for: (*sort.IntSlice).Len, result:  &{[0] [[]] []}
finish analysis for: (*reflect.Value).Convert, result:  &{[0] [[1]] [[1]]}
finish analysis for: (*internal/abi.InterfaceType).ExportedMethods, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.liveUserArenaChunk).inList, result:  &{[0] [[0]] []}
finish analysis for: syscall.SetsockoptTimeval, result:  &{[] [[]] [[0] [1] [2] [3]]}
finish analysis for: (*syscall.WaitStatus).Continued, result:  &{[0] [[]] []}
end analysis for: reflect.mapaccess_faststr , result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: runtime.goroutineProfileWithLabelsSync$2, result:  &{[] [] [[0]]}
finish analysis for: (*internal/abi.ArrayType).IfaceIndir, result:  &{[0] [[0]] []}
end analysis for: syscall.libc_shutdown_trampoline , result:  &{[] [] []}
finish analysis for: (*internal/abi.InterfaceType).IfaceIndir, result:  &{[0] [[0]] []}
finish analysis for: (*time.Time).MarshalJSON, result:  &{[0] [[] []] []}
finish analysis for: (*internal/abi.PtrType).FuncType, result:  &{[0] [[0]] []}
finish analysis for: runtime.netpollWriteDeadline, result:  &{[] [] [[0] [1]]}
finish analysis for: os.Symlink$1, result:  &{[] [[]] []}
finish analysis for: (internal/reflectlite.rtype).Len, result:  &{[0] [[0]] []}
finish analysis for: (*internal/reflectlite.rtype).Len, result:  &{[0] [[]] []}
finish analysis for: internal/godebug.update$1, result:  &{[] [[]] [[0] [1]]}
finish analysis for: internal/syscall/unix.GetEntropy, result:  &{[] [[]] [[0]]}
end analysis for: time.modTimer , result:  &{[] [] [[0] [1] [2] [3] [4] [5]]}
finish analysis for: runtime.atomic_casPointer, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: syscall.BpfBuflen, result:  &{[] [[] []] [[0]]}
finish analysis for: os.Lchown$1, result:  &{[] [[]] []}
finish analysis for: (*runtime.errorAddressString).Addr, result:  &{[0] [[]] []}
finish analysis for: (*internal/poll.fdMutex).rwunlock, result:  &{[0] [[]] [[1]]}
finish analysis for: (*runtime.sigctxt).fixsigcode, result:  &{[0] [] [[1]]}
finish analysis for: runtime.sigtrampgo, result:  &{[] [] [[0] [1] [2]]}
end analysis for: runtime.fmin , result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*os.fileWithoutReadFrom).ReadDir, result:  &{[0] [[0] [0]] [[1]]}
finish analysis for: runtime.makeslice, result:  &{[] [[0 2]] [[0] [1] [2]]}
finish analysis for: runtime.makeslice64, result:  &{[] [[0 2]] [[0] [1] [2]]}
finish analysis for: (*os.fileWithoutWriteTo).seek, result:  &{[0] [[] []] [[1] [2]]}
finish analysis for: (*runtime.traceMap).put$1, result:  &{[] [] []}
finish analysis for: runtime.mProf_Malloc$1, result:  &{[] [] []}
finish analysis for: reflect.hashMightPanic, result:  &{[] [[]] [[0]]}
finish analysis for: (os.fileWithoutWriteTo).setDeadline, result:  &{[0] [[]] [[1]]}
finish analysis for: (*internal/abi.ArrayType).ChanDir, result:  &{[0] [[0]] []}
finish analysis for: runtime.trace_userTaskCreate, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: runtime.badunlockosthread, result:  &{[] [] []}
end analysis for: runtime.call1073741824 , result:  &{[] [] [[0] [1] [2] [3] [4] [5] [6]]}
end analysis for: math.archExp2 , result:  &{[] [[]] [[0]]}
finish analysis for: syscall.recvmsgInet6, result:  &{[] [[] [1 2] [1 2] []] [[0] [1] [2] [3] [4]]}
finish analysis for: runtime.setMaxStack, result:  &{[] [[]] [[0]]}
finish analysis for: (*internal/abi.PtrType).Uncommon, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.pollInfo).closing, result:  &{[0] [[]] []}
finish analysis for: (*internal/reflectlite.Value).kind, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.offAddr).add, result:  &{[0] [[1]] [[1]]}
finish analysis for: runtime.sync_runtime_SemacquireMutex, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: (*runtime.gclinkptr).ptr, result:  &{[0] [[]] []}
finish analysis for: (*io.onceError).Lock, result:  &{[0] [] []}
finish analysis for: (*sync/atomic.Uint64).Store, result:  &{[0] [] [[1]]}
finish analysis for: (*sync.WaitGroup).Add, result:  &{[0] [] [[1]]}
end analysis for: syscall.libc_setuid_trampoline , result:  &{[] [] []}
end analysis for: syscall.runtime_AfterExec , result:  &{[] [] []}
finish analysis for: (*internal/abi.PtrType).Align, result:  &{[0] [[0]] []}
end analysis for: os.sigpipe , result:  &{[] [] []}
finish analysis for: unicode.IsLower, result:  &{[] [[0]] [[0]]}
finish analysis for: (*runtime.userArena).free, result:  &{[0] [] []}
finish analysis for: runtime.arena_arena_Free, result:  &{[] [] [[0]]}
finish analysis for: (*os.fileWithoutReadFrom).setWriteDeadline, result:  &{[0] [[]] [[1]]}
finish analysis for: errors.As, result:  &{[] [[]] [[0] [1]]}
end analysis for: time.stopTimer , result:  &{[] [[]] [[0]]}
end analysis for: slices.isNaN , result:  &{[] [[]] [[0]]}
finish analysis for: strconv.AppendQuoteRuneToGraphic, result:  &{[] [[0 1]] [[0] [1]]}
end analysis for: slices.symMergeCmpFunc , result:  &{[] [] [[0] [1] [2] [3] [4]]}
finish analysis for: (reflect.Value).Clear, result:  &{[0] [] []}
end analysis for: runtime.call128 , result:  &{[] [] [[0] [1] [2] [3] [4] [5] [6]]}
finish analysis for: runtime.mapassign_fast32, result:  &{[] [[0 1 2]] [[0 1 2] [0 1 2] [2]]}
end analysis for: runtime/internal/atomic.Casint32 , result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: (*os.fileWithoutWriteTo).Close, result:  &{[0] [[0]] []}
finish analysis for: syscall.Seteuid, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.badcgocallback, result:  &{[] [] []}
finish analysis for: runtime.f32equal, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.printcomplex, result:  &{[] [] [[0]]}
finish analysis for: runtime.godebug_registerMetric, result:  &{[] [] [[0] [1]]}
finish analysis for: (runtime.liveUserArenaChunk).markBitsForBase, result:  &{[0] [[0]] []}
finish analysis for: runtime.reflect_typedmemmove, result:  &{[] [] [[0 1] [0 1] [2]]}
finish analysis for: runtime.reflectlite_typedmemmove, result:  &{[] [] [[0 1] [0 1] [2]]}
finish analysis for: runtime.args, result:  &{[] [] [[0] [1]]}
end analysis for: (*sync/atomic.Pointer[any]).Load[any] , result:  &{[0] [[]] []}
finish analysis for: (*internal/poll.FD).ReadFromInet6, result:  &{[0] [[] []] [[1] [2]]}
finish analysis for: runtime.park_m, result:  &{[] [] [[0]]}
finish analysis for: runtime.runtime_FrameSymbolName, result:  &{[] [[0]] [[0]]}
finish analysis for: (os.fileWithoutWriteTo).wrapErr, result:  &{[0] [[0 1 2]] [[1] [2]]}
finish analysis for: sync.OnceFunc$2, result:  &{[] [] []}
end analysis for: slices.breakPatternsCmpFunc , result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: runtime.freemcache$1, result:  &{[] [] []}
finish analysis for: bytes.growSlice$1, result:  &{[] [] []}
finish analysis for: os.Truncate, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: os.Link$1, result:  &{[] [[]] []}
finish analysis for: internal/bytealg.LastIndexByte, result:  &{[] [[]] [[0] [1]]}
finish analysis for: bytes.LastIndex, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.traceAdvance$1, result:  &{[] [] [[0]]}
finish analysis for: syscall.sendtoInet6, result:  &{[] [[]] [[0] [1] [2] [3]]}
finish analysis for: (reflect.Value).InterfaceData, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.StructType).ChanDir, result:  &{[0] [[0]] []}
end analysis for: slices.stableCmpFunc , result:  &{[] [] [[0] [1] [2]]}
end analysis for: syscall.libc_chown_trampoline , result:  &{[] [] []}
finish analysis for: (*reflect.rtype).Size, result:  &{[0] [[0]] []}
finish analysis for: (*syscall.Errno).Error, result:  &{[0] [[]] []}
finish analysis for: (*runtime/internal/atomic.Uint32).LoadAcquire, result:  &{[0] [[]] []}
finish analysis for: (*os.File).close, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.plainError).RuntimeError, result:  &{[0] [] []}
end analysis for: internal/abi.FuncPCABIInternal , result:  &{[] [[]] [[0]]}
finish analysis for: runtime.strmin, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.poll_runtime_pollWaitCanceled, result:  &{[] [] [[0] [1]]}
end analysis for: math.archFloor , result:  &{[] [[]] [[0]]}
end analysis for: runtime.call131072 , result:  &{[] [] [[0] [1] [2] [3] [4] [5] [6]]}
finish analysis for: (*bytes.Buffer).Read, result:  &{[0] [[] []] [[0 1]]}
end analysis for: runtime/internal/atomic.And32 , result:  &{[] [[]] [[0] [1]]}
end analysis for: runtime.memhash64 , result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*runtime.chunkIdx).l1, result:  &{[0] [[]] []}
end analysis for: syscall.syscall6 , result:  &{[] [[] [] []] [[0] [1] [2] [3] [4] [5] [6]]}
end analysis for: syscall.libc_settimeofday_trampoline , result:  &{[] [] []}
end analysis for: internal/bytealg.IndexRabinKarp[string] , result:  &{[] [[]] [[0] [1]]}
finish analysis for: math.archHypot, result:  &{[] [[]] [[0] [1]]}
finish analysis for: math.Hypot, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (internal/reflectlite.rtype).FieldAlign, result:  &{[0] [[0]] []}
finish analysis for: runtime.ThreadCreateProfile, result:  &{[] [[] []] [[0]]}
end analysis for: reflect.typedmemclr , result:  &{[] [] [[0] [1]]}
finish analysis for: (internal/reflectlite.rtype).Out, result:  &{[0] [[0]] [[1]]}
finish analysis for: (*internal/reflectlite.rtype).Out, result:  &{[0] [[]] [[1]]}
finish analysis for: runtime.syscall_syscall9, result:  &{[] [[] [] []] [[0] [1] [2] [3] [4] [5] [6] [7] [8] [9]]}
end analysis for: runtime.setg , result:  &{[] [] [[0]]}
end analysis for: internal/syscall/unix.fstatat , result:  &{[] [[]] [[0] [1] [2] [3]]}
finish analysis for: runtime.freeStackSpans, result:  &{[] [] []}
end analysis for: syscall.libc_getpgid_trampoline , result:  &{[] [] []}
finish analysis for: (sort.StringSlice).Len, result:  &{[0] [[]] []}
finish analysis for: runtime.initMetrics$29, result:  &{[] [] [[0] [1]]}
finish analysis for: reflect.cvtIntString, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.initMetrics$3, result:  &{[] [] [[0] [0 1]]}
finish analysis for: (time.Time).After, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: runtime.panicshift, result:  &{[] [] []}
finish analysis for: (runtime.errorString).Error, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.errorString).Error, result:  &{[0] [[]] []}
end analysis for: syscall.libc_setreuid_trampoline , result:  &{[] [] []}
finish analysis for: (*runtime.liveUserArenaChunk).markBitsForIndex, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: bytes.IndexAny, result:  &{[] [[]] [[0] [1]]}
finish analysis for: bytes.ContainsAny, result:  &{[] [[]] [[0] [1]]}
end analysis for: internal/syscall/unix.libc_ptsname_r_trampoline , result:  &{[] [] []}
end analysis for: internal/poll.runtime_Semrelease , result:  &{[] [] [[0]]}
finish analysis for: runtime.initMetrics$42, result:  &{[] [] [[0] [0 1]]}
end analysis for: syscall.libc_mkfifo_trampoline , result:  &{[] [] []}
finish analysis for: (*os.fileWithoutWriteTo).Read, result:  &{[0] [[] [0]] [[1]]}
finish analysis for: (runtime.liveUserArenaChunk).writeUserArenaHeapBits, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: runtime.unimplemented, result:  &{[] [] [[0]]}
finish analysis for: runtime.goroutineProfileWithLabelsConcurrent$1, result:  &{[] [] []}
finish analysis for: (io.nopCloserWriterTo).Read, result:  &{[0] [[] []] [[1]]}
finish analysis for: time.After, result:  &{[] [[0]] [[0]]}
finish analysis for: (*sync.Map).CompareAndSwap, result:  &{[0] [[]] [[1] [2] [3]]}
finish analysis for: math.Round, result:  &{[] [[0]] [[0]]}
finish analysis for: math.archAtan2, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.bgscavenge, result:  &{[] [] [[0]]}
end analysis for: internal/syscall/unix.RecvmsgInet6 , result:  &{[] [[] [] [] []] [[0] [1] [2] [3] [4]]}
finish analysis for: os.Setenv, result:  &{[] [[]] [[0] [1]]}
finish analysis for: syscall.msync, result:  &{[] [[]] [[0] [1]]}
end analysis for: slices.partitionOrdered , result:  &{[] [[] []] [[0] [1] [2] [3]]}
finish analysis for: strconv.AppendQuoteToGraphic, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.concatstring4, result:  &{[] [[1 2 3 4]] [[0] [1] [2] [3] [4]]}
finish analysis for: internal/syscall/unix.Unlockpt, result:  &{[] [[]] [[0]]}
finish analysis for: (time.Time).Day, result:  &{[0] [[0]] []}
finish analysis for: (*time.Time).Day, result:  &{[0] [[]] []}
finish analysis for: path/filepath.Dir, result:  &{[] [[0]] [[0]]}
finish analysis for: (*os.SyscallError).Timeout, result:  &{[0] [[]] []}
finish analysis for: (*reflect.Value).NumMethod, result:  &{[0] [[]] []}
finish analysis for: (*time.Time).Zone, result:  &{[0] [[] []] []}
finish analysis for: (os.fileWithoutReadFrom).readFrom, result:  &{[0] [[] [] []] [[1]]}
finish analysis for: (os.fileWithoutWriteTo).SyscallConn, result:  &{[0] [[0] []] []}
finish analysis for: (internal/reflectlite.rtype).Common, result:  &{[0] [[0]] []}
finish analysis for: strings.ToUpperSpecial, result:  &{[] [[1]] [[0] [1]]}
finish analysis for: syscall.Accept, result:  &{[] [[] [] []] [[0]]}
finish analysis for: internal/poll.accept, result:  &{[] [[] [] [] []] [[0]]}
finish analysis for: (*internal/poll.FD).Accept, result:  &{[0] [[] [] [] []] []}
end analysis for: syscall.libc_wait4_trampoline , result:  &{[] [] []}
finish analysis for: (*internal/abi.ChanType).Kind, result:  &{[0] [[0]] []}
finish analysis for: runtime.netpollblockcommit, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*internal/poll.FD).Fsync$1, result:  &{[] [[]] []}
finish analysis for: (runtime.liveUserArenaChunk).refreshPinnerBits, result:  &{[0] [] []}
finish analysis for: (*context.withoutCancelCtx).Value, result:  &{[0] [[]] [[1]]}
finish analysis for: (*reflect.Value).MapKeys, result:  &{[0] [[]] []}
finish analysis for: runtime.sync_runtime_procUnpin, result:  &{[] [] []}
finish analysis for: (*runtime.liveUserArenaChunk).typePointersOf, result:  &{[0 1 2] [[0 1 2]] [[1] [2]]}
finish analysis for: runtime.syscall_Exit, result:  &{[] [] [[0]]}
finish analysis for: (*reflect.Value).pointer, result:  &{[0] [[]] []}
finish analysis for: (*internal/abi.FuncType).ExportedMethods, result:  &{[0] [[0]] []}
finish analysis for: (os.fileWithoutWriteTo).setReadDeadline, result:  &{[0] [[]] [[1]]}
finish analysis for: (*runtime.activeSweep).sweepers, result:  &{[0] [[]] []}
end analysis for: runtime/internal/atomic.casPointer , result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: (runtime.liveUserArenaChunk).pinnerBitSize, result:  &{[0] [[0]] []}
end analysis for: syscall.libc_sendto_trampoline , result:  &{[] [] []}
finish analysis for: syscall.sendmsgNInet4, result:  &{[] [[] []] [[0] [1] [2] [3] [4]]}
finish analysis for: (*internal/poll.FD).ReadMsgInet6, result:  &{[0] [[] [] [] []] [[1] [2] [3] [4]]}
finish analysis for: (*internal/reflectlite.rtype).PkgPath, result:  &{[0] [[]] []}
finish analysis for: strconv.QuoteRuneToGraphic, result:  &{[] [[0]] [[0]]}
finish analysis for: reflect.cvtUintString, result:  &{[] [[0 1]] [[0] [1]]}
end analysis for: runtime.panicSliceAcap , result:  &{[] [] [[0] [1]]}
finish analysis for: (*context.backgroundCtx).Deadline, result:  &{[0] [[] []] []}
finish analysis for: runtime.newWakeableSleep$1, result:  &{[] [] [[0] [1]]}
finish analysis for: (*os.fileWithoutReadFrom).pread, result:  &{[0] [[] []] [[1] [2]]}
finish analysis for: (*runtime.offAddr).lessEqual, result:  &{[0] [[1]] [[1]]}
finish analysis for: internal/reflectlite.Swapper$2, result:  &{[] [] [[0] [1]]}
finish analysis for: syscall.Chown, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: os.Chown$1, result:  &{[] [[]] []}
end analysis for: runtime.return0 , result:  &{[] [] []}
end analysis for: reflect.makeFuncStub , result:  &{[] [] []}
finish analysis for: (*io/fs.dirInfo).IsDir, result:  &{[0] [[]] []}
finish analysis for: runtime.typeAssert, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: strings.ToTitle, result:  &{[] [[0]] [[0]]}
finish analysis for: (*internal/poll.FD).readUnlock, result:  &{[0] [] []}
finish analysis for: (*os/exec.Cmd).String, result:  &{[0] [[0]] []}
end analysis for: runtime/internal/atomic.Cas64 , result:  &{[] [[]] [[0] [1] [2]]}
end analysis for: slices.SortStableFunc , result:  &{[] [] [[0] [1]]}
end analysis for: internal/syscall/unix.libc_getgrouplist_trampoline , result:  &{[] [] []}
finish analysis for: syscall.GetsockoptIPMreq, result:  &{[] [[] []] [[0] [1] [2]]}
finish analysis for: syscall.GetsockoptInet4Addr, result:  &{[] [[] []] [[0] [1] [2]]}
finish analysis for: (os.fileWithoutReadFrom).readdir, result:  &{[0] [[] [0] [0] [0]] [[1] [2]]}
end analysis for: internal/poll.runtime_pollWaitCanceled , result:  &{[] [] [[0] [1]]}
end analysis for: runtime.gcWriteBarrier5 , result:  &{[] [] []}
finish analysis for: (*io.PipeWriter).Write, result:  &{[0] [[0] [0]] [[1]]}
finish analysis for: (*internal/abi.InterfaceType).FieldAlign, result:  &{[0] [[0]] []}
finish analysis for: (*runtime/internal/atomic.Uint8).Or, result:  &{[0] [] [[1]]}
finish analysis for: slices.nextPowerOfTwo, result:  &{[] [[0]] [[0]]}
finish analysis for: (*context.cancelCtx).Deadline, result:  &{[0] [[] []] []}
end analysis for: runtime/internal/atomic.Store , result:  &{[] [] [[0] [1]]}
end analysis for: reflect.methodValueCall , result:  &{[] [] []}
end analysis for: syscall.libc_futimes_trampoline , result:  &{[] [] []}
finish analysis for: (*bytes.Reader).Read, result:  &{[0] [[] []] [[0 1]]}
finish analysis for: (*reflect.Value).SetPointer, result:  &{[0] [] [[1]]}
finish analysis for: (*runtime.liveUserArenaChunk).nextFreeIndex, result:  &{[0] [[0]] []}
end analysis for: runtime.sysctlbyname_trampoline , result:  &{[] [] []}
finish analysis for: internal/syscall/unix.Getpwnam, result:  &{[] [[]] [[0] [1] [2] [3] [4]]}
finish analysis for: (*internal/poll.pollDesc).waitCanceled, result:  &{[0] [] [[1]]}
end analysis for: reflect.typelinks , result:  &{[] [[] []] []}
end analysis for: runtime.breakpoint , result:  &{[] [] []}
finish analysis for: (*time.Time).Format, result:  &{[0] [[1]] [[1]]}
finish analysis for: (*internal/reflectlite.rtype).Align, result:  &{[0] [[0]] []}
finish analysis for: reflect.Swapper$3, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.selparkcommit, result:  &{[] [[]] [[0] [1]]}
end analysis for: reflect.mapiterelem , result:  &{[] [[]] [[0]]}
finish analysis for: (*io.OffsetWriter).Seek, result:  &{[0 1] [[0 1] []] [[1] [2]]}
finish analysis for: (*reflect.rtype).Implements, result:  &{[0] [[]] [[1]]}
finish analysis for: (*bytes.Buffer).ReadRune, result:  &{[0] [[0] [] []] []}
finish analysis for: (*runtime.liveUserArenaChunk).incPinCounter, result:  &{[0] [] [[1]]}
finish analysis for: internal/syscall/unix.Getaddrinfo, result:  &{[] [[] []] [[0] [1] [2] [3]]}
finish analysis for: runtime.cgoCheckSliceCopy, result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: runtime.typedslicecopy, result:  &{[] [[2 4]] [[0 1 2 4] [0 1 2 4] [2] [3] [4]]}
finish analysis for: runtime.slicecopy, result:  &{[] [[1 3]] [[0 2] [1] [2] [3] [4]]}
finish analysis for: runtime.reflect_typedslicecopy, result:  &{[] [[0 1 2]] [[0 1 2] [0 1 2] [2]]}
finish analysis for: (*runtime.pollInfo).eventErr, result:  &{[0] [[]] []}
finish analysis for: (*runtime.muintptr).ptr, result:  &{[0] [[]] []}
finish analysis for: (*reflect.Value).SetInt, result:  &{[0] [] [[1]]}
finish analysis for: runtime.traceStartReadCPU$1, result:  &{[] [] []}
finish analysis for: (runtime.funcInfo).isInlined, result:  &{[0] [[0]] []}
end analysis for: syscall.libc_stat_trampoline , result:  &{[] [] []}
finish analysis for: (*os.fileWithoutWriteTo).ReadDir, result:  &{[0] [[0] [0]] [[1]]}
end analysis for: runtime/internal/atomic.CasRel , result:  &{[] [[]] [[0] [1] [2]]}
end analysis for: sync/atomic.StoreUintptr , result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.goPanicSlice3AlenU, result:  &{[] [] [[0] [1]]}
finish analysis for: (*reflect.Value).SetFloat, result:  &{[0] [] [[1]]}
finish analysis for: (*io.onceError).Unlock, result:  &{[0] [] []}
finish analysis for: runtime.sysmon, result:  &{[] [] []}
finish analysis for: (internal/reflectlite.Value).CanSet, result:  &{[0] [[0]] []}
finish analysis for: path/filepath.sameWord, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: reflect.overflowFloat32, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.strhashFallback, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.goPanicSliceAlen, result:  &{[] [] [[0] [1]]}
finish analysis for: syscall.Setpriority, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: runtime.internal_cpu_getsysctlbyname, result:  &{[] [[] []] [[0]]}
finish analysis for: (*os.fileWithoutWriteTo).setDeadline, result:  &{[0] [[]] [[1]]}
finish analysis for: (*internal/abi.ChanType).FieldAlign, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.ChanType).FuncType, result:  &{[0] [[0]] []}
finish analysis for: runtime.newUserArena$1, result:  &{[] [] [[0]]}
finish analysis for: runtime.runtime_pprof_readProfile, result:  &{[] [[] [] []] []}
end analysis for: internal/syscall/unix.libc_grantpt_trampoline , result:  &{[] [] []}
finish analysis for: syscall.BpfInterface, result:  &{[] [[1] []] [[0] [1]]}
end analysis for: internal/chacha8rand.block , result:  &{[] [] [[0] [1] [2]]}
finish analysis for: syscall.Kqueue, result:  &{[] [[] []] []}
finish analysis for: (*syscall.mmapper).Munmap, result:  &{[0] [[]] [[1]]}
finish analysis for: strings.SplitAfterN, result:  &{[] [[0]] [[0] [1] [2]]}
finish analysis for: runtime.reflect_resolveNameOff, result:  &{[] [[1]] [[0] [1]]}
finish analysis for: os.Remove$2, result:  &{[] [[]] []}
finish analysis for: runtime.printArgs$3, result:  &{[] [] []}
finish analysis for: runtime.syscall_runtime_BeforeExec, result:  &{[] [] []}
finish analysis for: runtime.mayMoreStackPreempt, result:  &{[] [] []}
finish analysis for: runtime.libpreinit, result:  &{[] [] []}
finish analysis for: (*internal/abi.StructType).GcSlice, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: runtime.setPanicOnFault, result:  &{[] [[0]] [[0]]}
finish analysis for: (*internal/abi.SliceType).Key, result:  &{[0] [[0]] []}
finish analysis for: (*os/exec.ExitError).systemTime, result:  &{[0] [[0]] []}
finish analysis for: syscall.Issetugid, result:  &{[] [[]] []}
end analysis for: internal/syscall/unix.SendtoInet6 , result:  &{[] [[]] [[0] [1] [2] [3]]}
finish analysis for: runtime.finishsweep_m, result:  &{[] [] []}
finish analysis for: runtime.gcStart$2, result:  &{[] [] []}
finish analysis for: (*internal/abi.MapType).HasName, result:  &{[0] [[0]] []}
end analysis for: runtime.asmcgocall_no_g , result:  &{[] [] [[0] [1]]}
end analysis for: internal/bytealg.abigen_runtime_memequal_varlen , result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*io/fs.FileMode).Perm, result:  &{[0] [[]] []}
finish analysis for: (*fmt.pp).catchPanic, result:  &{[0 2 3] [] [[1] [2] [0 2 3]]}
finish analysis for: strings.Repeat, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: (time.Time).Local, result:  &{[0] [[0]] []}
finish analysis for: (*reflect.Value).SetCap, result:  &{[0] [] [[1]]}
finish analysis for: runtime.reflectlite_resolveTypeOff, result:  &{[] [[1]] [[0] [1]]}
finish analysis for: runtime.init#2, result:  &{[] [] []}
finish analysis for: runtime.runtime_coverage_getCovCounterList, result:  &{[] [[]] []}
finish analysis for: io.NewOffsetWriter, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.panicunsafeslicenilptr, result:  &{[] [] []}
finish analysis for: math.log2, result:  &{[] [[0]] [[0]]}
end analysis for: runtime/internal/atomic.Oruintptr , result:  &{[] [[]] [[0] [1]]}
end analysis for: sync.runtime_Semrelease , result:  &{[] [] [[0] [1] [2]]}
finish analysis for: (*internal/abi.MapType).ArrayType, result:  &{[0] [[0]] []}
finish analysis for: runtime.mapassign_fast32ptr, result:  &{[] [[0 1 2]] [[0 1 2] [0 1 2] [2]]}
end analysis for: runtime.duffzero , result:  &{[] [] []}
finish analysis for: (*internal/poll.FD).WriteOnce, result:  &{[0] [[] []] [[1]]}
end analysis for: slices.IsSorted[[]string string] , result:  &{[] [[]] [[0]]}
finish analysis for: (*internal/poll.FD).ReadDirent, result:  &{[0] [[] []] [[1]]}
finish analysis for: (*internal/abi.SliceType).Size, result:  &{[0] [[0]] []}
finish analysis for: runtime.readMetricsLocked, result:  &{[] [] [[0] [1] [2]]}
end analysis for: internal/syscall/unix.libc_getgrnam_r_trampoline , result:  &{[] [] []}
end analysis for: syscall.libc_gettimeofday_trampoline , result:  &{[] [] []}
finish analysis for: (*runtime.stackScanState).findObject, result:  &{[0] [[0]] [[1]]}
finish analysis for: (os/exec.ExitError).UserTime, result:  &{[0] [[0]] []}
end analysis for: runtime.morestack , result:  &{[] [] []}
finish analysis for: (*fmt.ss).Width, result:  &{[0] [[0] []] []}
finish analysis for: (*runtime.offAddr).sub, result:  &{[0] [[1]] [[1]]}
finish analysis for: (os.fileWithoutWriteTo).SetDeadline, result:  &{[0] [[]] [[1]]}
finish analysis for: runtime.NumGoroutine, result:  &{[] [[]] []}
finish analysis for: (*sync.rlocker).Lock, result:  &{[0] [] []}
finish analysis for: syscall.Rename, result:  &{[] [[]] [[0] [1]]}
finish analysis for: os.rename$1, result:  &{[] [[]] []}
finish analysis for: runtime.feq64, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*reflect.Value).Pointer, result:  &{[0] [[]] []}
finish analysis for: (*os/exec.Cmd).Start$1, result:  &{[] [] []}
finish analysis for: syscall.Getppid, result:  &{[] [[]] []}
finish analysis for: os.Getppid, result:  &{[] [[]] []}
finish analysis for: (*reflect.Value).CanAddr, result:  &{[0] [[]] []}
end analysis for: syscall.runtime_BeforeFork , result:  &{[] [] []}
end analysis for: syscall.libc_symlink_trampoline , result:  &{[] [] []}
finish analysis for: runtime.buildInterfaceSwitchCache$1, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: runtime.buildInterfaceSwitchCache, result:  &{[] [[]] [[0] [1] [2] [3]]}
finish analysis for: (syscall.Errno).Temporary, result:  &{[0] [[0]] []}
finish analysis for: runtime.scanConservative, result:  &{[] [] [[0] [1] [2] [0 3] [4]]}
finish analysis for: runtime.scanframeworker, result:  &{[] [] [[0] [1] [0 2]]}
finish analysis for: runtime.scanstack, result:  &{[] [[0]] [[0] [0 1]]}
finish analysis for: runtime.markroot$1, result:  &{[] [] []}
finish analysis for: runtime.forcegchelper, result:  &{[] [] []}
finish analysis for: syscall.Munlock, result:  &{[] [[]] [[0]]}
finish analysis for: (*internal/abi.FuncType).ChanDir, result:  &{[0] [[0]] []}
end analysis for: reflect.mapdelete , result:  &{[] [] [[0] [1] [2]]}
finish analysis for: (*runtime.pallocData).summarize, result:  &{[0] [[0]] []}
end analysis for: slices.SortFunc , result:  &{[] [] [[0] [1]]}
finish analysis for: time.ParseInLocation, result:  &{[] [[1 2] [0 1]] [[0] [1] [2]]}
end analysis for: syscall.syscall , result:  &{[] [[] [] []] [[0] [1] [2] [3]]}
finish analysis for: (*internal/poll.DeadlineExceededError).Timeout, result:  &{[0] [[]] []}
end analysis for: runtime/internal/atomic.Casint64 , result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: runtime.memhash32Fallback, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.gcTestMoveStackOnNextCall, result:  &{[] [] []}
finish analysis for: math.archLog2, result:  &{[] [[]] [[0]]}
finish analysis for: math.Log2, result:  &{[] [[0]] [[0]]}
finish analysis for: syscall.BpfStmt, result:  &{[] [[0 1]] [[0] [1]]}
end analysis for: syscall.libc_exit_trampoline , result:  &{[] [] []}
finish analysis for: reflect.Swapper$6, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.flushmcache, result:  &{[] [] [[0]]}
end analysis for: runtime.memmove , result:  &{[] [] [[0] [1] [2]]}
finish analysis for: (internal/reflectlite.Value).mustBeExported, result:  &{[0] [] []}
end analysis for: runtime.sigprocmask_trampoline , result:  &{[] [] []}
finish analysis for: runtime.initMetrics$20, result:  &{[] [] [[0] [1]]}
end analysis for: syscall.libc_statfs_trampoline , result:  &{[] [] []}
finish analysis for: (time.fileSizeError).Error, result:  &{[0] [[0]] []}
finish analysis for: time.ParseDuration, result:  &{[] [[] [0]] [[0]]}
finish analysis for: (*runtime.Pinner).Unpin, result:  &{[0] [] []}
finish analysis for: runtime.chanrecv1, result:  &{[] [] [[0 1] [0 1]]}
finish analysis for: (*strings.Reader).Seek, result:  &{[0 1] [[0 1] []] [[1] [2]]}
finish analysis for: (*reflect.ptrType).MapType, result:  &{[0] [[0]] []}
end analysis for: syscall.libc_ptrace_trampoline , result:  &{[] [] []}
finish analysis for: (*internal/abi.MapType).Len, result:  &{[0] [[0]] []}
finish analysis for: internal/testlog.SetLogger, result:  &{[] [] [[0]]}
finish analysis for: runtime.sync_atomic_CompareAndSwapPointer, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: (*strings.Reader).UnreadRune, result:  &{[0] [[]] []}
end analysis for: sync.OnceValue , result:  &{[] [[]] [[0]]}
finish analysis for: runtime.bytealg_MakeNoZero, result:  &{[] [[]] [[0]]}
finish analysis for: (reflect.Value).FieldByIndexErr, result:  &{[0] [[0] []] [[1]]}
finish analysis for: (*reflect.Value).Complex, result:  &{[0] [[]] []}
finish analysis for: runtime.mach_vm_region, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: (reflect.Value).SetZero, result:  &{[0] [] []}
end analysis for: syscall.libc_setsid_trampoline , result:  &{[] [] []}
end analysis for: runtime.call8192 , result:  &{[] [] [[0] [1] [2] [3] [4] [5] [6]]}
end analysis for: syscall.libc_dup_trampoline , result:  &{[] [] []}
finish analysis for: math/bits.Reverse8, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.asanregisterglobals, result:  &{[] [] [[0] [1]]}
end analysis for: syscall.libc_munlockall_trampoline , result:  &{[] [] []}
finish analysis for: runtime.dumpGCProg, result:  &{[] [] [[0]]}
end analysis for: runtime.asminit , result:  &{[] [] []}
end analysis for: internal/syscall/unix.openat , result:  &{[] [[] []] [[0] [1] [2] [3]]}
finish analysis for: (*os.fileWithoutWriteTo).checkValid, result:  &{[0] [[]] [[1]]}
finish analysis for: (os.fileWithoutReadFrom).WriteAt, result:  &{[0] [[] [0]] [[1] [2]]}
finish analysis for: math.Remainder, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.itab_callback, result:  &{[] [] [[0]]}
finish analysis for: bytes.Contains, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.reflect_memmove, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: (*runtime.puintptr).ptr, result:  &{[0] [[]] []}
finish analysis for: bytes.TrimSuffix, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: (*bytes.Reader).ReadAt, result:  &{[0] [[] []] [[0 1] [2]]}
end analysis for: syscall.libc_setgid_trampoline , result:  &{[] [] []}
finish analysis for: runtime.panicunsafeslicelen, result:  &{[] [] []}
finish analysis for: (*sync.poolChainElt).unpack, result:  &{[0] [[1] [1]] [[1]]}
finish analysis for: strconv.FormatUint, result:  &{[] [[0 1]] [[0] [1]]}
end analysis for: reflect.makemap , result:  &{[] [[]] [[0] [1]]}
finish analysis for: os.ExpandEnv, result:  &{[] [[0]] [[0]]}
finish analysis for: (runtime.liveUserArenaChunk).allocBitsForIndex, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (*internal/reflectlite.Value).mustBeExported, result:  &{[0] [] []}
finish analysis for: (*internal/abi.SliceType).FuncType, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.liveUserArenaChunk).setPinnerBits, result:  &{[0] [] [[1]]}
end analysis for: syscall.syscallX , result:  &{[] [[] [] []] [[0] [1] [2] [3]]}
finish analysis for: runtime.main$1, result:  &{[] [] []}
finish analysis for: (*syscall.WaitStatus).StopSignal, result:  &{[0] [[]] []}
end analysis for: time.leadingInt , result:  &{[] [[] [] []] [[0]]}
finish analysis for: runtime.reflect_chanlen, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.plugin_lastmoduleinit, result:  &{[] [[] [] [] []] []}
finish analysis for: (*reflect.structType).NumMethod, result:  &{[0] [[]] []}
finish analysis for: math/bits.Add32, result:  &{[] [[0 1 2] [0 1 2]] [[0] [1] [2]]}
finish analysis for: (*internal/abi.ChanType).InterfaceType, result:  &{[0] [[0]] []}
end analysis for: slices.siftDownOrdered , result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: (*os.fileWithoutReadFrom).SetReadDeadline, result:  &{[0] [[]] [[1]]}
finish analysis for: (*reflect.Kind).String, result:  &{[0] [[]] []}
finish analysis for: (*internal/abi.FuncType).StructType, result:  &{[0] [[0]] []}
end analysis for: syscall.libc_lseek_trampoline , result:  &{[] [] []}
finish analysis for: runtime.notifyListCheck, result:  &{[] [] [[0]]}
end analysis for: syscall.libc_ftruncate_trampoline , result:  &{[] [] []}
end analysis for: syscall.libc_getpgrp_trampoline , result:  &{[] [] []}
finish analysis for: runtime.sync_runtime_Semrelease, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: runtime.newcoro, result:  &{[] [[0]] [[0]]}
end analysis for: sync/atomic.LoadUint64 , result:  &{[] [[]] [[0]]}
finish analysis for: runtime.initMetrics$16, result:  &{[] [] [[0] [0 1]]}
finish analysis for: runtime.exitsyscall$1, result:  &{[] [] []}
end analysis for: time.now , result:  &{[] [[] [] []] []}
finish analysis for: (*sync/atomic.Uintptr).Load, result:  &{[0] [[]] []}
finish analysis for: (*internal/abi.ArrayType).Pointers, result:  &{[0] [[0]] []}
finish analysis for: runtime.callers$1, result:  &{[] [] []}
finish analysis for: strconv.FormatBool, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.checkptrStraddles, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.unsafestringcheckptr, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.netpollarm, result:  &{[] [] [[0] [1]]}
finish analysis for: (*sort.IntSlice).Less, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: (*io.multiWriter).Write, result:  &{[0 1] [[] []] [[1]]}
finish analysis for: context.stringify, result:  &{[] [[0]] [[0]]}
finish analysis for: (*context.valueCtx).String, result:  &{[0] [[0]] []}
finish analysis for: runtime.MutexProfile, result:  &{[] [[] []] [[0]]}
finish analysis for: (*internal/abi.ArrayType).ExportedMethods, result:  &{[0] [[0]] []}
finish analysis for: runtime.chansend1, result:  &{[] [] [[0 1] [1]]}
end analysis for: syscall.libc_getpid_trampoline , result:  &{[] [] []}
finish analysis for: (*runtime.TypeAssertionError).RuntimeError, result:  &{[0] [] []}
finish analysis for: os.IsTimeout, result:  &{[] [[]] [[0]]}
finish analysis for: io/fs.ReadFile, result:  &{[] [[] [1]] [[0] [1]]}
finish analysis for: (*io/fs.subFS).ReadFile, result:  &{[0] [[] [0 1]] [[1]]}
finish analysis for: (*runtime.liveUserArenaChunk).refreshPinnerBits, result:  &{[0] [] []}
finish analysis for: (os.fileWithoutReadFrom).SyscallConn, result:  &{[0] [[0] []] []}
finish analysis for: math.archErfc, result:  &{[] [[]] [[0]]}
finish analysis for: math.Erfc, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.mapaccess2_fat, result:  &{[] [[0 1 2 3] []] [[0] [1] [2] [3]]}
finish analysis for: bytes.EqualFold, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.templateThread, result:  &{[] [] []}
finish analysis for: runtime.getm, result:  &{[] [[]] []}
finish analysis for: (*internal/abi.PtrType).Common, result:  &{[0] [[0]] []}
finish analysis for: sync.NewCond, result:  &{[] [[0]] [[0]]}
finish analysis for: (context.withoutCancelCtx).Err, result:  &{[0] [[]] []}
finish analysis for: (*context.withoutCancelCtx).Err, result:  &{[0] [[]] []}
end analysis for: runtime.raiseproc_trampoline , result:  &{[] [] []}
finish analysis for: runtime.netpollclose, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.poll_runtime_pollClose, result:  &{[] [] [[0]]}
finish analysis for: (reflect.Value).OverflowComplex, result:  &{[0] [[]] [[1]]}
finish analysis for: bytes.LastIndexFunc, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.persistentalloc1, result:  &{[] [[0 1]] [[0] [1] [2]]}
finish analysis for: runtime.persistentalloc$1, result:  &{[] [] []}
finish analysis for: (*runtime/internal/atomic.Uintptr).LoadAcquire, result:  &{[0] [[]] []}
finish analysis for: runtime.initMetrics$52, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.gobytes, result:  &{[] [[1]] [[0] [1]]}
finish analysis for: runtime.recovery, result:  &{[] [] [[0]]}
end analysis for: sync/atomic.StoreInt64 , result:  &{[] [] [[0] [1]]}
finish analysis for: (*os/exec.ExitError).Error, result:  &{[0] [[0]] []}
finish analysis for: (*context.afterFuncCtx).Done, result:  &{[0] [[]] []}
finish analysis for: (reflect.Value).SetIterKey, result:  &{[0] [] [[1]]}
finish analysis for: (*os/exec.ExitError).Sys, result:  &{[0] [[0]] []}
finish analysis for: syscall.SetBpfPromisc, result:  &{[] [[]] [[0] [1]]}
end analysis for: syscall.libc_pread_trampoline , result:  &{[] [] []}
finish analysis for: bytes.Trim, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: context.WithDeadlineCause$1, result:  &{[] [] []}
finish analysis for: (*time.Time).date, result:  &{[0] [[] [] [] []] [[1]]}
finish analysis for: runtime.printnl, result:  &{[] [] []}
finish analysis for: io/fs.ReadDir$1, result:  &{[] [[]] [[0] [1]]}
finish analysis for: fmt.Fprintln, result:  &{[] [[] []] [[0 1] [1]]}
finish analysis for: runtime.initMetrics$31, result:  &{[] [] [[0] [0 1]]}
finish analysis for: runtime.sigNoteSleep, result:  &{[] [] [[0]]}
end analysis for: runtime.unspillArgs , result:  &{[] [] []}
end analysis for: runtime.panicSliceAcapU , result:  &{[] [] [[0] [1]]}
finish analysis for: syscall.FlushBpf, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.feq32, result:  &{[] [[]] [[0] [1]]}
finish analysis for: reflect.cvtSliceArray, result:  &{[] [[0 1]] [[0] [1]]}
end analysis for: syscall.libc_pipe_trampoline , result:  &{[] [] []}
finish analysis for: (context.deadlineExceededError).Error, result:  &{[0] [[]] []}
finish analysis for: (*sync.Cond).Broadcast, result:  &{[0] [] []}
finish analysis for: (*internal/godebug.Setting).Value$1, result:  &{[] [] []}
finish analysis for: (reflect.Value).Send, result:  &{[0] [] [[0 1]]}
finish analysis for: (*reflect.Value).Send, result:  &{[0] [] [[1]]}
end analysis for: runtime.load_g , result:  &{[] [] []}
finish analysis for: syscall.Getpriority, result:  &{[] [[] []] [[0] [1]]}
finish analysis for: (*sync/atomic.Uintptr).Add, result:  &{[0] [[]] [[1]]}
finish analysis for: syscall.Geteuid, result:  &{[] [[]] []}
finish analysis for: runtime.reflect_typedmemclrpartial, result:  &{[] [] [[0] [1 3] [2] [1 3]]}
finish analysis for: (*runtime.PanicNilError).Error, result:  &{[0] [[]] []}
finish analysis for: syscall.recvmsgInet4, result:  &{[] [[] [1 2] [1 2] []] [[0] [1] [2] [3] [4]]}
finish analysis for: runtime.lockedOSThread, result:  &{[] [[]] []}
finish analysis for: (*reflect.flag).kind, result:  &{[0] [[]] []}
finish analysis for: time.containsDotDot, result:  &{[] [[]] [[0]]}
finish analysis for: (*io/fs.PathError).Timeout, result:  &{[0] [[]] []}
finish analysis for: os.DirFS, result:  &{[] [[0]] [[0]]}
finish analysis for: fmt.Println, result:  &{[] [[] []] [[0]]}
finish analysis for: github.com/cokeBeer/goot/cmd/taintanalysis/case.runCommand, result:  &{[] [] [[0]]}
finish analysis for: github.com/cokeBeer/goot/cmd/taintanalysis/case.main, result:  &{[] [] []}
finish analysis for: (*reflect.ptrType).IsDirectIface, result:  &{[0] [[0]] []}
end analysis for: runtime/internal/atomic.Loaduintptr , result:  &{[] [[]] [[0]]}
end analysis for: internal/poll.runtime_pollWait , result:  &{[] [[]] [[0] [1]]}
end analysis for: syscall.Exit , result:  &{[] [] [[0]]}
finish analysis for: strings.ToUpper, result:  &{[] [[0]] [[0]]}
finish analysis for: (*os.fileStat).Sys, result:  &{[0] [[0]] []}
finish analysis for: os.atime, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.convTnoptr, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: runtime.f64toint32, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.goPanicSlice3CU, result:  &{[] [] [[0] [1]]}
finish analysis for: (*os.Process).Release$thunk, result:  &{[] [[]] [[0]]}
finish analysis for: path/filepath.readDirNames, result:  &{[] [[] [0]] [[0]]}
end analysis for: runtime.panicSlice3BU , result:  &{[] [] [[0] [1]]}
finish analysis for: (*internal/abi.InterfaceType).Common, result:  &{[0] [[0]] []}
finish analysis for: (*io.PipeReader).Close, result:  &{[0] [[]] []}
finish analysis for: (os.fileWithoutWriteTo).write, result:  &{[0] [[] []] [[1]]}
finish analysis for: (*reflect.Value).panicNotBool, result:  &{[0] [] []}
end analysis for: internal/syscall/unix.libc_posix_openpt_trampoline , result:  &{[] [] []}
end analysis for: syscall.runtime_envs , result:  &{[] [[]] []}
finish analysis for: strings.TrimPrefix, result:  &{[] [[0]] [[0] [1]]}
end analysis for: syscall.runtimeUnsetenv , result:  &{[] [] [[0]]}
finish analysis for: (*runtime.mheap).reclaim, result:  &{[0] [] [[1]]}
finish analysis for: (*bytes.Buffer).WriteRune, result:  &{[0 1] [[0 1] []] [[1]]}
finish analysis for: syscall.Pathconf, result:  &{[] [[] []] [[0] [1]]}
finish analysis for: path.Dir, result:  &{[] [[0]] [[0]]}
finish analysis for: (*sync/atomic.Uint32).Store, result:  &{[0] [] [[1]]}
finish analysis for: runtime.fuint64to32, result:  &{[] [[0]] [[0]]}
end analysis for: (*runtime/internal/atomic.Pointer[runtime.spanSetBlock]).StoreNoWB[runtime.spanSetBlock] , result:  &{[0] [] [[1]]}
end analysis for: slices.Clone , result:  &{[] [[]] [[0]]}
finish analysis for: runtime.reflect_unsafe_New, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.sync_atomic_StorePointer, result:  &{[] [] [[0] [1]]}
end analysis for: sync/atomic.CompareAndSwapInt64 , result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: (*time.Duration).Minutes, result:  &{[0] [[]] []}
finish analysis for: runtime.cgoCheckResult, result:  &{[] [] [[0]]}
end analysis for: internal/bytealg.abigen_runtime_memequal , result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: runtime.tlsinit, result:  &{[] [] [[0] [1]]}
end analysis for: runtime.mstart , result:  &{[] [] []}
end analysis for: reflect.addReflectOff , result:  &{[] [[]] [[0]]}
finish analysis for: (*os.fileWithoutReadFrom).WriteString, result:  &{[0] [[] [0]] [[1]]}
finish analysis for: (*reflect.Value).SetZero, result:  &{[0] [] []}
finish analysis for: (*bytes.Buffer).ReadByte, result:  &{[0] [[0] []] []}
finish analysis for: runtime.setGCPercent, result:  &{[] [[]] [[0]]}
end analysis for: runtime.panicSlice3CU , result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.addExitHook, result:  &{[] [] [[0] [1]]}
end analysis for: runtime.sigpanic0 , result:  &{[] [] []}
finish analysis for: runtime.printpointer, result:  &{[] [] [[0]]}
finish analysis for: runtime.printslice, result:  &{[] [] [[0]]}
finish analysis for: (*syscall.WaitStatus).Signaled, result:  &{[0] [[]] []}
finish analysis for: (os.fileWithoutWriteTo).Fd, result:  &{[0] [[0]] []}
end analysis for: time.leadingInt[string] , result:  &{[] [[] [] []] [[0]]}
finish analysis for: (*context.stopCtx).Deadline, result:  &{[0] [[] []] []}
finish analysis for: (*internal/bisect.Matcher).FileLine, result:  &{[0] [[0]] [[1 2 3] [2 3] [3]]}
finish analysis for: (*internal/abi.StructType).IsDirectIface, result:  &{[0] [[0]] []}
finish analysis for: runtime.bgsweep, result:  &{[] [] [[0]]}
finish analysis for: os.removeAllFrom$3, result:  &{[] [[]] []}
finish analysis for: (*internal/poll.FD).ReadFrom, result:  &{[0] [[] [] []] [[1]]}
finish analysis for: (runtime.markBits).clearMarked, result:  &{[0] [] []}
finish analysis for: (*runtime.markBits).clearMarked, result:  &{[0] [] []}
finish analysis for: runtime.debugCallWrap$2, result:  &{[] [] [[0]]}
end analysis for: runtime.morestack_noctxt , result:  &{[] [] []}
end analysis for: runtime.pthread_key_create_trampoline , result:  &{[] [] []}
finish analysis for: (*context.todoCtx).Deadline, result:  &{[0] [[] []] []}
finish analysis for: runtime.initMetrics$37, result:  &{[] [] [[0] [0 1]]}
finish analysis for: math/bits.OnesCount8, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.fge64, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (context.backgroundCtx).Value, result:  &{[0] [[]] [[1]]}
end analysis for: internal/syscall/unix.SendtoInet4 , result:  &{[] [[]] [[0] [1] [2] [3]]}
end analysis for: runtime.call4096 , result:  &{[] [] [[0] [1] [2] [3] [4] [5] [6]]}
finish analysis for: syscall.Munmap, result:  &{[] [[]] [[0]]}
finish analysis for: (*runtime/internal/atomic.noCopy).Unlock, result:  &{[0] [] []}
finish analysis for: (*os.fileWithoutReadFrom).writeTo, result:  &{[0] [[] [] []] [[1]]}
finish analysis for: runtime.goPanicSliceAcapU, result:  &{[] [] [[0] [1]]}
finish analysis for: internal/bytealg.countGeneric, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*internal/abi.StructType).Key, result:  &{[0] [[0]] []}
finish analysis for: path/filepath.Rel, result:  &{[] [[1] [0 1]] [[0] [1]]}
finish analysis for: (*bytes.Reader).ReadByte, result:  &{[0] [[0] []] []}
end analysis for: sync.runtime_canSpin , result:  &{[] [[]] [[0]]}
finish analysis for: (*internal/abi.FuncType).ArrayType, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.ArrayType).Key, result:  &{[0] [[0]] []}
finish analysis for: (runtime.liveUserArenaChunk).objBase, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: runtime.badmorestackg0, result:  &{[] [] []}
finish analysis for: (*runtime.pallocData).findLargeN, result:  &{[0] [[0 2] [2]] [[1] [2]]}
finish analysis for: (*sync/atomic.Value).Swap, result:  &{[0] [[1]] [[1]]}
finish analysis for: (*os/exec.ExitError).ExitCode, result:  &{[0] [[0]] []}
finish analysis for: syscall.UtimesNano, result:  &{[] [[]] [[0] [1]]}
finish analysis for: os.Chtimes, result:  &{[] [[0]] [[0] [1] [2]]}
finish analysis for: (*runtime.scavChunkData).setEmpty, result:  &{[0] [] []}
finish analysis for: runtime.runtime_coverage_getCovMetaList, result:  &{[] [[]] []}
finish analysis for: runtime.syscall_syscall6X, result:  &{[] [[0 1 2 3 4 5 6] [0 1 2 3 4 5 6] [0 1 2 3 4 5 6]] [[0] [1] [2] [3] [4] [5] [6]]}
finish analysis for: (*runtime/internal/atomic.noCopy).Lock, result:  &{[0] [] []}
finish analysis for: internal/reflectlite.Swapper$8, result:  &{[] [] [[0] [1]]}
end analysis for: runtime.sigaltstack_trampoline , result:  &{[] [] []}
end analysis for: os.runtime_rand , result:  &{[] [[]] []}
end analysis for: syscall.libc_chdir_trampoline , result:  &{[] [] []}
end analysis for: runtime.memhash , result:  &{[] [[]] [[0] [1] [2]]}
end analysis for: runtime.call524288 , result:  &{[] [] [[0] [1] [2] [3] [4] [5] [6]]}
finish analysis for: runtime.int64Hash, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*os.fileWithoutWriteTo).SetDeadline, result:  &{[0] [[]] [[1]]}
finish analysis for: (*runtime.srcFunc).name, result:  &{[0] [[]] []}
finish analysis for: (*time.Time).Local, result:  &{[0] [[]] []}
finish analysis for: runtime.reflect_mapassign, result:  &{[] [] [[0 1 2] [0 1 2] [2] [3]]}
end analysis for: (*runtime/internal/atomic.Pointer[runtime.spanSetBlock]).Load[runtime.spanSetBlock] , result:  &{[0] [[]] []}
end analysis for: internal/syscall/unix.unlinkat , result:  &{[] [[]] [[0] [1] [2]]}
end analysis for: runtime.mlock_trampoline , result:  &{[] [] []}
finish analysis for: (*syscall.WaitStatus).Stopped, result:  &{[0] [[]] []}
finish analysis for: (*internal/abi.FuncType).Key, result:  &{[0] [[0]] []}
finish analysis for: (internal/reflectlite.Value).kind, result:  &{[0] [[0]] []}
finish analysis for: (*context.emptyCtx).Err, result:  &{[0] [[]] []}
end analysis for: runtime.fmin[float64] , result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*os.fileWithoutWriteTo).Chmod, result:  &{[0] [[0]] [[1]]}
finish analysis for: (*internal/abi.SliceType).ArrayType, result:  &{[0] [[0]] []}
finish analysis for: runtime.mapaccess2, result:  &{[] [[0 1 2] []] [[0] [1] [2]]}
finish analysis for: strconv.digitZero, result:  &{[] [[]] [[0]]}
end analysis for: slices.rotateCmpFunc , result:  &{[] [] [[0] [1] [2] [3] [4]]}
end analysis for: runtime.pthread_cond_signal_trampoline , result:  &{[] [] []}
finish analysis for: (*runtime.chunkIdx).l2, result:  &{[0] [[]] []}
finish analysis for: fmt.Sprint, result:  &{[] [[0]] [[0]]}
finish analysis for: math.Atan2, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.poll_runtime_Semacquire, result:  &{[] [] [[0]]}
finish analysis for: (*reflect.Value).mustBeExportedSlow, result:  &{[0] [] []}
finish analysis for: runtime.fgt64, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.f64touint64, result:  &{[] [[0]] [[0]]}
finish analysis for: syscall.Sendmsg, result:  &{[] [[]] [[0] [1] [2] [3] [4]]}
end analysis for: math.archExp , result:  &{[] [[]] [[0]]}
finish analysis for: (*time.Weekday).String, result:  &{[0] [[]] []}
finish analysis for: (*internal/abi.ChanType).IsDirectIface, result:  &{[0] [[0]] []}
finish analysis for: syscall.ParseRoutingSockaddr, result:  &{[] [[0] []] [[0]]}
finish analysis for: (context.afterFuncCtx).Deadline, result:  &{[0] [[] []] []}
finish analysis for: (*os.fileWithoutReadFrom).seek, result:  &{[0] [[] []] [[1] [2]]}
end analysis for: syscall.libc_pathconf_trampoline , result:  &{[] [] []}
finish analysis for: bytes.ToLower, result:  &{[] [[0]] [[0]]}
finish analysis for: (os.fileWithoutWriteTo).Seek, result:  &{[0] [[] [0]] [[1] [2]]}
finish analysis for: runtime.goPanicSliceConvert, result:  &{[] [] [[0] [1]]}
finish analysis for: (*bytes.Buffer).AvailableBuffer, result:  &{[0] [[0]] []}
finish analysis for: runtime.mapaccess1_fat, result:  &{[] [[0 1 2 3]] [[0] [1] [2] [3]]}
finish analysis for: fmt.Appendf, result:  &{[] [[0 1 2]] [[0 1 2] [1 2] [2]]}
end analysis for: slices.choosePivotOrdered , result:  &{[] [[] []] [[0] [1] [2]]}
finish analysis for: runtime.makechan64, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.dlog, result:  &{[] [[]] []}
finish analysis for: reflect.PtrTo, result:  &{[] [[0]] [[0]]}
finish analysis for: (os.fileWithoutReadFrom).read, result:  &{[0] [[] []] [[1]]}
finish analysis for: (*internal/abi.FuncType).Len, result:  &{[0] [[0]] []}
finish analysis for: (*fmt.ss).Token$1, result:  &{[] [] []}
finish analysis for: runtime.initMetrics$21, result:  &{[] [] [[0] [0 1]]}
finish analysis for: runtime.c64equal, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*reflect.Value).Call, result:  &{[0] [[1]] [[1]]}
finish analysis for: (*time.Time).Add, result:  &{[0] [[1]] [[1]]}
finish analysis for: (*os.fileWithoutWriteTo).Sync, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.liveUserArenaChunk).userArenaNextFree, result:  &{[0 1 2] [[0 1 2]] [[0 1 2] [2]]}
finish analysis for: runtime.setPinned$2, result:  &{[] [] []}
finish analysis for: syscall.Unlink, result:  &{[] [[]] [[0]]}
finish analysis for: os.Remove$1, result:  &{[] [[]] []}
end analysis for: runtime.abort , result:  &{[] [] []}
finish analysis for: (*os.fileWithoutReadFrom).SetDeadline, result:  &{[0] [[]] [[1]]}
finish analysis for: (runtime.funcInfo).funcInfo, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.FuncType).IsDirectIface, result:  &{[0] [[0]] []}
end analysis for: syscall.runtimeSetenv , result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.setGCPercent$1, result:  &{[] [] []}
finish analysis for: (os.fileWithoutWriteTo).readFrom, result:  &{[0] [[] [] []] [[1]]}
end analysis for: runtime.call32 , result:  &{[] [] [[0] [1] [2] [3] [4] [5] [6]]}
finish analysis for: (*time.Time).GoString, result:  &{[0] [[]] []}
finish analysis for: runtime.markBitsForAddr, result:  &{[] [[0]] [[0]]}
end analysis for: runtime.spillArgs , result:  &{[] [] []}
finish analysis for: (reflect.Value).CanInt, result:  &{[0] [[]] []}
finish analysis for: (*reflect.Value).CanInt, result:  &{[0] [[]] []}
finish analysis for: runtime.gostringn, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*runtime.scavengerState).init$3, result:  &{[] [[]] []}
finish analysis for: runtime.reflect_ifaceE2I, result:  &{[] [] [[0] [1] [0 1 2]]}
end analysis for: slices.breakPatternsOrdered , result:  &{[] [] [[0] [1] [2]]}
finish analysis for: (*internal/poll.FD).WriteToInet4, result:  &{[0] [[] []] [[1] [2]]}
finish analysis for: (*runtime.pageBits).get, result:  &{[0] [[0 1]] [[1]]}
end analysis for: syscall.libc_adjtime_trampoline , result:  &{[] [] []}
finish analysis for: runtime.gopanic, result:  &{[] [] [[0]]}
finish analysis for: internal/abi.StructFieldSize, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.makemap64, result:  &{[] [[0 2]] [[0] [1] [2]]}
finish analysis for: (*os/exec.Cmd).Environ, result:  &{[0] [[0]] []}
finish analysis for: (*reflect.Value).OverflowComplex, result:  &{[0] [[]] [[1]]}
end analysis for: syscall.libc_truncate_trampoline , result:  &{[] [] []}
end analysis for: runtime/internal/atomic.Xchgint64 , result:  &{[] [[]] [[0] [1]]}
finish analysis for: syscall.Chflags, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.goroutineProfileWithLabelsSync, result:  &{[] [[] []] [[0] [1]]}
end analysis for: internal/reflectlite.typedmemmove , result:  &{[] [] [[0] [1] [2]]}
finish analysis for: strconv.AppendUint, result:  &{[] [[0 1 2]] [[0 1 2] [1] [2]]}
finish analysis for: runtime.makeslicecopy, result:  &{[] [[0 1 2]] [[0 1 2] [1] [2] [3]]}
finish analysis for: runtime.arena_heapify, result:  &{[] [[0]] [[0]]}
end analysis for: slices.Compare , result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.reflect_typelinks, result:  &{[] [[] []] []}
finish analysis for: unicode.IsPunct, result:  &{[] [[0]] [[0]]}
finish analysis for: os.CreateTemp, result:  &{[] [[0 1] [0 1]] [[0] [1]]}
finish analysis for: math.sinPi, result:  &{[] [[0]] [[0]]}
finish analysis for: syscall.Gettimeofday, result:  &{[] [[]] [[0]]}
end analysis for: syscall.libc_exchangedata_trampoline , result:  &{[] [] []}
finish analysis for: bytes.NewReader, result:  &{[] [[0]] [[0]]}
finish analysis for: reflect.cvtUintFloat, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*strings.appendSliceWriter).WriteString, result:  &{[0 1] [[] []] [[0 1]]}
finish analysis for: (*internal/abi.SliceType).Len, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.PtrType).FieldAlign, result:  &{[0] [[0]] []}
finish analysis for: (*os/exec.ExitError).SysUsage, result:  &{[0] [[0]] []}
finish analysis for: (*fmt.readRune).ReadRune, result:  &{[0] [[0] [] []] []}
finish analysis for: strings.ToLowerSpecial, result:  &{[] [[1]] [[0] [1]]}
finish analysis for: (*runtime.errorAddressString).RuntimeError, result:  &{[0] [] []}
end analysis for: syscall.libc_write_trampoline , result:  &{[] [] []}
finish analysis for: (*io.pipe).closeRead$1, result:  &{[] [] []}
finish analysis for: runtime.cgounimpl, result:  &{[] [] []}
finish analysis for: (context.stopCtx).Deadline, result:  &{[0] [[] []] []}
finish analysis for: os.Chdir, result:  &{[] [[0]] [[0]]}
finish analysis for: (*runtime.addrRange).contains, result:  &{[0] [[1]] [[1]]}
finish analysis for: (*internal/abi.MapType).ExportedMethods, result:  &{[0] [[0]] []}
end analysis for: internal/abi.FuncPCABI0 , result:  &{[] [[]] [[0]]}
finish analysis for: (*strings.Reader).Read, result:  &{[0] [[] []] [[0 1]]}
finish analysis for: (*os.fileWithoutReadFrom).Sync, result:  &{[0] [[0]] []}
finish analysis for: (os.fileWithoutWriteTo).SetWriteDeadline, result:  &{[0] [[]] [[1]]}
end analysis for: internal/bytealg.LastIndexRabinKarp , result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*reflect.Value).Close, result:  &{[0] [] []}
end analysis for: syscall.Syscall6 , result:  &{[] [[] [] []] [[0] [1] [2] [3] [4] [5] [6]]}
finish analysis for: bytes.LastIndexAny, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (os.fileWithoutReadFrom).setWriteDeadline, result:  &{[0] [[]] [[1]]}
finish analysis for: sort.stringsAreSortedImpl, result:  &{[] [[]] [[0]]}
finish analysis for: sort.StringsAreSorted, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.unsafeslicecheckptr, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: runtime.initMetrics$11, result:  &{[] [] [[0] [0 1]]}
finish analysis for: (*io.SectionReader).Read, result:  &{[0] [[] [0]] [[1]]}
finish analysis for: (*strconv.NumError).Unwrap, result:  &{[0] [[0]] []}
finish analysis for: syscall.Select, result:  &{[] [[]] [[0] [1] [2] [3] [4]]}
finish analysis for: runtime.checkptrAlignment, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: runtime.reflectlite_resolveNameOff, result:  &{[] [[1]] [[0] [1]]}
finish analysis for: runtime.cgocallbackg1$1, result:  &{[] [] [[0]]}
finish analysis for: runtime.sync_runtime_SemacquireRWMutex, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: (*sync/atomic.noCopy).Lock, result:  &{[0] [] []}
finish analysis for: (os.fileWithoutReadFrom).SetWriteDeadline, result:  &{[0] [[]] [[1]]}
finish analysis for: (*reflect.structType).Len, result:  &{[0] [[0]] []}
end analysis for: runtime.emptyfunc , result:  &{[] [] []}
finish analysis for: syscall.Fchflags, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*os.fileWithoutWriteTo).Readdir, result:  &{[0] [[0] [0]] [[1]]}
finish analysis for: (*time.fileSizeError).Error, result:  &{[0] [[]] []}
finish analysis for: time.LoadLocation, result:  &{[] [[0] [0]] [[0]]}
end analysis for: sync.runtime_SemacquireMutex , result:  &{[] [] [[0] [1] [2]]}
finish analysis for: (*runtime.addrRange).size, result:  &{[0] [[]] []}
finish analysis for: (*os/exec.ExitError).Exited, result:  &{[0] [[0]] []}
finish analysis for: runtime.sweepone$1, result:  &{[] [] []}
finish analysis for: (*os.fileWithoutWriteTo).WriteString, result:  &{[0] [[] [0]] [[1]]}
finish analysis for: math.Nextafter32, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*os.dirFS).Stat, result:  &{[0] [[1] [1]] [[1]]}
finish analysis for: (time.Time).Date, result:  &{[0] [[0] [0] [0]] []}
finish analysis for: (*time.Time).Date, result:  &{[0] [[] [] []] []}
finish analysis for: (*internal/abi.ArrayType).GcSlice, result:  &{[0] [[]] [[1] [2]]}
end analysis for: runtime/internal/atomic.Xaddint64 , result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*internal/poll.FD).writeUnlock, result:  &{[0] [] []}
finish analysis for: syscall.Setregid, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*reflect.rtype).FieldByName, result:  &{[0] [[0] []] [[1]]}
finish analysis for: (reflect.Value).FieldByName, result:  &{[0] [[0]] [[1]]}
finish analysis for: (*reflect.Value).FieldByName, result:  &{[0] [[]] [[1]]}
finish analysis for: (*reflect.Value).SetUint, result:  &{[0] [] [[1]]}
finish analysis for: sort.Find, result:  &{[] [[0] [0]] [[0] [1]]}
finish analysis for: runtime.finalizercommit, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*time.Timer).Reset, result:  &{[0] [[]] [[1]]}
finish analysis for: (*runtime.mspan).setUserArenaChunkToFault$1, result:  &{[] [] []}
finish analysis for: (*runtime.writeUserArenaHeapBits).write, result:  &{[0] [[2 3]] [[1] [2] [3]]}
end analysis for: slices.IndexFunc , result:  &{[] [[]] [[0] [1]]}
end analysis for: runtime/internal/atomic.Load64 , result:  &{[] [[]] [[0]]}
finish analysis for: (runtime.boundsError).RuntimeError, result:  &{[0] [] []}
finish analysis for: (*reflect.flag).ro, result:  &{[0] [[]] []}
end analysis for: reflect.rselect , result:  &{[] [[] []] [[0]]}
end analysis for: runtime/internal/atomic.And8 , result:  &{[] [] [[0] [1]]}
finish analysis for: (*runtime/internal/atomic.Uint64).Swap, result:  &{[0] [[]] [[1]]}
finish analysis for: (*runtime.pallocData).allocPages64, result:  &{[0 2] [] [[1] [2]]}
finish analysis for: runtime._LostContendedRuntimeLock, result:  &{[] [] []}
finish analysis for: math/bits.Add, result:  &{[] [[0 1 2] [0 1 2]] [[0] [1] [2]]}
finish analysis for: (*internal/reflectlite.rtype).ArrayType, result:  &{[0] [[0]] []}
end analysis for: slices.symMergeOrdered , result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: (*reflect.rtype).Key, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.ChanType).NumMethod, result:  &{[0] [[]] []}
finish analysis for: internal/chacha8rand.block_generic, result:  &{[] [] [[0] [0 1 2] [2]]}
finish analysis for: strings.CutPrefix, result:  &{[] [[0] []] [[0] [1]]}
finish analysis for: runtime.exitsyscallfast_pidle, result:  &{[] [[]] []}
finish analysis for: (*time.Time).setMono, result:  &{[0 1] [] [[1]]}
finish analysis for: runtime.goroutineProfileWithLabelsSync$1, result:  &{[] [[]] [[0]]}
finish analysis for: (os.fileWithoutWriteTo).Write, result:  &{[0] [[] [0]] [[1]]}
finish analysis for: runtime.initMetrics$48, result:  &{[] [] [[0] [0 1]]}
finish analysis for: (*internal/reflectlite.flag).kind, result:  &{[0] [[]] []}
finish analysis for: (*internal/abi.SliceType).MapType, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.Name).IsEmbedded, result:  &{[0] [[]] []}
finish analysis for: (*io/fs.PathError).Error, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.InterfaceType).IsDirectIface, result:  &{[0] [[0]] []}
finish analysis for: runtime.arena_arena_Slice, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: context.WithCancelCause, result:  &{[] [[0] []] [[0]]}
finish analysis for: (*runtime.sweepLocked).sweep$2, result:  &{[] [] []}
finish analysis for: path/filepath.IsLocal, result:  &{[] [[]] [[0]]}
finish analysis for: (*fmt.ss).Token, result:  &{[0] [[0] []] [[0 1] [2]]}
finish analysis for: (*syscall.RouteMessage).sockaddr, result:  &{[0] [[0] []] []}
finish analysis for: (*internal/reflectlite.rtype).Comparable, result:  &{[0] [[]] []}
finish analysis for: fmt.Sprintf, result:  &{[] [[0 1]] [[0 1] [1]]}
finish analysis for: (*internal/abi.PtrType).Size, result:  &{[0] [[0]] []}
finish analysis for: sort.SearchInts$1, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.SetCPUProfileRate, result:  &{[] [] [[0]]}
finish analysis for: (*bytes.Buffer).ReadString, result:  &{[0] [[0] []] [[1]]}
finish analysis for: runtime.mapassign_fast64ptr, result:  &{[] [[0 1 2]] [[0 1 2] [0 1 2] [2]]}
finish analysis for: runtime.memequal0, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.c128equal, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.strmax, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (reflect.Value).mustBeExportedSlow, result:  &{[0] [] []}
finish analysis for: time.closefd, result:  &{[] [] [[0]]}
finish analysis for: (*internal/reflectlite.rtype).String, result:  &{[0] [[]] []}
finish analysis for: (*runtime.liveUserArenaChunk).allocBitsForIndex, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (*context.timerCtx).Deadline, result:  &{[0] [[0] []] []}
finish analysis for: (*internal/abi.Name).ReadVarint, result:  &{[0] [[] [1]] [[1]]}
finish analysis for: runtime.mapassign_fast64, result:  &{[] [[0 1 2]] [[0 1 2] [0 1 2] [2]]}
finish analysis for: (runtime.errorString).RuntimeError, result:  &{[0] [] []}
finish analysis for: (*runtime.errorString).RuntimeError, result:  &{[0] [] []}
finish analysis for: (*reflect.Value).FieldByIndex, result:  &{[0] [[]] [[1]]}
finish analysis for: (*internal/poll.FD).SetsockoptIPMreq, result:  &{[0] [[]] [[1] [2] [3]]}
finish analysis for: strings.TrimLeft, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: (*runtime.liveUserArenaChunk).countAlloc, result:  &{[0] [[0]] []}
finish analysis for: reflect.Swapper$2, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.boring_runtime_arg0, result:  &{[] [[]] []}
finish analysis for: syscall.mmap, result:  &{[] [[] []] [[0] [1] [2] [3] [4] [5]]}
finish analysis for: (*syscall.mmapper).Mmap, result:  &{[0] [[] []] [[1] [2] [3] [4] [5]]}
finish analysis for: syscall.Mmap, result:  &{[] [[] []] [[0] [1] [2] [3] [4]]}
end analysis for: runtime.main_main , result:  &{[] [] []}
end analysis for: runtime/internal/atomic.Xadd64 , result:  &{[] [[]] [[0] [1]]}
finish analysis for: reflect.embeddedIfaceMethStub, result:  &{[] [] []}
end analysis for: time.parseNanoseconds[string] , result:  &{[] [[] [] []] [[0] [1]]}
finish analysis for: sort.SearchFloat64s$1, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.runtime_coverage_getCovPkgMap, result:  &{[] [[]] []}
finish analysis for: io.CopyBuffer, result:  &{[] [[] [0 2]] [[0 2] [1] [2]]}
end analysis for: runtime.kqueue_trampoline , result:  &{[] [] []}
finish analysis for: (*runtime.pollInfo).expiredReadDeadline, result:  &{[0] [[]] []}
end analysis for: internal/syscall/unix.libc_getentropy_trampoline , result:  &{[] [] []}
finish analysis for: math/bits.RotateLeft8, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*context.valueCtx).Err, result:  &{[0] [[0]] []}
finish analysis for: (*time.Time).After, result:  &{[0] [[1]] [[1]]}
finish analysis for: math.tan, result:  &{[] [[0]] [[0]]}
finish analysis for: math.Tan, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.deferreturn, result:  &{[] [] []}
finish analysis for: (*runtime.writeUserArenaHeapBits).flush, result:  &{[0] [] [[1] [2] [3]]}
finish analysis for: fmt.Scan, result:  &{[] [[] []] [[0]]}
finish analysis for: (time.Time).AddDate, result:  &{[0] [[0 1 2 3]] [[1] [2] [3]]}
end analysis for: runtime.walltime_trampoline , result:  &{[] [] []}
end analysis for: internal/bytealg.Compare , result:  &{[] [[]] [[0] [1]]}
finish analysis for: (runtime.liveUserArenaChunk).heapBits, result:  &{[0] [[0]] []}
finish analysis for: syscall.ReadDirent, result:  &{[] [[] []] [[0] [1]]}
finish analysis for: (*reflect.Value).Addr, result:  &{[0] [[]] []}
finish analysis for: (*internal/reflectlite.rtype).Size, result:  &{[0] [[0]] []}
finish analysis for: (*reflect.Value).NumField, result:  &{[0] [[]] []}
finish analysis for: (*reflect.Value).IsValid, result:  &{[0] [[]] []}
finish analysis for: (*syscall.Errno).Timeout, result:  &{[0] [[]] []}
finish analysis for: os.Symlink, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*sync/atomic.Uint32).CompareAndSwap, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: runtime.gcMarkDone$4, result:  &{[] [] []}
finish analysis for: (*unicode.SpecialCase).ToLower, result:  &{[0] [[1]] [[1]]}
end analysis for: syscall.RawSyscall6 , result:  &{[] [[] [] []] [[0] [1] [2] [3] [4] [5] [6]]}
end analysis for: internal/poll.runtime_pollUnblock , result:  &{[] [] [[0]]}
finish analysis for: runtime.debugCallCheck$1, result:  &{[] [] []}
finish analysis for: syscall.Mknod, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: strings.LastIndexFunc, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.entersyscallblock$2, result:  &{[] [] []}
end analysis for: runtime.panicIndex , result:  &{[] [] [[0] [1]]}
finish analysis for: (*runtime.liveUserArenaChunk).ensureSwept, result:  &{[0] [] []}
finish analysis for: runtime.sync_runtime_SemacquireRWMutexR, result:  &{[] [] [[0] [1] [2]]}
finish analysis for: (*sort.StringSlice).Less, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: runtime.initMetrics$25, result:  &{[] [] [[0] [0 1]]}
finish analysis for: runtime.gcBgMarkWorker$1, result:  &{[] [[]] [[0] [1]]}
end analysis for: internal/poll.runtime_isPollServerDescriptor , result:  &{[] [[]] [[0]]}
finish analysis for: reflect.cvtFloat, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: runtime.deferproc, result:  &{[] [] [[0]]}
end analysis for: slices.Sort , result:  &{[] [] [[0]]}
finish analysis for: runtime.exitsyscallfast$1, result:  &{[] [] []}
finish analysis for: (*sort.reverse).Swap, result:  &{[0] [] [[1] [2]]}
end analysis for: (*runtime/internal/atomic.Pointer[func(string, string)]).Store[func(string, string)] , result:  &{[0] [] [[1]]}
finish analysis for: (*internal/reflectlite.rtype).Name, result:  &{[0] [[]] []}
end analysis for: runtime.sigtramp , result:  &{[] [] []}
finish analysis for: runtime.initMetrics$13, result:  &{[] [] [[0] [0 1]]}
finish analysis for: runtime.fmin64, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*sync/atomic.noCopy).Unlock, result:  &{[0] [] []}
end analysis for: runtime.pthread_mutex_lock_trampoline , result:  &{[] [] []}
end analysis for: runtime/internal/atomic.StoreRel64 , result:  &{[] [] [[0] [1]]}
end analysis for: time.atoi , result:  &{[] [[] []] [[0]]}
finish analysis for: strings.TrimFunc, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: strings.TrimSpace, result:  &{[] [[0]] [[0]]}
finish analysis for: (*context.backgroundCtx).Done, result:  &{[0] [[]] []}
finish analysis for: (*runtime.BlockProfileRecord).Stack, result:  &{[0] [[0]] []}
finish analysis for: (*reflect.Value).Float, result:  &{[0] [[]] []}
finish analysis for: (runtime.liveUserArenaChunk).isFree, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (*internal/abi.ChanType).StructType, result:  &{[0] [[0]] []}
finish analysis for: (*internal/reflectlite.rtype).NumOut, result:  &{[0] [[]] []}
finish analysis for: runtime.poll_runtime_pollReset, result:  &{[] [[]] [[0] [1]]}
finish analysis for: syscall.socket, result:  &{[] [[] []] [[0] [1] [2]]}
finish analysis for: strings.Title, result:  &{[] [[0]] [[0]]}
end analysis for: internal/syscall/unix.libc_sysconf_trampoline , result:  &{[] [] []}
finish analysis for: (*fmt.pp).Write, result:  &{[0 1] [[] []] [[0 1]]}
finish analysis for: (*syscall.WaitStatus).TrapCause, result:  &{[0] [[]] []}
finish analysis for: (*internal/poll.FD).Fchmod$1, result:  &{[] [[]] []}
finish analysis for: (*io.SectionReader).Outer, result:  &{[0] [[0] [0] [0]] []}
end analysis for: time.resetTimer , result:  &{[] [[]] [[0] [1]]}
end analysis for: time.atoi[string] , result:  &{[] [[] []] [[0]]}
finish analysis for: time.UnixMicro, result:  &{[] [[0]] [[0]]}
finish analysis for: (*internal/reflectlite.rtype).GcSlice, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: reflect.MakeMapWithSize, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: reflect.MakeMap, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.cgoCheckUsingType, result:  &{[] [] [[0] [1] [2] [3]]}
end analysis for: syscall.libc_munlock_trampoline , result:  &{[] [] []}
end analysis for: runtime.issetugid_trampoline , result:  &{[] [] []}
finish analysis for: (io/fs.dirInfo).Info, result:  &{[0] [[0] []] []}
finish analysis for: (*io/fs.dirInfo).Info, result:  &{[0] [[] []] []}
finish analysis for: (*os.fileWithoutReadFrom).Name, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.SliceType).FieldAlign, result:  &{[0] [[0]] []}
end analysis for: runtime.memhash32 , result:  &{[] [[]] [[0] [1]]}
end analysis for: (*sync/atomic.Pointer[internal/godebug.value]).Load[internal/godebug.value] , result:  &{[0] [[]] []}
finish analysis for: internal/syscall/unix.Getgrgid, result:  &{[] [[]] [[0] [1] [2] [3] [4]]}
end analysis for: sync.runtime_notifyListWait , result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.signal_recv, result:  &{[] [[]] []}
end analysis for: syscall.libc_socket_trampoline , result:  &{[] [] []}
finish analysis for: syscall.Getegid, result:  &{[] [[]] []}
end analysis for: sync/atomic.AddUint64 , result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*context.afterFuncCtx).Deadline, result:  &{[0] [[] []] []}
end analysis for: runtime.kevent_trampoline , result:  &{[] [] []}
finish analysis for: (*internal/abi.MapType).Common, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.funcInfo)._Func, result:  &{[0] [[]] []}
finish analysis for: math.Pow10, result:  &{[] [[]] [[0]]}
finish analysis for: reflect.makeRunes, result:  &{[] [[0 1 2]] [[0] [1] [2]]}
finish analysis for: reflect.cvtStringRunes, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*runtime.mheap).alloc$1, result:  &{[] [] []}
end analysis for: runtime.pthread_create_trampoline , result:  &{[] [] []}
finish analysis for: (os/exec.ExitError).systemTime, result:  &{[0] [[0]] []}
end analysis for: runtime.pthread_attr_getstacksize_trampoline , result:  &{[] [] []}
finish analysis for: (*internal/reflectlite.rtype).NumIn, result:  &{[0] [[]] []}
finish analysis for: (*internal/reflectlite.Value).Elem, result:  &{[0] [[]] []}
finish analysis for: (*reflect.Value).Bytes, result:  &{[0] [[]] []}
finish analysis for: (*sync.noCopy).Lock, result:  &{[0] [] []}
end analysis for: internal/reflectlite.resolveTypeOff , result:  &{[] [[]] [[0] [1]]}
end analysis for: (*runtime/internal/atomic.Pointer[runtime._defer]).CompareAndSwap[runtime._defer] , result:  &{[0] [[]] [[1] [2]]}
finish analysis for: (*time.Time).Nanosecond, result:  &{[0] [[]] []}
finish analysis for: syscall.Setegid, result:  &{[] [[]] [[0]]}
finish analysis for: (*internal/abi.StructType).IfaceIndir, result:  &{[0] [[0]] []}
finish analysis for: (*io/fs.subFS).ReadDir, result:  &{[0] [[0 1] [0 1]] [[1]]}
end analysis for: runtime.sysctl_trampoline , result:  &{[] [] []}
end analysis for: internal/syscall/unix.libc_getnameinfo_trampoline , result:  &{[] [] []}
finish analysis for: (*syscall.Errno).Temporary, result:  &{[0] [[]] []}
end analysis for: time.parseRFC3339 , result:  &{[] [[] []] [[0] [1]]}
finish analysis for: os.Getegid, result:  &{[] [[]] []}
finish analysis for: (*runtime.offAddr).lessThan, result:  &{[0] [[1]] [[1]]}
finish analysis for: syscall.PtraceAttach, result:  &{[] [[]] [[0]]}
end analysis for: syscall.libc_getpriority_trampoline , result:  &{[] [] []}
finish analysis for: (os.fileWithoutReadFrom).SetDeadline, result:  &{[0] [[]] [[1]]}
finish analysis for: (*internal/reflectlite.flag).ro, result:  &{[0] [[]] []}
finish analysis for: (*internal/abi.ChanType).ArrayType, result:  &{[0] [[0]] []}
end analysis for: syscall.libc_getgroups_trampoline , result:  &{[] [] []}
finish analysis for: (*internal/abi.FuncType).FieldAlign, result:  &{[0] [[0]] []}
finish analysis for: bytes.CutSuffix, result:  &{[] [[0] []] [[0] [1]]}
finish analysis for: runtime.flushallmcaches, result:  &{[] [] []}
finish analysis for: bytes.ToUpperSpecial, result:  &{[] [[1]] [[0] [1]]}
finish analysis for: (os.fileWithoutReadFrom).checkValid, result:  &{[0] [[]] [[1]]}
finish analysis for: (os.fileWithoutReadFrom).writeTo, result:  &{[0] [[] [] []] [[1]]}
finish analysis for: (*os.fileWithoutReadFrom).setReadDeadline, result:  &{[0] [[]] [[1]]}
finish analysis for: (*time.Time).AddDate, result:  &{[0] [[1 2 3]] [[1] [2] [3]]}
finish analysis for: (*reflect.ptrType).Size, result:  &{[0] [[0]] []}
end analysis for: slices.rotateRight , result:  &{[] [] [[0] [1]]}
end analysis for: math.archMax , result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.cgoNoCallback, result:  &{[] [] [[0]]}
finish analysis for: runtime.sync_throw, result:  &{[] [] [[0]]}
finish analysis for: runtime.Version, result:  &{[] [[]] []}
end analysis for: reflect.typehash , result:  &{[] [[]] [[0] [1] [2]]}
end analysis for: syscall.libc_getpeername_trampoline , result:  &{[] [] []}
end analysis for: runtime.call65536 , result:  &{[] [] [[0] [1] [2] [3] [4] [5] [6]]}
finish analysis for: (internal/poll.errNetClosing).Temporary, result:  &{[0] [[]] []}
finish analysis for: (*internal/poll.errNetClosing).Temporary, result:  &{[0] [[]] []}
finish analysis for: runtime.gcMarkTermination$3, result:  &{[] [] []}
finish analysis for: (*sync/atomic.Uint32).Add, result:  &{[0] [[]] [[1]]}
finish analysis for: (*internal/poll.FD).Fchown$1, result:  &{[] [[]] []}
end analysis for: runtime.mstart_stub , result:  &{[] [] []}
finish analysis for: runtime.cgoCheckTypedBlock$1, result:  &{[] [] []}
finish analysis for: sort.IsSorted, result:  &{[] [[]] [[0]]}
end analysis for: sync/atomic.SwapInt32 , result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*os.fileWithoutWriteTo).read, result:  &{[0] [[] []] [[1]]}
finish analysis for: runtime.reflect_mapassign_faststr, result:  &{[] [] [[0 1 2] [0 1 2] [2] [3]]}
finish analysis for: (*reflect.structType).Size, result:  &{[0] [[0]] []}
end analysis for: syscall.libc_setpgid_trampoline , result:  &{[] [] []}
finish analysis for: path/filepath.WalkDir, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.cleantimers, result:  &{[] [] [[0]]}
finish analysis for: runtime.interfaceSwitch, result:  &{[] [[] [1]] [[0] [1]]}
finish analysis for: reflect.needKeyUpdate, result:  &{[] [[]] [[0]]}
finish analysis for: syscall.Fpathconf, result:  &{[] [[] []] [[0] [1]]}
finish analysis for: (*time.Time).Equal, result:  &{[0] [[1]] [[1]]}
finish analysis for: (*reflect.Value).panicNotMap, result:  &{[0] [] []}
finish analysis for: (*context.timerCtx).Done, result:  &{[0] [[]] []}
finish analysis for: runtime.mapclone, result:  &{[] [[0]] [[0]]}
finish analysis for: (*reflect.Value).SetString, result:  &{[0] [] [[1]]}
finish analysis for: (*internal/reflectlite.Value).mustBeAssignable, result:  &{[0] [] []}
finish analysis for: (os.fileWithoutWriteTo).Chmod, result:  &{[0] [[0]] [[1]]}
finish analysis for: (*os/exec.ExitError).exited, result:  &{[0] [[0]] []}
finish analysis for: sort.SliceStable, result:  &{[] [] [[0] [1]]}
finish analysis for: (*sync.rlocker).Unlock, result:  &{[0] [] []}
finish analysis for: bytes.LastIndexByte, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.mapiterinit, result:  &{[] [] [[0] [1] [0 1 2]]}
finish analysis for: runtime.reflect_mapiterinit, result:  &{[] [] [[0] [1] [0 1 2]]}
finish analysis for: runtime.goPanicIndexU, result:  &{[] [] [[0] [1]]}
finish analysis for: (runtime.liveUserArenaChunk).reportZombies, result:  &{[0] [] []}
end analysis for: syscall.libc_flock_trampoline , result:  &{[] [] []}
finish analysis for: (reflect.Value).panicNotMap, result:  &{[0] [] []}
finish analysis for: runtime.setMaxThreads, result:  &{[] [[0]] [[0]]}
finish analysis for: (*runtime.pTraceState).setStatusTraced, result:  &{[0] [] [[1]]}
finish analysis for: (*sync/atomic.Uintptr).Swap, result:  &{[0] [[]] [[1]]}
end analysis for: syscall.libc_setgroups_trampoline , result:  &{[] [] []}
finish analysis for: (*bytes.Reader).UnreadRune, result:  &{[0] [[]] []}
finish analysis for: runtime.reflect_verifyNotInHeapPtr, result:  &{[] [[0]] [[0]]}
finish analysis for: syscall.Socket, result:  &{[] [[] []] [[0] [1] [2]]}
finish analysis for: (*time.Time).abs, result:  &{[0] [[]] []}
finish analysis for: runtime.pollFractionalWorkerExit, result:  &{[] [[]] []}
finish analysis for: runtime.hasSuffix, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*strings.Reader).ReadAt, result:  &{[0] [[] []] [[0 1] [2]]}
finish analysis for: (internal/reflectlite.rtype).Kind, result:  &{[0] [[0]] []}
end analysis for: syscall.libc_setrlimit_trampoline , result:  &{[] [] []}
end analysis for: runtime.osinit_hack_trampoline , result:  &{[] [] []}
finish analysis for: (*internal/abi.Name).Tag, result:  &{[0] [[]] []}
end analysis for: time.runtimeNano , result:  &{[] [[]] []}
finish analysis for: (*reflect.structType).Elem, result:  &{[0] [[0]] []}
finish analysis for: (*time.Time).UnixMilli, result:  &{[0] [[]] []}
finish analysis for: runtime.goroutineProfileWithLabelsConcurrent$3, result:  &{[] [] [[0]]}
end analysis for: syscall.libc_kill_trampoline , result:  &{[] [] []}
finish analysis for: runtime.check, result:  &{[] [] []}
finish analysis for: (*bytes.Buffer).Cap, result:  &{[0] [[]] []}
finish analysis for: runtime.goPanicSlice3B, result:  &{[] [] [[0] [1]]}
finish analysis for: (*reflect.Value).Clear, result:  &{[0] [] []}
finish analysis for: runtime.tracebackothers$1, result:  &{[] [] [[0]]}
finish analysis for: reflect.isReflexive, result:  &{[] [[]] [[0]]}
finish analysis for: reflect.MapOf, result:  &{[] [[0 1]] [[0] [1]]}
end analysis for: syscall.libc_chflags_trampoline , result:  &{[] [] []}
finish analysis for: (*runtime/internal/atomic.Uint32).And, result:  &{[0] [] [[1]]}
finish analysis for: runtime.runfinq, result:  &{[] [] []}
finish analysis for: reflect.cvtFloatUint, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*internal/abi.StructType).NumMethod, result:  &{[0] [[]] []}
finish analysis for: runtime.gostringw, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.fipstls_runtime_arg0, result:  &{[] [[]] []}
finish analysis for: (*internal/abi.StructType).Len, result:  &{[0] [[0]] []}
finish analysis for: runtime.traceAdvance$6, result:  &{[] [] []}
finish analysis for: (*internal/abi.SliceType).InterfaceType, result:  &{[0] [[0]] []}
finish analysis for: (*reflect.Value).Slice, result:  &{[0] [[1 2]] [[1] [2]]}
finish analysis for: (*internal/abi.StructType).Common, result:  &{[0] [[0]] []}
finish analysis for: (*fmt.wrapErrors).Unwrap, result:  &{[0] [[0]] []}
finish analysis for: runtime.addtimer, result:  &{[] [] [[0]]}
finish analysis for: runtime.runtime_debug_freeOSMemory$1, result:  &{[] [] []}
finish analysis for: runtime.reflect_mapaccess, result:  &{[] [[0 1 2]] [[0] [1] [2]]}
end analysis for: slices.Index , result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*internal/abi.PtrType).InterfaceType, result:  &{[0] [[0]] []}
finish analysis for: syscall.fork, result:  &{[] [[] []] []}
finish analysis for: runtime.runtime_debug_WriteHeapDump, result:  &{[] [] [[0]]}
finish analysis for: runtime.godebug_setUpdate, result:  &{[] [] [[0]]}
finish analysis for: runtime.reflect_growslice, result:  &{[] [[0 1 2]] [[0 1 2] [1] [2]]}
finish analysis for: runtime.cgoBindM, result:  &{[] [] []}
finish analysis for: (*runtime.scavengerState).init$1, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.initMetrics$44, result:  &{[] [] [[0] [0 1]]}
end analysis for: syscall.libc_ioctl_trampoline , result:  &{[] [] []}
finish analysis for: internal/syscall/unix.Getnameinfo, result:  &{[] [[] []] [[0] [1] [2] [3] [4] [5] [6]]}
finish analysis for: (*internal/abi.StructType).FieldAlign, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.liveUserArenaChunk).heapBits, result:  &{[0] [[0]] []}
finish analysis for: (*reflect.Value).kind, result:  &{[0] [[0]] []}
finish analysis for: internal/bisect.CutMarker, result:  &{[] [[0] [0] []] [[0]]}
finish analysis for: (*reflect.Value).mustBeAssignable, result:  &{[0] [] []}
end analysis for: runtime.getg , result:  &{[] [[]] []}
end analysis for: runtime.getfp , result:  &{[] [[]] []}
finish analysis for: (*os.fileWithoutWriteTo).Truncate, result:  &{[0] [[0]] [[1]]}
finish analysis for: bytes.Cut, result:  &{[] [[0] [0] []] [[0] [1]]}
finish analysis for: runtime.selectgo$2, result:  &{[] [] []}
finish analysis for: (*os.fileWithoutReadFrom).SyscallConn, result:  &{[0] [[0] []] []}
finish analysis for: (*internal/poll.errNetClosing).Timeout, result:  &{[0] [[]] []}
finish analysis for: (*os/exec.ExitError).success, result:  &{[0] [[0]] []}
finish analysis for: runtime.initMetrics$24, result:  &{[] [] [[0] [0 1]]}
finish analysis for: unicode.IsPrint, result:  &{[] [[]] [[0]]}
finish analysis for: (*runtime.offAddr).addr, result:  &{[0] [[]] []}
finish analysis for: syscall.PtraceDetach, result:  &{[] [[]] [[0]]}
finish analysis for: runtime.initMetrics$15, result:  &{[] [] [[0] [0 1]]}
finish analysis for: syscall.Setpgid, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*internal/abi.PtrType).Kind, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.StructType).ArrayType, result:  &{[0] [[0]] []}
finish analysis for: (*internal/poll.DeadlineExceededError).Error, result:  &{[0] [[]] []}
finish analysis for: (*reflect.ptrType).Len, result:  &{[0] [[0]] []}
finish analysis for: (os.fileWithoutWriteTo).Stat, result:  &{[0] [[0] [0]] []}
finish analysis for: runtime.readMetrics, result:  &{[] [] [[0] [1] [2]]}
end analysis for: slices.reverseRangeCmpFunc , result:  &{[] [] [[0] [1] [2] [3]]}
end analysis for: runtime.gcWriteBarrier7 , result:  &{[] [] []}
end analysis for: internal/syscall/unix.syscall_syscall , result:  &{[] [[] [] []] [[0] [1] [2] [3]]}
finish analysis for: internal/syscall/unix.Ptsname, result:  &{[] [[] []] [[0]]}
finish analysis for: os/exec.skipStdinCopyError, result:  &{[] [[0]] [[0]]}
finish analysis for: (unicode.SpecialCase).ToLower$bound, result:  &{[] [[0]] [[0]]}
finish analysis for: (*time.Duration).Abs, result:  &{[0] [[]] []}
finish analysis for: (*os.fileWithoutReadFrom).Chown, result:  &{[0] [[0]] [[1] [2]]}
finish analysis for: (*internal/abi.StructType).Elem, result:  &{[0] [[0]] []}
finish analysis for: (os.fileWithoutReadFrom).write, result:  &{[0] [[] []] [[1]]}
finish analysis for: (*sync/atomic.Int64).CompareAndSwap, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: (context.valueCtx).Deadline, result:  &{[0] [[] []] []}
finish analysis for: os/exec.Command$1, result:  &{[] [] [[0]]}
finish analysis for: runtime.mapdelete_fast32, result:  &{[] [] [[0 1 2] [0 1 2] [2]]}
finish analysis for: (*reflect.Value).Grow, result:  &{[0] [] [[1]]}
finish analysis for: runtime.concatstring5, result:  &{[] [[1 2 3 4 5]] [[0] [1] [2] [3] [4] [5]]}
finish analysis for: runtime.initMetrics$36, result:  &{[] [] [[0] [0 1]]}
finish analysis for: (*internal/abi.ArrayType).StructType, result:  &{[0] [[0]] []}
finish analysis for: os.volumeName, result:  &{[] [[]] [[0]]}
finish analysis for: (*os/exec.Cmd).childStdin$1, result:  &{[] [[]] []}
finish analysis for: reflect.cvtI2I, result:  &{[] [[0 1]] [[0] [1]]}
end analysis for: runtime.cgocallback , result:  &{[] [] [[0] [1] [2]]}
finish analysis for: (*reflect.Value).CanFloat, result:  &{[0] [[]] []}
finish analysis for: os.UserHomeDir, result:  &{[] [[] []] []}
finish analysis for: (runtime.liveUserArenaChunk).layout, result:  &{[0] [[0] [0] [0]] []}
end analysis for: slices.Equal , result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*reflect.Value).ro, result:  &{[0] [[]] []}
finish analysis for: reflect.StructOf$2, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*syscall.InterfaceMulticastAddrMessage).sockaddr, result:  &{[0] [[0] []] []}
finish analysis for: (*runtime.liveUserArenaChunk).writeHeapBitsSmall, result:  &{[0] [[3]] [[1] [2] [3]]}
finish analysis for: (reflect.Value).OverflowFloat, result:  &{[0] [[1]] [[1]]}
finish analysis for: (*reflect.Value).OverflowFloat, result:  &{[0] [[1]] [[1]]}
finish analysis for: runtime.syscall_runtime_BeforeFork, result:  &{[] [] []}
end analysis for: slices.MinFunc , result:  &{[] [[]] [[0] [1]]}
end analysis for: runtime.call8388608 , result:  &{[] [] [[0] [1] [2] [3] [4] [5] [6]]}
finish analysis for: (*os.fileWithoutReadFrom).pwrite, result:  &{[0] [[] []] [[1] [2]]}
finish analysis for: (*sync/atomic.Int64).Add, result:  &{[0] [[]] [[1]]}
finish analysis for: math/bits.LeadingZeros16, result:  &{[] [[0]] [[0]]}
finish analysis for: math.Lgamma, result:  &{[] [[0] []] [[0]]}
finish analysis for: (*bytes.Buffer).Truncate, result:  &{[0] [] [[1]]}
finish analysis for: runtime.cgoCheckPtrWrite$1, result:  &{[] [] []}
finish analysis for: internal/reflectlite.escapes, result:  &{[] [] [[0]]}
finish analysis for: (*io.OffsetWriter).Write, result:  &{[0] [[] [0]] [[1]]}
end analysis for: syscall.libc_execve_trampoline , result:  &{[] [] []}
end analysis for: runtime.open_trampoline , result:  &{[] [] []}
finish analysis for: (*internal/abi.InterfaceType).Kind, result:  &{[0] [[0]] []}
finish analysis for: runtime.newosproc0, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.atomic_storePointer, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.initMetrics$22, result:  &{[] [] [[0] [0 1]]}
end analysis for: internal/poll.fdopendir , result:  &{[] [[] []] [[0]]}
finish analysis for: (*runtime/internal/atomic.Uint32).CompareAndSwapRelease, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: (context.todoCtx).Done, result:  &{[0] [[]] []}
finish analysis for: syscall.unlinkat, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: path/filepath.walk, result:  &{[] [[]] [[0] [1] [2]]}
end analysis for: runtime.pthread_kill_trampoline , result:  &{[] [] []}
finish analysis for: (*reflect.Value).InterfaceData, result:  &{[0] [[]] []}
finish analysis for: internal/godebug.update, result:  &{[] [] [[0] [1]]}
finish analysis for: (*os/exec.Cmd).writerDescriptor$1, result:  &{[] [[]] []}
finish analysis for: (internal/reflectlite.rtype).NumMethod, result:  &{[0] [[]] []}
finish analysis for: (*internal/reflectlite.rtype).NumMethod, result:  &{[0] [[]] []}
finish analysis for: (*internal/abi.ArrayType).HasName, result:  &{[0] [[0]] []}
finish analysis for: runtime.initMetrics$17, result:  &{[] [] [[0] [0 1]]}
finish analysis for: (*context.stopCtx).Err, result:  &{[0] [[0]] []}
finish analysis for: (*syscall.WaitStatus).Signal, result:  &{[0] [[]] []}
finish analysis for: (*runtime.pTraceState).nextSeq, result:  &{[0] [[0]] [[1]]}
finish analysis for: math.Ilogb, result:  &{[] [[0]] [[0]]}
finish analysis for: (*internal/reflectlite.Value).Set, result:  &{[0] [] [[1]]}
end analysis for: runtime.panicSlice3C , result:  &{[] [] [[0] [1]]}
finish analysis for: (internal/reflectlite.rtype).StructType, result:  &{[0] [[0]] []}
finish analysis for: (os.fileWithoutReadFrom).SetReadDeadline, result:  &{[0] [[]] [[1]]}
end analysis for: (*runtime/internal/atomic.Pointer[runtime.g]).CompareAndSwapNoWB[runtime.g] , result:  &{[0] [[]] [[1] [2]]}
finish analysis for: (*internal/abi.InterfaceType).Elem, result:  &{[0] [[0]] []}
end analysis for: runtime/internal/atomic.Xchg , result:  &{[] [[]] [[0] [1]]}
end analysis for: internal/godebug.setUpdate , result:  &{[] [] [[0]]}
finish analysis for: (*internal/fmtsort.SortedMap).Len, result:  &{[0] [[]] []}
finish analysis for: (*internal/poll.errNetClosing).Error, result:  &{[0] [[]] []}
finish analysis for: syscall.Setgid, result:  &{[] [[]] [[0]]}
finish analysis for: (*os.fileWithoutReadFrom).Write, result:  &{[0] [[] [0]] [[1]]}
finish analysis for: runtime.sync_runtime_Semacquire, result:  &{[] [] [[0]]}
finish analysis for: runtime.chansend$1, result:  &{[] [] []}
finish analysis for: (*internal/reflectlite.rtype).Elem, result:  &{[0] [[]] []}
end analysis for: sync.OnceValues , result:  &{[] [[]] [[0]]}
finish analysis for: runtime.SetCgoTraceback, result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: context.WithCancelCause$1, result:  &{[] [] [[0]]}
finish analysis for: (*runtime/internal/atomic.Uintptr).StoreRelease, result:  &{[0] [] [[1]]}
finish analysis for: (*internal/abi.Name).Data, result:  &{[0] [[1]] [[1]]}
finish analysis for: syscall.ioctl, result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: internal/syscall/unix.PosixOpenpt, result:  &{[] [[] []] [[0]]}
finish analysis for: (*context.emptyCtx).Done, result:  &{[0] [[]] []}
finish analysis for: runtime.startTimer, result:  &{[] [] [[0]]}
end analysis for: sync/atomic.CompareAndSwapPointer , result:  &{[] [[]] [[0] [1] [2]]}
end analysis for: syscall.libc_connect_trampoline , result:  &{[] [] []}
finish analysis for: (os.fileWithoutReadFrom).pread, result:  &{[0] [[] []] [[1] [2]]}
finish analysis for: (*runtime/internal/atomic.Uint8).And, result:  &{[0] [] [[1]]}
finish analysis for: (*os.fileWithoutWriteTo).chmod, result:  &{[0] [[0]] [[1]]}
finish analysis for: runtime.f32touint64, result:  &{[] [[0]] [[0]]}
end analysis for: time.isDigit , result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*runtime.liveUserArenaChunk).isFree, result:  &{[0] [[0 1]] [[1]]}
finish analysis for: (*sync/atomic.Uint64).Load$bound, result:  &{[] [[]] []}
finish analysis for: runtime.initMetrics$2, result:  &{[] [] [[0] [0 1]]}
finish analysis for: (os.fileWithoutReadFrom).pwrite, result:  &{[0] [[] []] [[1] [2]]}
end analysis for: runtime.pthread_mutex_unlock_trampoline , result:  &{[] [] []}
finish analysis for: (*time.Time).AppendFormat, result:  &{[0] [[1 2]] [[1] [2]]}
finish analysis for: (*os.fileWithoutWriteTo).write, result:  &{[0] [[] []] [[1]]}
end analysis for: syscall.libc_getrusage_trampoline , result:  &{[] [] []}
finish analysis for: os.newFile$1, result:  &{[] [[]] []}
finish analysis for: runtime.cgoCheckMemmove, result:  &{[] [] [[0] [1] [2]]}
end analysis for: reflect.mapassign_faststr0 , result:  &{[] [] [[0] [1] [2] [3]]}
finish analysis for: runtime.signal_ignore, result:  &{[] [] [[0]]}
finish analysis for: (*internal/poll.FD).SetsockoptIPv6Mreq, result:  &{[0] [[]] [[1] [2] [3]]}
finish analysis for: (*os.noReadFrom).ReadFrom, result:  &{[0] [[] []] [[1]]}
end analysis for: slices.Compact , result:  &{[] [[]] [[0]]}
finish analysis for: (*time.Duration).Truncate, result:  &{[0] [[1]] [[1]]}
finish analysis for: os.MkdirAll, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: internal/bisect.Marker, result:  &{[] [[0]] [[0]]}
finish analysis for: (*reflect.ptrType).ArrayType, result:  &{[0] [[0]] []}
end analysis for: reflect.chansend0 , result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: runtime.markBitsForSpan, result:  &{[] [[0]] [[0]]}
finish analysis for: sort.IntsAreSorted, result:  &{[] [[]] [[0]]}
finish analysis for: (*syscall.WaitStatus).Exited, result:  &{[0] [[]] []}
finish analysis for: runtime.stopTheWorld$1, result:  &{[] [] []}
finish analysis for: path/filepath.Walk, result:  &{[] [[]] [[0] [1]]}
end analysis for: internal/syscall/unix.SendmsgNInet4 , result:  &{[] [[] []] [[0] [1] [2] [3] [4]]}
end analysis for: os.runtime_beforeExit , result:  &{[] [] [[0]]}
finish analysis for: (*os.fileWithoutWriteTo).Write, result:  &{[0] [[] [0]] [[1]]}
finish analysis for: (*runtime.gTraceState).setStatusTraced, result:  &{[0] [] [[1]]}
end analysis for: syscall.libc_read_trampoline , result:  &{[] [] []}
finish analysis for: runtime.schedtrace$1, result:  &{[] [] [[0]]}
end analysis for: syscall.libc_getsid_trampoline , result:  &{[] [] []}
end analysis for: reflect.mapaccess , result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: runtime.reflect_chanrecv, result:  &{[] [[] [0 2]] [[0 2] [1] [0 2]]}
finish analysis for: (*internal/reflectlite.rtype).IsDirectIface, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.Kind).String, result:  &{[0] [[]] []}
end analysis for: reflect.makechan , result:  &{[] [[]] [[0] [1]]}
finish analysis for: internal/syscall/unix.ResNclose, result:  &{[] [] [[0]]}
finish analysis for: (*time.Time).appendFormat, result:  &{[0] [[1 2]] [[1] [2]]}
finish analysis for: (*internal/reflectlite.rtype).Uncommon, result:  &{[0] [[0]] []}
finish analysis for: (internal/reflectlite.rtype).ChanDir, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.InterfaceType).InterfaceType, result:  &{[0] [[0]] []}
finish analysis for: (*internal/abi.FuncType).NumMethod, result:  &{[0] [[]] []}
finish analysis for: (*os.fileWithoutReadFrom).Truncate, result:  &{[0] [[0]] [[1]]}
end analysis for: (*sync/atomic.Pointer[any]).Store[any] , result:  &{[0] [] [[1]]}
finish analysis for: (*reflect.structType).Kind, result:  &{[0] [[0]] []}
finish analysis for: (*runtime/internal/atomic.Uint32).StoreRelease, result:  &{[0] [] [[1]]}
finish analysis for: (*internal/poll.FD).GetsockoptInt, result:  &{[0] [[] []] [[1] [2]]}
finish analysis for: (*reflect.Value).Bool, result:  &{[0] [[]] []}
end analysis for: runtime.reflectcall , result:  &{[] [] [[0] [1] [2] [3] [4] [5] [6]]}
finish analysis for: (*os.fileWithoutReadFrom).Read, result:  &{[0] [[] [0]] [[1]]}
finish analysis for: (context.todoCtx).Err, result:  &{[0] [[]] []}
finish analysis for: (os.fileWithoutWriteTo).Read, result:  &{[0] [[] [0]] [[1]]}
end analysis for: runtime.fmin[float32] , result:  &{[] [[]] [[0] [1]]}
finish analysis for: io.TeeReader, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*reflect.Value).SetIterKey, result:  &{[0] [] [[1]]}
end analysis for: slices.medianAdjacentOrdered , result:  &{[] [[]] [[0] [1] [2]]}
finish analysis for: (*internal/reflectlite.Value).ro, result:  &{[0] [[]] []}
finish analysis for: (*runtime.Pinner).Pin, result:  &{[0 1] [] [[1]]}
finish analysis for: (*reflect.ptrType).GcSlice, result:  &{[0] [[]] [[1] [2]]}
end analysis for: syscall.libc_sysctl_trampoline , result:  &{[] [] []}
finish analysis for: runtime.fmin32, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.poll_runtime_pollWait, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*internal/abi.ArrayType).IsDirectIface, result:  &{[0] [[0]] []}
finish analysis for: (*context.valueCtx).Value, result:  &{[0] [[0]] [[1]]}
finish analysis for: runtime.memequal32, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: os.UserConfigDir, result:  &{[] [[] []] []}
finish analysis for: (*bytes.Reader).Size, result:  &{[0] [[]] []}
finish analysis for: (*runtime.boundsError).RuntimeError, result:  &{[0] [] []}
finish analysis for: fmt.Scanf, result:  &{[] [[] []] [[0] [1]]}
finish analysis for: (time.Time).IsDST, result:  &{[0] [[0]] []}
finish analysis for: (reflect.Value).mustBeExported, result:  &{[0] [] []}
end analysis for: sync.runtime_nanotime , result:  &{[] [[]] []}
finish analysis for: math.Gamma, result:  &{[] [[0]] [[0]]}
finish analysis for: (*internal/abi.PtrType).HasName, result:  &{[0] [[0]] []}
finish analysis for: runtime.initMetrics$34, result:  &{[] [] [[0] [1]]}
finish analysis for: (*runtime/internal/atomic.UnsafePointer).CompareAndSwap, result:  &{[0] [[]] [[1] [2]]}
finish analysis for: (*reflect.Value).bytesSlow, result:  &{[0] [[]] []}
end analysis for: slices.CompactFunc , result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*reflect.Value).TrySend, result:  &{[0] [[]] [[1]]}
finish analysis for: runtime.boring_registerCache, result:  &{[] [] [[0]]}
finish analysis for: os.Geteuid, result:  &{[] [[]] []}
finish analysis for: (*sort.StringSlice).Len, result:  &{[0] [[]] []}
end analysis for: runtime/internal/atomic.Or32 , result:  &{[] [[]] [[0] [1]]}
finish analysis for: time.initLocal, result:  &{[] [] []}
finish analysis for: runtime.runExitHooks$1$1, result:  &{[] [] []}
finish analysis for: runtime.godebug_setNewIncNonDefault, result:  &{[] [] [[0]]}
finish analysis for: runtime.stringHash, result:  &{[] [[]] [[0] [1]]}
finish analysis for: time.sendTime, result:  &{[] [] [[0] [1]]}
finish analysis for: runtime.notifyListWait, result:  &{[] [] [[0 1] [1]]}
end analysis for: slices.Min , result:  &{[] [[]] [[0]]}
finish analysis for: (*reflect.Value).assignTo, result:  &{[0] [[2 3]] [[1] [2] [3]]}
finish analysis for: bytes.ToUpper, result:  &{[] [[0]] [[0]]}
finish analysis for: (*context.stopCtx).Value, result:  &{[0] [[]] [[1]]}
end analysis for: runtime/internal/atomic.Xaddint32 , result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.gfget$1, result:  &{[] [] []}
finish analysis for: runtime.needAndBindM, result:  &{[] [] []}
finish analysis for: runtime.goschedguarded_m, result:  &{[] [] [[0]]}
end analysis for: sync/atomic.StoreInt32 , result:  &{[] [] [[0] [1]]}
finish analysis for: (*strings.byteStringReplacer).WriteString, result:  &{[0] [[] []] [[0 1] [2]]}
end analysis for: runtime.fmax[float64] , result:  &{[] [[]] [[0] [1]]}
finish analysis for: internal/cpu.parseARM64SystemRegisters, result:  &{[] [] [[0]]}
finish analysis for: internal/poll.IsPollDescriptor, result:  &{[] [[]] [[0]]}
finish analysis for: (*runtime.scavChunkData).isEmpty, result:  &{[0] [[0]] []}
finish analysis for: (*runtime.pallocSum).end, result:  &{[0] [[]] []}
end analysis for: syscall.libc_unlink_trampoline , result:  &{[] [] []}
finish analysis for: errors.Join, result:  &{[] [[0]] [[0]]}
finish analysis for: strconv.QuoteToGraphic, result:  &{[] [[0]] [[0]]}
end analysis for: reflect.chancap , result:  &{[] [[]] [[0]]}
end analysis for: internal/poll.runtime_pollSetDeadline , result:  &{[] [] [[0] [1] [2]]}
finish analysis for: (*time.Time).IsDST, result:  &{[0] [[]] []}
finish analysis for: (*time.Time).String, result:  &{[0] [[]] []}
finish analysis for: reflect.Select, result:  &{[] [[] [0] []] [[0]]}
finish analysis for: runtime.convT16, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.poll_runtime_Semrelease, result:  &{[] [] [[0]]}
finish analysis for: (*runtime.TypeAssertionError).Error, result:  &{[0] [[0]] []}
end analysis for: os.closedir , result:  &{[] [[]] [[0]]}
end analysis for: (*runtime/internal/atomic.Pointer[string]).Load[string] , result:  &{[0] [[]] []}
end analysis for: runtime.procyield , result:  &{[] [] [[0]]}
finish analysis for: (*sync.WaitGroup).Done, result:  &{[0] [] []}
finish analysis for: (*reflect.Value).capNonSlice, result:  &{[0] [[]] []}
finish analysis for: (*internal/abi.InterfaceType).Key, result:  &{[0] [[0]] []}
finish analysis for: (*internal/reflectlite.Value).CanSet, result:  &{[0] [[]] []}
end analysis for: syscall.libc_fstatat_trampoline , result:  &{[] [] []}
end analysis for: internal/syscall/unix.libc_gai_strerror_trampoline , result:  &{[] [] []}
finish analysis for: (*reflect.Value).UnsafePointer, result:  &{[0] [[]] []}
finish analysis for: (os/exec.ExitError).ExitCode, result:  &{[0] [[0]] []}
finish analysis for: (*bytes.Buffer).Next, result:  &{[0 1] [[0 1]] [[1]]}
finish analysis for: (os.fileWithoutWriteTo).WriteString, result:  &{[0] [[] [0]] [[1]]}
finish analysis for: (*reflect.Value).FieldByIndexErr, result:  &{[0] [[] []] [[1]]}
finish analysis for: runtime.gorecover, result:  &{[] [[]] [[0]]}
finish analysis for: (*context.emptyCtx).Deadline, result:  &{[0] [[] []] []}
finish analysis for: runtime.syscall_syscallX, result:  &{[] [[0 1 2 3] [0 1 2 3] [0 1 2 3]] [[0] [1] [2] [3]]}
finish analysis for: (*runtime.liveUserArenaChunk).initHeapBits, result:  &{[0] [] [[1]]}
finish analysis for: (*sync/atomic.Int64).Store, result:  &{[0] [] [[1]]}
finish analysis for: (os.fileWithoutWriteTo).Sync, result:  &{[0] [[0]] []}
finish analysis for: (*os/exec.ExitError).String, result:  &{[0] [[0]] []}
end analysis for: runtime/internal/atomic.Xadd , result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*fmt.wrapError).Unwrap, result:  &{[0] [[0]] []}
end analysis for: slices.reverseRangeOrdered , result:  &{[] [] [[0] [1] [2]]}
finish analysis for: math.Jn, result:  &{[] [[0 1]] [[0] [1]]}
finish analysis for: (*internal/abi.MapType).NumMethod, result:  &{[0] [[]] []}
finish analysis for: (*reflect.structType).FuncType, result:  &{[0] [[0]] []}
finish analysis for: (*context.deadlineExceededError).Error, result:  &{[0] [[]] []}
end analysis for: slices.siftDownCmpFunc , result:  &{[] [] [[0] [1] [2] [3] [4]]}
finish analysis for: (*internal/abi.PtrType).Key, result:  &{[0] [[0]] []}
finish analysis for: runtime.initMetrics$10, result:  &{[] [] [[0] [0 1]]}
finish analysis for: (*internal/abi.MapType).MapType, result:  &{[0] [[0]] []}
end analysis for: os.runtime_args , result:  &{[] [[]] []}
finish analysis for: (*time.Time).Unix, result:  &{[0] [[]] []}
end analysis for: syscall.libc_lchown_trampoline , result:  &{[] [] []}
end analysis for: syscall.libc_closedir_trampoline , result:  &{[] [] []}
finish analysis for: (*internal/abi.ChanType).Uncommon, result:  &{[0] [[0]] []}
end analysis for: internal/bytealg.IndexRabinKarp[[]byte] , result:  &{[] [[]] [[0] [1]]}
finish analysis for: bytes.Repeat, result:  &{[] [[0]] [[0] [1]]}
finish analysis for: (*runtime.pallocData).find, result:  &{[0] [[0 2] [2]] [[1] [2]]}
finish analysis for: runtime.initMetrics$54, result:  &{[] [] [[0] [1]]}
finish analysis for: internal/syscall/unix.KernelVersion, result:  &{[] [[] []] []}
end analysis for: runtime/internal/atomic.And64 , result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*time.Time).In, result:  &{[0] [[1]] [[1]]}
finish analysis for: syscall.SetBpfDatalink, result:  &{[] [[1] []] [[0] [1]]}
finish analysis for: runtime.legacy_fastrandn, result:  &{[] [[0]] [[0]]}
finish analysis for: (*os.fileWithoutWriteTo).Chdir, result:  &{[0] [[0]] []}
end analysis for: internal/syscall/unix.SendmsgNInet6 , result:  &{[] [[] []] [[0] [1] [2] [3] [4]]}
finish analysis for: (*reflect.Value).setRunes, result:  &{[0] [] [[1]]}
finish analysis for: (*runtime.funcInfo).funcInfo, result:  &{[0] [[0]] []}
finish analysis for: (*os.fileWithoutWriteTo).ReadFrom, result:  &{[0] [[] [0]] [[1]]}
finish analysis for: runtime.memhash0, result:  &{[] [[1]] [[0] [1]]}
finish analysis for: syscall.Mprotect, result:  &{[] [[]] [[0] [1]]}
finish analysis for: runtime.initMetrics$19, result:  &{[] [] [[0] [0 1]]}
finish analysis for: (os.fileWithoutReadFrom).wrapErr, result:  &{[0] [[0 1 2]] [[1] [2]]}
finish analysis for: math/bits.LeadingZeros8, result:  &{[] [[0]] [[0]]}
finish analysis for: runtime.reflect_maplen, result:  &{[] [[0]] [[0]]}
finish analysis for: (runtime.liveUserArenaChunk).typePointersOfType, result:  &{[0] [[1 2]] [[1] [2]]}
end analysis for: syscall.libc_fchdir_trampoline , result:  &{[] [] []}
finish analysis for: (*context.timerCtx).Err, result:  &{[0] [[0]] []}
finish analysis for: (*strings.byteReplacer).Replace, result:  &{[0] [[0 1]] [[1]]}
end analysis for: slices.Sort[[]float64 float64] , result:  &{[] [] [[0]]}
finish analysis for: (*runtime._panic).nextFrame$1, result:  &{[] [] []}
finish analysis for: (*runtime.waitReason).isMutexWait, result:  &{[0] [[]] []}
finish analysis for: (os.fileWithoutReadFrom).Close, result:  &{[0] [[0]] []}
finish analysis for: (*bytes.Buffer).UnreadByte, result:  &{[0] [[]] []}
finish analysis for: syscall.Setreuid, result:  &{[] [[]] [[0] [1]]}
finish analysis for: (*time.Ticker).Reset, result:  &{[0] [] [[1]]}
finish analysis for: runtime.initMetrics$41, result:  &{[] [] [[0] [0 1]]}
